var searchIndex = JSON.parse('{\
"skia_safe":{"doc":"","t":[12,13,13,13,18,13,13,13,13,4,4,13,6,6,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,6,4,4,6,4,3,13,13,3,13,13,13,18,3,13,13,4,13,6,4,13,3,13,6,3,13,4,3,13,6,6,6,6,3,3,4,8,13,8,6,6,13,4,13,3,3,13,18,18,13,13,18,13,6,6,3,13,18,18,6,6,13,13,13,13,3,6,13,13,13,13,13,17,4,4,13,13,13,13,4,3,8,6,3,4,3,6,3,6,3,13,13,13,18,18,18,18,18,6,13,13,18,18,13,3,3,13,3,13,13,13,13,3,3,13,13,3,3,13,6,6,6,6,13,13,13,13,13,13,13,13,13,13,13,13,3,13,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,13,13,13,13,3,18,18,18,18,18,18,18,17,6,3,18,4,13,13,13,13,13,18,18,18,8,13,13,18,13,13,13,13,18,18,13,6,13,13,13,3,13,6,13,6,4,4,4,6,6,4,6,4,6,4,3,4,6,6,8,4,6,6,13,3,3,13,13,8,13,13,13,13,13,3,18,18,18,3,18,13,13,13,18,13,13,13,13,13,13,13,3,3,18,13,18,13,13,3,3,6,13,13,13,13,13,13,13,8,6,13,13,13,6,3,13,8,8,13,3,6,6,3,13,13,13,13,13,13,13,13,13,13,13,6,13,6,6,3,3,18,6,6,6,3,4,4,13,13,6,18,13,13,13,6,13,13,13,13,13,13,13,3,3,3,6,6,6,13,13,18,13,13,3,13,13,18,18,6,6,6,4,18,18,18,13,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,0,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,0,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,0,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,0,0,11,11,12,0,11,11,0,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,10,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,0,11,0,11,0,0,11,0,0,0,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,12,11,11,11,12,0,11,6,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,5,5,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,12,11,11,11,11,11,11,14,11,11,11,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,0,11,11,11,11,0,0,12,12,12,5,5,5,5,4,3,3,18,13,4,18,3,13,3,18,4,13,13,13,13,3,3,8,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,3,4,13,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,13,13,13,6,13,18,4,13,13,13,13,13,13,13,18,13,13,13,3,13,13,4,13,13,4,4,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,0,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,11,11,11,11,11,11,11,11,11,11,5,17,17,17,17,17,17,17,17,17,17,17,17,6,6,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,11,0,11,11,6,11,5,5,13,13,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,18,3,3,18,18,18,18,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,12,12,12,12,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,3,18,13,18,18,18,18,13,18,18,18,4,18,18,18,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,6,6,6,6,6,13,6,13,13,6,3,3,3,18,13,4,4,13,13,13,13,13,13,13,18,4,6,4,3,3,4,4,13,13,6,6,13,13,13,13,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,0,11,11,11,11,11,11,11,11,11,13,13,3,13,4,13,4,13,13,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,6,11,11,11,6,11,11,11,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,5,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,13,13,18,3,13,13,13,13,13,6,6,18,4,3,13,13,6,13,13,13,18,18,18,18,13,18,18,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,18,13,13,4,3,18,3,6,13,18,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,18,13,18,13,18,13,13,13,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,6,6,13,13,13,18,18,13,4,6,13,13,13,13,13,13,18,13,18,13,18,13,18,13,13,13,18,6,13,6,6,3,13,13,13,13,13,13,13,13,13,13,13,13,18,3,3,13,18,3,4,6,4,6,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,8,4,6,6,13,18,13,18,6,3,4,4,6,6,13,18,18,18,18,18,18,13,13,18,13,13,13,13,13,13,13,13,13,18,13,18,17,18,3,13,3,13,13,13,13,13,13,13,13,13,13,6,3,3,17,6,13,18,13,18,13,18,13,18,13,18,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,3,6,13,18,13,13,13,13,18,13,18,4,4,4,3,13,13,13,13,3,13,13,18,13,18,13,18,13,18,3,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,3,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,4,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,12,0,11,11,11,12,11,11,5,11,11,11,11,11,11,11,13,13,4,13,5,13,13,13,4,18,4,4,3,13,18,13,13,6,18,13,13,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,18,13,13,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,5,5,5,5,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,5,5,5,5,11,11,11,5,5,5,5,5,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,4,4,13,13,13,17,18,3,4,13,18,13,13,13,18,4,13,13,13,13,13,13,13,13,13,18,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,17,17,17,17,5,13,13,4,13,4,13,6,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,4,13,18,18,13,13,13,13,4,13,13,13,4,13,13,3,18,13,13,18,13,6,18,13,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,13,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,18,18,18,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,4,3,4,13,13,13,13,6,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,5,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,11,11,11,11,11,3,8,13,13,8,3,18,6,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,18,13,13,13,13,3,13,18,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,6,4,4,13,13,3,6,13,13,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,18,3,13,13,13,13,13,13,13,13,13,13,13,18,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,13,13,4,13,13,13,6,3,12,11,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,13,13,13,13,3,4,4,18,13,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,8,8,6,3,6,6,8,16,8,6,6,3,10,11,10,11,10,10,11,11,11,11,11,11,10,10,10,10,11,11,11,11,12,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,10,11,11,11,11,12,12,11,11,11,11,11,11,11,12,5,3,8,3,12,10,12,11,11,11,11,12,10,10,10,11,11,12,11,11,12,12,11,11,11,12,12,12,10,10,11,11,11,11,11,11,12,5,5,13,13,13,13,4,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,18,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,17,13,4,13,13,13,13,13,13,3,6,6,13,13,13,3,13,13,13,13,13,13,13,13,4,17,17,17,17,17,13,13,6,3,6,13,13,13,13,13,13,13,18,13,13,13,3,6,13,13,13,18,13,18,6,6,6,6,3,4,3,3,13,8,13,4,4,13,13,13,13,13,13,6,3,4,4,4,3,6,3,4,4,4,4,6,6,3,6,13,13,13,13,6,6,18,13,13,13,11,11,11,11,11,11,12,11,12,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,12,12,12,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,10,12,12,11,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,13,13,6,6,13,3,6,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,13,6,3,13,13,13,4,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,12,12,0,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,12,12,12,12,12,12,13,4,13,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,3,6,6,6,3,18,18,18,18,13,13,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,18,4,13,13,13,13,13,13,4,4,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,5,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,18,18,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,18,4,13,18,18,13,13,13,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,5,11,11,5,11],"n":["0","A","A16Float","A16UNorm","ALPHA","ARGB4444","ASTC","AVIF","Alpha8","AlphaType","AutoCanvasRestore","B","BBHFactory","BBoxHierarchy","BGR101010x","BGRA1010102","BGRA8888","BGRH","BGRV","BLACK","BLUE","BLUE","BMP","BT2020","BT2020_10bit_Full","BT2020_10bit_Limited","BT2020_12bit_Full","BT2020_12bit_Limited","BT2020_8bit_Full","BT2020_8bit_Limited","Bevel","Bitmap","BlendMode","BlendModeCoeff","Blender","BlurStyle","Borrows","BottomLeft","BottomRight","Budgeted","Butt","CCW","CW","CYAN","Canvas","Clamp","Clear","ClipOp","Close","Codec","CodecResult","CoeffCount","Color","Color","Color3f","Color4f","ColorBurn","ColorChannel","ColorChannelFlag","ColorDodge","ColorFilter","ColorInfo","ColorMatrix","ColorSpace","ColorSpacePrimaries","ColorSpaceTransferFn","ColorType","ConditionallySend","Conic","Contains","ContourMeasure","ContourMeasureIter","CouldNotRewind","CoverageMode","Cubic","CubicMap","CubicResampler","DA","DARK_GRAY","DATA_TYPE_CNT","DC","DNG","DYNAMIC_MSAA","Darken","Data","DataTable","DateTime","Decal","Default","Default","DeferredDisplayList","DeferredDisplayListRecorder","Difference","Difference","Difference","Difference","Document","Drawable","Dst","DstATop","DstIn","DstOut","DstOver","EMPTY_IRECT","EncodedImageFormat","EncodedOrigin","ErrorInInput","EvenOdd","Exclusion","Fill","FilterMode","FilterOptions","Flattenable","Font","FontArguments","FontHinting","FontMetrics","FontMgr","FontStyle","FontStyleSet","FourByteTag","Full","G","GIF","GRAY","GRAY","GRAY_ALPHA","GREEN","GREEN","GlyphId","GlyphId","Gray8","HALF","HALF","HEIF","HSV","Handle","HardLight","HighContrastConfig","Hue","ICO","IDA","IDC","IPoint","IRect","ISA","ISC","ISize","IVector","Identity","Image","ImageFilter","ImageGenerator","ImageInfo","IncompleteInput","Inner","InternalError","Intersect","Intersect","Intersect","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","InverseEvenOdd","InverseWinding","Iter","JPEG","JPEG","JPEG_Full","KTX","LIGHT_GRAY","Last","Last","Last","Last","Last","LastCoeffMode","LastEnum","LastEnum","LastEnum","LastEnum","LastMode","LastSeparableMode","LastTileMode","LeftBottom","LeftTop","Lighten","Line","Linear","Linear","Luminosity","M44","MAGENTA","MAX_CUSTOM_ATTRIBUTES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_POINTS","MILESTONE","MaskFilter","Matrix","Max_EnumValue","MipmapMode","Mirror","Miter","Modulate","Move","Multiply","NEARLY_ZERO","NEARLY_ZERO","NO","NativeFlattenable","Nearest","Nearest","No","None","None","Normal","Normal","ONE","ONE","One","OpBuilder","Opaque","Outer","Overlay","OwnedCanvas","PKM","PMColor","PNG","Paint","PaintCap","PaintJoin","PaintStyle","Path","PathBuilder","PathDirection","PathEffect","PathFillType","PathMeasure","PathOp","PathSegmentMask","PathVerb","Picture","PictureRecorder","Pixel","PixelGeometry","PixelRef","Pixmap","Plus","Point","Point3","Premul","Quad","QuickReject","R","R16G16B16A16UNorm","R16G16Float","R16G16UNorm","R8G8UNorm","RCHandle","RED","RED","RG","RGB","RGB","RGB101010x","RGB565","RGB888x","RGBA","RGBA1010102","RGBA8888","RGBAF16","RGBAF16Norm","RGBAF32","RGBH","RGBV","RRect","RSXform","Rec601","Rec601_Limited","Rec709","Rec709_Full","Rec709_Limited","Rect","RefHandle","Region","Repeat","ReverseDifference","ReverseDifference","RightBottom","RightTop","Round","Round","RoundOut","RuntimeEffect","SA","SC","SRGBA8888","SamplingMode","SamplingOptions","Saturation","Scalar","Scalars","Screen","Sendable","Shader","Shaper","Size","Slight","SoftLight","Solid","Square","Src","SrcATop","SrcIn","SrcOut","SrcOver","Stroke","StrokeAndFill","StrokeRec","Success","Surface","SurfaceCharacterization","SurfaceProps","SurfacePropsFlags","TRANSPARENT","TextBlob","TextBlobBuilder","TextBlobIter","TextBlobRun","TextEncoding","TileMode","TopLeft","TopRight","Typeface","USE_DEVICE_INDEPENDENT_FONTS","UTF16","UTF32","UTF8","Unichar","Unimplemented","Union","Union","Unknown","Unknown","Unknown","Unpremul","V2","V3","V4","Vector","Vector3","Vertices","WBMP","WEBP","WHITE","Winding","XOR","XYZD50Hash","Xor","Xor","YELLOW","YES","YUVAInfo","YUVAPixmapInfo","YUVAPixmaps","YUVColorSpace","Yes","ZERO","ZERO","Zero","a","a","a","a","abandon","abandon","abandoned","add","add","add","add","add","add","add","add","add","add","add","add_arc","add_arc","add_arc","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_circle","add_circle","add_circle","add_font_feature","add_oval","add_oval","add_oval","add_path","add_path","add_path","add_path_matrix","add_placeholder","add_poly","add_polygon","add_polygon","add_rect","add_rect","add_rect","add_round_rect","add_rrect","add_rrect","add_rrect","add_shadow","add_text","addr","addr","addr_at","addr_at","adjust","alias","all","all","all","alloc_n32_pixels","alloc_n32_pixels","alloc_pixels","alloc_pixels","alloc_pixels_flags","alloc_pixels_flags","alloc_pixels_info","alloc_pixels_info","alloc_run","alloc_run","alloc_run_pos","alloc_run_pos","alloc_run_pos_h","alloc_run_pos_h","alloc_run_rsxform","alloc_run_rsxform","alloc_run_text","alloc_run_text","alloc_run_text_pos","alloc_run_text_pos","alloc_run_text_pos_h","alloc_run_text_pos_h","alloc_run_text_rsxform","alloc_run_text_rsxform","allocate","alpha","alpha_f","alpha_threshold","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alphabetic_baseline","annotate","append","append_float","append_float_array","append_int","append_string","append_string_array","append_typeface","apply_bones","apply_to_canvas","apply_to_paint","apply_to_path","apply_to_path_inplace","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_filtered_bounds","approximate_filtered_bounds","approximate_op_count","approximate_op_count","approximate_op_count_nested","approximate_op_count_nested","approximate_size","arc_to","arc_to","arc_to","arc_to_radius","arc_to_radius","arc_to_rotated","arc_to_tangent","arc_to_tangent","arc_to_tangent","are_finite","area","arithmetic","arithmetic","arithmetic","as_a_dash","as_array","as_array","as_array","as_array","as_array_mut","as_blend_mode","as_bytes","as_bytes","as_coeff","as_direct_context","as_dxgi_format","as_gl_format","as_image","as_image","as_image_filter","as_image_filter","as_image_filter","as_mut_array","as_mut_array","as_mut_array","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_scalars","as_slice","as_str","as_vk_format","as_winding","as_winding","ascent","at","at","at_end","at_size","at_size","at_str","at_str","at_t","at_t","avg_char_width","b","b","b","b","b","b","backend","backend","backend","backend","backend","backend_format","backend_format","backend_format","backend_format","backend_texture","background","begin_recording","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blend_mode","blend_mode_or","blender","blenders","blur","blur","blur","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom","bottom","bottom","bottom","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","build","bytes","bytes","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","c","c","c","cache_max_resource_bytes","cache_max_resource_bytes","can_compute_fast_bounds","can_send","can_send","canvas","canvas","canvas","canvas","cap","cap_height","center","center_x","center_y","channel_mask","characterize","check_async_work_completion","children","circle","clear_caches","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_arguments","clone_with_pixel_geometry","close","close","close","cmp","cmp","codec","col","col_major","color","color","color4f","color_filter","color_filter","color_filter","color_filter_node","color_filters","color_info","color_info","color_matrix","color_matrix_filter","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type_supported_as_image","color_type_supported_as_surface","colors","colors","colors","cols","combine","combine","combine","combine","combine","complement","complement","compose","compose","compose","compose","composed","compressed_backend_format","compressed_backend_format","compute_bounds","compute_bounds","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_fast_bounds","compute_from_t","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_min_byte_size","compute_min_byte_size","compute_offset","compute_offset","compute_region_complexity","compute_tight_bounds","compute_total_bytes","compute_total_bytes","compute_y_from_x","concat","conic_to","conic_to","conic_to","conservatively_contains_rect","consume","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains_no_empty_check","contains_point","contains_rect","contains_region","contour_measure","contrast","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","copy_range","copy_range","copy_table_data","corner_path","corner_path_effect","count","count","count","count","count","count","count_families","count_families","count_glyphs","count_inputs","count_points","count_str","count_tables","count_text","count_verbs","cross","cross","cross","cross","cross_product","cross_product","cubic","cubic_to","cubic_to","cubic_to","cull_rect","cull_rect","current_font","current_language","current_level","current_script","d","d","d3d_texture_resource_info","d3d_texture_resource_info","dash","dash_path_effect","data_type","data_type","day","day_of_week","decode","decode_to_raster","decoration","decoration_mut","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_backend_format","default_fallback","default_fallback_char","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","descent","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detach","detach","detach","detach","detach","detach","detach_as_data","detach_as_stream","did_exceed_max_lines","difference","difference","dilate","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","disable_font_fallback","discrete","discrete_path_effect","displacement_map_effect","distance","distance_to_origin","distant_lit_diffuse_lighting","distant_lit_specular_lighting","div","div","div","div_assign","div_assign","div_assign","document","dot","dot","dot","dot","dot_product","dot_product","dot_with_normal","draw","draw","draw","draw_at","draw_display_list","draw_display_list_with_offset","draw_options","drawable","draws_nothing","draws_nothing","drop","drop","drop","dump","dump","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","dump_hex","e","edging","effective_align","ellipsis","ellipsized","empty","empty","empty","enable_data_type","enable_font_fallback","encode","encode","encode","encode","encode","encode","encode_to_data","encode_to_data_with_quality","encoded_data","encoded_data","encoded_data","encoded_format","end_of_current_run","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equals","equals","equals","equals","equals","equals_by_fonts","erase","erase","erase","erase","erase_4f","erase_4f","erase_argb","erase_argb","erase_color","erase_color","erase_with_colorspace","erase_with_colorspace","erode","extend","extend","extensions","extensions_mut","extract_alpha","extract_alpha","extract_subset","extract_subset","extract_subset","extract_subset","f","fallback_manager","family_name","family_name","family_name","family_name","family_names","family_names","fill_type","fill_type","fill_type","filter","filter_bounds","filter_color","filter_color4f","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","find_child","find_input","find_typefaces","find_uniform","finish_recording_as_drawable","finish_recording_as_picture","fits_in_bytes","flags","flags","flush","flush","flush","flush_and_submit","flush_and_submit","flush_and_submit","flush_submit_and_sync_cpu","flush_submit_and_sync_cpu","flush_with_access_info","flush_with_info","flush_with_info","flush_with_mutable_state","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","font_arguments","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_parameters","font_size","font_size","font_style","font_style","font_style","font_style","force_strut_height","foreground","fractal_perlin_noise","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adopted_texture","from_argb","from_argb","from_backend_render_target","from_backend_texture","from_bitmap","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bounds","from_bytes","from_bytes","from_bytes","from_chars","from_color_info","from_color_info","from_compressed","from_context","from_data","from_data","from_data","from_data","from_data","from_data_type","from_encoded","from_encoded","from_encoded","from_external_memory","from_external_pixmaps","from_generator","from_irect","from_isize","from_isize","from_iter","from_iter","from_iwh","from_ltrb","from_name","from_nv12_textures_copy","from_paint","from_paint","from_path","from_path","from_picture","from_picture","from_picture","from_picture","from_pixmap_cross_context","from_point_and_size","from_pos_text","from_pos_text","from_pos_text_h","from_pos_text_h","from_pt_size","from_radians","from_raster_data","from_rect","from_rgb","from_rsxform","from_rsxform","from_shader","from_shader","from_size","from_size","from_slice","from_slice","from_slices","from_slices","from_str","from_str","from_str","from_str","from_svg","from_table","from_text","from_text","from_texture","from_typeface","from_typeface_with_params","from_vk","from_wh","from_wh","from_xywh","from_xywh","from_yuva_pixmaps","from_yuva_textures","g","g","g","g","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","get_addr","get_addr","get_alpha_f","get_alpha_f","get_alpha_f","get_alpha_f","get_backend_render_target","get_backend_texture","get_boundary_path","get_bounds","get_col_major","get_color","get_color","get_color","get_color","get_fill_path","get_fill_path_with_matrix","get_frame_count","get_glyph_position_at_coordinate","get_image","get_input","get_intercepts","get_intercepts","get_intercepts","get_kerning_pair_adjustments","get_line_metrics","get_matrix","get_path","get_pixels","get_pixels","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_point","get_points","get_pos","get_rects_for_placeholders","get_rects_for_range","get_repetition_count","get_row_major","get_row_major","get_scaled_dimensions","get_scanlines","get_subset","get_subset","get_table_data","get_table_size","get_verbs","get_vk_drawable_info","get_widths","get_widths_bounds","get_word_boundary","get_x_pos","get_yuva_planes","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","glyph_indices","gpu","gradient_shader","graphics","grayscale","h","half_leading","half_leading","has","has_alpha","has_bones","has_colors","has_equal_effect","has_extension","has_indices","has_mip_maps","has_mipmaps","has_mipmaps","has_tex_coords","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height_64","height_override","height_override","high_contrast","high_contrast_config","high_contrast_filter","hinting","hinting_is_on","hour","icu","id","ideographic_baseline","image","image","image_filter","image_filter","image_filters","image_info","image_info","image_info","image_info","image_snapshot","image_snapshot_with_bounds","inc_reserve","inc_reserve","inc_reserve","incremental_decode","index","index","index","index","index","index_count","index_mut","indices","indices","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","info","info","info","info","info","info","info","init_pixmaps_from_single_allocation","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","input","input_size","inputs","inputs","insert","insert","inset","inset","install_pixels","install_pixels","interpolate","intersect","intersect","intersect2","intersect_no_empty_check_","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects2","intersects_rect","intersects_region","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_image_filter","into_image_filter","into_iter","into_iter","into_iter","into_iter","invert","invert_style","is_a_image","is_all","is_all","is_alpha_only","is_alpha_unchanged","is_always_opaque","is_anti_alias","is_array","is_baseline_snap","is_bgr","is_bold","is_closed","is_closed","is_compatible","is_compatible","is_complex","is_convex","is_cubic_degenerate","is_dither","is_embedded_bitmaps","is_embolden","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty_64","is_even_odd","is_fill_style","is_finite","is_finite","is_finite","is_finite","is_finite","is_fixed_pitch","is_force_auto_hinting","is_framebuffer_only","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_h","is_hairline_style","is_immutable","is_immutable","is_immutable","is_immutable","is_initialized","is_interpolatable","is_inverse","is_inverse_fill_type","is_italic","is_last_contour_closed","is_lazy_generated","is_line","is_line_degenerate","is_linear","is_linear_metrics","is_mip_mapped","is_mip_mapped","is_null","is_null","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_oval","is_placeholder","is_protected","is_protected","is_protected","is_protected","is_quad_degenerate","is_ready_to_draw","is_ready_to_draw","is_rect","is_rect","is_rgb","is_rrect","is_same_texture","is_sorted","is_src_over","is_srgb","is_srgb","is_subpixel","is_supported","is_texture_backed","is_textureable","is_textureable","is_use_device_independent_fonts","is_v","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_volatile","is_volatile","is_volatile","is_zero","is_zero","is_zero","is_zero","iset","iter","iter","join","join","join","join2","join_non_empty_arg","join_possibly_empty_rect","last_pt","layout","leading","leading","left","left","left","left","len","length","length","length","length","length","length","length_squared","length_squared","length_xy","length_xyz","letter_spacing","line","line_2d","line_2d_path_effect","line_number","line_to","line_to","line_to","linear_gradient","locale","longest_line","look_at","luma","luma_color_filter","magnifier","make","make","make","make","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_image","make_scale","make_shader","make_transform","map","mark_dirty","mask_filter","match_face_style","match_face_style","match_family","match_family","match_family_style","match_family_style","match_family_style_character","match_family_style_character","match_one_attribute","match_style","match_style","matches_color_type","matches_color_type","matches_color_type","matrix","matrix","matrix","matrix","matrix_convolution","matrix_path_effect","matrix_translate","max_char_width","max_intrinsic_width","max_lines","max_render_target_size","max_surface_sample_count_for_color_type","max_texture_size","max_width","measure_str","measure_text","merge","merge","merge_path_effect","metrics","min_intrinsic_width","min_row_bytes","min_row_bytes","minute","mipmap","mipmap","mipmapped","mipmapped","miter","mode","mode","mode","month","move_to","move_to","move_to","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","n32","name","name","name","name","named_transfer_fn","nan","native_deserialize","native_flattenable","native_transmutable","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","nearly_equal","nearly_equal","nearly_zero","nearly_zero","need_to_apply","needs_ctm","neg","neg","neg","neg","neg","neg","negate","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_a8","new_a8","new_bidi_run_iterator","new_bytes","new_bytes","new_color_space","new_color_space_with_context","new_copy","new_copy","new_copy","new_core_text","new_cross_context_from_pixmap","new_cstr","new_cstr","new_d3d","new_d3d","new_d3d","new_dxgi","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_family_name_iterator","new_fill","new_font_mgr_run_iterator","new_from","new_from_data","new_from_data","new_gl","new_gl","new_gl","new_gl","new_hairline","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_identity","new_lighting","new_load_with","new_n32","new_n32","new_n32_premul","new_n32_premul","new_native","new_non_texture_image","new_null","new_path","new_path","new_placeholder","new_placeholder","new_primitive","new_raster","new_raster_direct","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_raster_n32_premul","new_render_target","new_render_target_with_characterization","new_s32","new_s32","new_script_run_iterator","new_shape_dont_wrap_or_reorder","new_shape_then_wrap","new_shaper_driven_wrapper","new_srgb","new_srgb","new_srgb_linear","new_srgb_linear","new_std_language_run_iterator","new_str","new_str","new_style_set","new_style_set","new_styleset","new_styleset","new_subset","new_subset","new_subset","new_subset_with_context","new_surface","new_surface_with_dimensions","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","new_typeface","new_typeface","new_uninitialized","new_uninitialized","new_unknown","new_unknown","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_ycbcr","new_with_filter","next","next","next","next","next_contour","next_scanline","normalize","normalize","normalize","normalize","normalize_perspective","normalize_vector","normalized","not","not","nothing_to_draw","notify_added_to_cache","notify_added_to_cache","notify_content_will_change","notify_drawing_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","num_channels_in_plane","num_planes","num_planes","num_planes","num_planes","num_planes","offset","offset","offset","offset","offset","offset","offset","offset","offset_points","offset_to","offset_to","oomed","op","op","op_rect","op_rect_region","op_region","op_region_rect","origin","origin","origin","origin","origin_matrix","outbound_scanline","outset","outset","oval","oval_with_start_index","overdraw","overdraw_color_filter","paint","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","partial_cmp","path","path_1d","path_1d_path_effect","path_2d","path_2d_path_effect","path_effect","path_effect","path_measure","path_types","pdf","peek_pixels","peek_pixels","peek_pixels","peek_pixels","peek_style","perform_deferred_cleanup","perlin_noise_shader","perspective","picture_recorder","pixel_geometry","pixel_ref","pixel_ref","pixel_ref_origin","pixel_ref_origin","pixels","pixels","pixels","pixels","pixels","pixels","pixmap","pixmap","pixmaps_info","plane","plane_config","plane_dimensions","plane_format","plane_formats","plane_info","plane_infos","plane_subsampling_factors","planes","playback","playback","point_lit_diffuse_lighting","point_lit_specular_lighting","points","polygon","polyline_to","polyline_to","pop","pos_tan","pos_tan","positions","positions","post_concat","post_concat","post_script_name","post_translate","post_translate","pre_concat","pre_concat","pre_concat_16","pre_multiply_argb","pre_multiply_color","pre_scale","pre_scale_xyz","pre_translate","precompile_shader","print_statistics","private","props","purge_caches","purge_harf_buzz_cache","purge_unlocked_resources","push_style","quad_to","quad_to","quad_to","query_yuva_info","quick_contains","quick_reject","quick_reject","quick_reject","quick_reject_rect","quick_reject_region","r","r","r","r_arc_to_rotated","r_conic_to","r_conic_to","r_conic_to","r_cubic_to","r_cubic_to","r_cubic_to","r_line_to","r_line_to","r_line_to","r_move_to","r_quad_to","r_quad_to","r_quad_to","radial_gradient","radians_to_degrees","rc","read_from_memory","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","recommended_rgba_color_type","recording_canvas","recording_context","rect","rect_stays_rect","rect_to_rect","region","register_typeface","reinterpret_color_space","release","release_resources_and_abandon","remove","remove","remove","replace_backend_texture","replace_backend_texture_with_mode","res_scale","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset_font_features","reset_gl_texture_bindings","reset_shadows","resized","resized","resolve","resolve","resource_cache_limit","resource_cache_limits","resource_cache_purgeable_bytes","resource_cache_usage","restore","reverse_add_path","rewind","right","right","right","right","rotate","rotate_x","rotate_y","rotate_z","round","round_in","round_out","round_out","round_out","row","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_iter","row_major","rows","rrect","rrect","rrect_with_start_index","runtime_effect","s","sample_count","sample_count","sample_count","sampling","sampling_options","save","scalar","scale","scale","scale","scale_pixels","scale_pixels","scale_pixels","scale_x","scaled","scaled","scanline_order","scos","second","segment","segment","segment_masks","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set_44","set_abs","set_alpha","set_alpha_f","set_alpha_type","set_alpha_type","set_anti_alias","set_argb","set_asset_font_manager","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_background_color","set_baseline_snap","set_blend_mode","set_blender","set_bounds","set_bounds2","set_bounds_check","set_bounds_no_check","set_col","set_col_major","set_color","set_color","set_color4f","set_color_filter","set_color_space","set_color_space","set_concat","set_concat","set_concat_16","set_d3d_resource_state","set_d3d_resource_state","set_default_font_manager","set_default_font_manager_and_family_names","set_dither","set_draw_options","set_dynamic_font_manager","set_edging","set_ellipsis","set_embedded_bitmaps","set_embolden","set_empty","set_empty","set_empty","set_empty","set_empty","set_fill_style","set_fill_type","set_fill_type","set_fill_type","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_font_style","set_force_auto_hinting","set_force_strut_height","set_foreground_color","set_glyph","set_hairline_style","set_half_leading","set_half_leading","set_height","set_height","set_height","set_height_override","set_height_override","set_hinting","set_identity","set_identity","set_identity","set_image_filter","set_immutable","set_immutable","set_immutable","set_immutable","set_info","set_info","set_irect","set_is_volatile","set_is_volatile","set_is_volatile","set_iwh","set_last_pt","set_leading","set_length","set_length_xy","set_letter_spacing","set_linear_metrics","set_locale","set_ltrb","set_ltrb","set_mask_filter","set_max_lines","set_metrics","set_mutable_stat","set_normalize","set_paragraph_style","set_path","set_path","set_path_effect","set_pixel_ref","set_pixel_ref","set_placeholder","set_rc","set_rect","set_rects","set_region","set_res_scale","set_resource_cache_limit","set_resource_cache_limits","set_rotate","set_rotate_unit","set_rotate_unit_sin_cos","set_row","set_row_major","set_row_major","set_saturation","set_scale","set_scale","set_scale_x","set_shader","set_size","set_size","set_skew_x","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_params","set_stroke_style","set_stroke_width","set_strut_enabled","set_strut_style","set_style","set_subpixel","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_translate","set_typeface","set_typeface","set_vulkan_image_layout","set_vulkan_image_layout","set_wh","set_wh","set_word_spacing","set_xywh","set_xywh","shader","shader","shader_mask_filter","shaders","shadows","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","shaper","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shrink_to_fit","simplify","simplify","siting_xy","size","size","size","size","size","size_in_bytes","skew_x","skip_scanlines","snap_gpu_draw_handler","snapshot","snapshot","sort","sort","sorted","sorted","source","spacing","spot_lit_diffuse_lighting","spot_lit_specular_lighting","ssin","start_incremental_decode","start_scanline_decode","stencil_bits","store_vk_pipeline_cache_data","str_to_glyphs","str_to_glyphs","str_to_glyphs_vec","stroke","stroke_and_fill_path_effect","stroke_cap","stroke_join","stroke_miter","stroke_path_effect","stroke_rec","stroke_width","strut_enabled","strut_style","style","style","style","style","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","submit","subsampling","sum","supported","supports_distance_field_text","surface","surface_props","svg","swap","swap","swap","swap","swap_rb","swap_rb_inplace","sweep_gradient","symmetric_difference","symmetric_difference","table_color_filter","table_tags","tex_coords","tex_coords","text_align","text_baseline","text_direction","text_height_behavior","text_style","text_to_glyphs","text_to_glyphs","text_to_glyphs_vec","textlayout","texture","texture_origin","texture_origin","texture_size","textures","textures_are_cacheable","textures_are_cacheable","tight_bounds","tight_bounds","tile","time_zone_minutes","to_a_color_filter","to_a_color_matrix","to_a_color_mode","to_ceil","to_color","to_color","to_floor","to_font_data","to_hsv","to_hsv","to_m33","to_non_inverse","to_opaque","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","to_quad","to_quad","to_rgb","to_round","to_shader","to_shader","to_shader","to_shader","to_shader","to_string","to_svg","to_svg_with_encoding","to_texture_2d","to_tri_strip","to_xyzd50_hash","to_xyzd50_hash","toggle","toggle","toggle_inverse_fill_type","toggle_inverse_fill_type","toggle_inverse_fill_type","top","top","top","top","top","transform","transform_with_perspective_clip","translate","translate","translate","translated","transpose","trim","trim_path_effect","try_alloc_n32_pixels","try_alloc_n32_pixels","try_alloc_pixels","try_alloc_pixels","try_alloc_pixels_flags","try_alloc_pixels_flags","try_alloc_pixels_info","try_alloc_pixels_info","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbulence_perlin_noise","turn_hinting_off","turn_on","two_point_conical_gradient","tx","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","typeface","typeface","typeface","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyph","unichar_to_glyphs","unichars_to_glyphs","uniform_size","uniforms","union","union","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","units_per_em","unlimited_lines","unresolved_glyphs","unsafe_send_sync","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","update_bounds_cache","use_cubic","uses_glfbo0","uses_glfbo0","utils","v","valid_row_bytes","valid_row_bytes","valid_subset","validate","validate_alpha_type","value","variant_name","variation_design_parameters","variation_design_position","vertex_count","vertices","vk_rt_supports_input_attachment","vk_rt_supports_input_attachment","vulkan_image_info","vulkan_image_info","vulkan_secondary_cb_compatible","vulkan_secondary_cb_compatible","w","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width_64","with_a","with_adjustment","with_alpha_type","with_alpha_type","with_alpha_type","with_alpha_type","with_backend_format","with_backend_format","with_color_filter","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_spin","with_color_spin","with_color_type","with_color_type","with_color_type","with_color_type","with_default_mipmaps","with_dimensions","with_dimensions","with_dimensions","with_fbo0","with_fbo0","with_inset","with_inset","with_linear_gamma","with_linear_gamma","with_local_matrix","with_local_matrix","with_matrix","with_matrix","with_offset","with_offset","with_offset","with_offset_to","with_offset_to","with_outset","with_outset","with_size","with_srgb_gamma","with_srgb_gamma","with_subsampling","with_transform","with_transform_with_perspective_clip","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap_mut","wrap_ref","wrap_send","wrap_send","wrapper","writable_addr","writable_addr","writable_addr_at","writable_addr_at","write","write_pixels_from_bitmap","write_pixels_from_pixmap","write_to_memory","x","x","x","x","x","x","x","x","x","x_height","x_max","x_min","y","y","y","y","y","y","y","y","y","year","yuv_color_space","yuv_color_space","yuv_color_space","yuva_info","yuva_info","yuva_info","yuva_info","yuva_info","yuva_pixmap_info","yuva_pixmaps","z","z","z","link_to_destination","named_destination","rect_with_url","arithmetic","AutoCanvasRestore","AutoRestoredCanvas","Canvas","F16_COLOR_TYPE","Fast","GlyphPositions","INIT_WITH_PREVIOUS","Lattice","Lines","OwnedCanvas","PRESERVE_LCD_TEXT","PointMode","Points","Points","Polygon","RSXforms","SaveLayerFlags","SaveLayerRec","SetMatrix","SrcRectConstraint","Strict","TopLayerPixels","access_top_layer_pixels","all","annotate_link_to_destination","annotate_named_destination","annotate_rect_with_url","as_mut","as_mut","backdrop","base_layer_size","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","clear","clip_irect","clip_mask","clip_matrix","clip_path","clip_rect","clip_region","clip_rrect","clip_shader","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","colors","complement","concat","concat_44","contains","default","default","deref","deref","deref_mut","deref_mut","device_clip_bounds","difference","discard","draw_annotation","draw_arc","draw_circle","draw_color","draw_drawable","draw_drawable_at","draw_drrect","draw_glyphs_at","draw_glyphs_utf8","draw_image","draw_image_lattice","draw_image_nine","draw_image_rect","draw_image_rect_with_sampling_options","draw_image_with_sampling_options","draw_irect","draw_line","draw_oval","draw_paint","draw_patch","draw_path","draw_picture","draw_point","draw_points","draw_rect","draw_region","draw_round_rect","draw_rrect","draw_shadow","draw_str","draw_str_align","draw_text_blob","draw_vertices","drop","drop","empty","eq","eq","eq","extend","flags","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bitmap","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raster_direct","from_raster_direct_n32","guard","hash","hash","hash","image_info","info","inner","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_clip_empty","is_clip_rect","is_empty","lattice","local_clip_bounds","local_to_device","local_to_device_as_3x3","ne","new","new_null","new_surface","not","origin","paint","partial_cmp","peek_pixels","pixels","props","quick_reject","quick_reject","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","rect_types","remove","reset_matrix","restore","restore","restore_to_count","rotate","row_bytes","save","save_count","save_layer","save_layer_alpha","scale","set","set_matrix","set_matrix","set_matrix","skew","sub","sub_assign","surface","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","total_matrix","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","wrap","write_pixels","write_pixels_from_bitmap","x_divs","y_divs","0","0","Default","FixedColor","Lattice","RectType","Transparent","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone_into","colors","default","eq","fmt","fmt","from","from","hash","into","into","rect_types","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x_divs","y_divs","BottomLeft","BottomRight","BottomUp","Codec","CouldNotRewind","DEFAULT","EncodedOrigin","ErrorInInput","IncompleteInput","InternalError","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","LAST","LeftBottom","LeftTop","No","Options","PreferAnimation","PreferStillImage","Result","RightBottom","RightTop","ScanlineOrder","SelectionPolicy","Success","TopDown","TopLeft","TopRight","Unimplemented","Yes","ZeroInitialized","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","dimensions","encoded_format","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","frame_index","from","from","from","from","from","from_data","get_frame_count","get_image","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_repetition_count","get_scaled_dimensions","get_scanlines","get_yuva_planes","hash","hash","hash","hash","incremental_decode","info","inner","inner_mut","into","into","into","into","into","ne","next_scanline","origin","outbound_scanline","prior_frame","query_yuva_info","result_to_string","scanline_order","skip_scanlines","start_incremental_decode","start_scanline_decode","subset","swaps_width_height","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","valid_subset","wrap","zero_initialized","ColorFilter","color_filters","composed","filter_color","filter_color4f","from_argb","from_table","high_contrast","is_alpha_unchanged","luma","new_lighting","overdraw","to_a_color_matrix","to_a_color_mode","blend","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","blend","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","ColorMatrix","get_row_major","new","post_concat","post_translate","pre_concat","set_concat","set_identity","set_row_major","set_saturation","set_scale","new_lighting","BLACK","BLUE","CYAN","DARK_GREY","GREEN","GREY","LIGHT_GREY","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","ContourMeasure","ContourMeasureIter","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","get_matrix","hash","insert","intersection","intersects","into","is_all","is_closed","is_empty","length","ne","new","not","partial_cmp","pos_tan","remove","reset","segment","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","new","new","new","Document","abort","begin_page","borrow","borrow_mut","canvas","close","end_page","fmt","from","into","page","pages","state","try_from","try_into","type_id","OnPage","Open","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Drawable","GPUDrawHandler","bounds","draw","draw_at","generation_id","gpu_draw_handler","notify_drawing_changed","snap_gpu_draw_handler","GPUDrawHandler","draw","bitmap","pixmap","Alias","AntiAlias","Edging","Font","SubpixelAntiAlias","borrow","borrow_mut","clone","clone_into","count_str","count_text","edging","eq","fmt","from","from_typeface","from_typeface_with_params","get_bounds","get_intercepts","get_path","get_pos","get_widths","get_widths_bounds","get_x_pos","hash","hinting","into","is_baseline_snap","is_embedded_bitmaps","is_embolden","is_force_auto_hinting","is_linear_metrics","is_subpixel","measure_str","measure_text","metrics","new","scale_x","set_baseline_snap","set_edging","set_embedded_bitmaps","set_embolden","set_force_auto_hinting","set_hinting","set_linear_metrics","set_scale_x","set_size","set_skew_x","set_subpixel","set_typeface","size","skew_x","spacing","str_to_glyphs","str_to_glyphs_vec","text_to_glyphs","text_to_glyphs_vec","to_owned","try_from","try_into","type_id","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyphs","with_size","FontArguments","VariationPosition","borrow","borrow","borrow_mut","borrow_mut","collection_index","coordinates","default","drop","fmt","fmt","from","from","inner","inner_mut","into","into","new","set_collection_index","set_variation_design_position","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","variation_design_position","variation_position","wrap","Coordinate","axis","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","inner","inner_mut","into","ne","to_owned","try_from","try_into","type_id","unwrap","value","wrap","BOUNDS_INVALID","Flags","FontMetrics","STRIKEOUT_POSITION_IS_VALID","STRIKEOUT_THICKNESS_IS_VALID","UNDERLINE_POSITION_IS_VALID","UNDERLINE_THICKNESS_IS_VALID","all","ascent","avg_char_width","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","bottom","cap_height","clone","clone","clone_into","clone_into","cmp","complement","contains","default","default","descent","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bounds","hash","inner","inner_mut","insert","intersection","intersects","into","into","is_all","is_empty","leading","max_char_width","ne","ne","not","partial_cmp","remove","set","strikeout_position","strikeout_thickness","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","top","try_from","try_from","try_into","try_into","type_id","type_id","underline_position","underline_thickness","union","unwrap","wrap","x_height","x_max","x_min","VariationAxis","def","max","min","tag","variation","Axis","borrow","borrow_mut","clone","clone_into","def","default","eq","fmt","from","inner","inner_mut","into","is_hidden","max","min","ne","new","set_hidden","tag","to_owned","try_from","try_into","type_id","unwrap","wrap","BLACK","BOLD","CONDENSED","EXPANDED","EXTRA_BLACK","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","FontStyle","INVISIBLE","Italic","LIGHT","MEDIUM","NORMAL","NORMAL","Oblique","SEMI_BOLD","SEMI_CONDENSED","SEMI_EXPANDED","Slant","THIN","ULTRA_CONDENSED","ULTRA_EXPANDED","Upright","Weight","Width","bold","bold_italic","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","italic","ne","ne","new","normal","partial_cmp","partial_cmp","slant","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","weight","width","wrap","wrap","wrap","BackendAPI","BackendDrawableInfo","BackendFormat","BackendRenderTarget","BackendSurfaceMutableState","BackendTexture","BottomLeft","Context","Dawn","Direct3D","DirectContext","DirectContextId","DriverBugWorkarounds","FlushInfo","MAX_PLANES","Metal","MipMapped","Mipmapped","Mock","No","No","No","No","No","OpenGL","OpenGL_GrBackend","Protected","RecordingContext","Renderable","ResourceCacheLimits","ResourceCacheUsage","SemaphoresSubmitted","SurfaceOrigin","TopLeft","Vulkan","YUVABackendTextureInfo","YUVABackendTextures","Yes","Yes","Yes","Yes","Yes","abandon","abandoned","add_and_true_to_loop_condition","applyOverrides","as_direct_context","as_dxgi_format","as_gl_format","as_vk_format","backend","backend","backend","backend","backend","backend_format","backend_format","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_mask","check_async_work_completion","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_type_supported_as_image","color_type_supported_as_surface","compressed_backend_format","compressed_backend_format","context_options","d3d","d3d_texture_resource_info","d3d_texture_resource_info","default","default_backend_format","dimensions","dimensions","disable_blend_equation_advanced","disable_discard_framebuffer","disable_dual_source_blending_support","disable_texture_storage","disallow_large_instanced_draw","emulate_abs_int_function","eq","eq","eq","eq","eq","eq","eq","eq","eq","flush","flush_and_submit","flush_on_framebuffer_change","flush_submit_and_sync_cpu","flush_with_info","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_update_scissor_state_when_binding_fbo0","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from_vk","get_vk_drawable_info","gl","gl_clear_broken","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","has_mip_maps","has_mipmaps","hash","hash","hash","hash","hash","hash","height","height","id","inner","inner","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","is_framebuffer_only","is_protected","is_protected","is_same_texture","is_valid","is_valid","is_valid","is_valid","max_fragment_uniform_vectors_32","max_msaa_sample_count_4","max_render_target_size","max_resource_bytes","max_resources","max_surface_sample_count_for_color_type","max_texture_size","max_texture_size_limit_4096","mipmapped","mipmapped","ne","ne","ne","new","new","new","new","new","new1","new_d3d","new_d3d","new_d3d","new_dxgi","new_gl","new_gl","new_gl","new_gl","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_ycbcr","num_planes","num_planes","oomed","pack_parameters_workaround_with_pack_buffer","perform_deferred_cleanup","plane_format","plane_formats","precompile_shader","purge_unlocked_resources","release_resources_and_abandon","remove_pow_with_constant_exponent","reset","reset_gl_texture_bindings","resource_bytes","resource_cache_limit","resource_cache_limits","resource_cache_purgeable_bytes","resource_cache_usage","resource_count","rewrite_do_while_loops","sample_count","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_d3d_resource_state","set_d3d_resource_state","set_mutable_stat","set_resource_cache_limit","set_resource_cache_limits","set_vulkan_image_layout","set_vulkan_image_layout","stencil_bits","store_vk_pipeline_cache_data","submit","supports_distance_field_text","texture","texture_origin","texture_origin","textures","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_texture_2d","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbind_attachments_on_bound_render_fbo_delete","unfold_short_circuit_as_ternary_operation","unwrap","unwrap","vk","vulkan_image_info","vulkan_image_info","width","width","wrap","wrap","yuv_color_space","yuva_info","yuva_info","BackendBinary","BackendSource","ContextOptions","Default","Enable","No","ShaderCacheStrategy","SkSL","Yes","allow_multiple_glyph_cache_textures","allow_path_mask_caching","avoid_stencil_buffers","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_map_threshold","clone","clone","clone_into","clone_into","default","disable_coverage_counting_paths","disable_distance_field_paths","disable_driver_correctness_workarounds","disable_gpu_yuv_conversion","do_manual_mipmapping","driver_bug_workarounds","enable_experimental_hardware_tessellation","eq","eq","fmt","fmt","fmt","from","from","from","glyph_cache_texture_maximum_bytes","glyphs_as_paths_font_size","hash","hash","inner","inner_mut","internal_multisample_count","into","into","into","max_cached_vulkan_secondary_command_buffers","max_texture_size_override","min_distance_field_font_size","new","prefer_external_images_over_es3","reduce_ops_task_splitting","reduced_shader_variations","runtime_program_cache_size","shader_cache_strategy","sharpen_mipmapped_textures","skip_gl_error_checks","suppress_mipmap_support","suppress_prints","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","use_draw_instead_of_clear","wrap","Alloc","BackendContext","BeginEvent","CheckFeatureSupport","CopyDescriptors","CopyDescriptorsSimple","CopyTileMappings","CreateCommandAllocator","CreateCommandList","CreateCommandQueue","CreateCommandSignature","CreateCommittedResource","CreateComputePipelineState","CreateConstantBufferView","CreateDepthStencilView","CreateDescriptorHeap","CreateFence","CreateGraphicsPipelineState","CreateHeap","CreatePlacedResource","CreateQueryHeap","CreateRenderTargetView","CreateReservedResource","CreateRootSignature","CreateSampler","CreateShaderResourceView","CreateSharedHandle","CreateUnorderedAccessView","D3D12_RESOURCE_STATES","DXGI_FORMAT","EndEvent","Evict","ExecuteCommandLists","FenceInfo","GetAdapterLuid","GetClockCalibration","GetCopyableFootprints","GetCustomHeapProperties","GetDesc","GetDesc","GetDesc1","GetDescriptorHandleIncrementSize","GetDeviceRemovedReason","GetGPUVirtualAddress","GetHeapProperties","GetNodeCount","GetResourceAllocationInfo","GetResourceTiling","GetTimestampFrequency","ID3D12CommandQueue","ID3D12Device","ID3D12Resource","IDXGIAdapter1","MakeResident","Map","MemoryAllocator","OpenSharedHandle","OpenSharedHandleByName","ReadFromSubresource","ResourceStateEnum","SetMarker","SetStablePowerState","Signal","SurfaceInfo","TextureResourceInfo","Unmap","UpdateTileMappings","Wait","WriteToSubresource","adapter","alloc","as_raw","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cp","default","deref","deref","deref","deref","deref","device","drop","eq","eq","fence","fmt","fmt","fmt","fmt","fmt","format","format","from","from","from","from","from","from","from","from","from","from","from_raw","from_resource","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into","into_raw","level_count","level_count","lpVtbl","lpVtbl","lpVtbl","lpVtbl","memory_allocator","ne","protected","protected","protected_context","queue","resource","resource_state","safe_com_add_ref","safe_com_release","sample_count","sample_count","sample_quality_pattern","sample_quality_pattern","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","unwrap","up","uuidof","uuidof","uuidof","uuidof","value","with_state","wrap","wrap","wrap","wrap","ALPHA8","BGRA8","BLEND","BackendState","COMPRESSED_ETC1_RGB8","COMPRESSED_RGB8_BC1","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_BC1","DEPTH24_STENCIL8","Enum","Extensions","FIXED_FUNCTION","Format","FramebufferInfo","GL","GLES","Interface","LUMINANCE16F","LUMINANCE8","LUMINANCE8_ALPHA8","Last","LastColorFormat","MISC","MSAA_ENABLE","None","PIXEL_STORE","PROGRAM","R16","R16F","R8","RENDER_TARGET","RG16","RG16F","RG8","RGB10_A2","RGB565","RGB8","RGBA16","RGBA16F","RGBA4","RGBA8","SRGB8_ALPHA8","STENCIL","STENCIL_INDEX16","STENCIL_INDEX8","Standard","SurfaceInfo","TEXTURE_BINDING","TextureInfo","UInt","Unknown","VERTEX","VIEW","WebGL","add","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","contains","default","default","default","difference","empty","eq","eq","eq","eq","eq","eq","extend","extensions","extensions_mut","fboid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_fboid","from_iter","from_target_and_id","has","has_extension","hash","hash","hash","id","inner","inner","inner","inner_mut","inner_mut","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","is_all","is_empty","is_initialized","level_count","ne","ne","ne","new_load_with","new_native","not","partial_cmp","protected","remove","remove","reset","sample_count","set","sub","sub_assign","symmetric_difference","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","unwrap","unwrap","validate","wrap","wrap","wrap","A1R5G5B5_UNORM_PACK16","A2B10G10R10_SINT_PACK32","A2B10G10R10_SNORM_PACK32","A2B10G10R10_SSCALED_PACK32","A2B10G10R10_UINT_PACK32","A2B10G10R10_UNORM_PACK32","A2B10G10R10_USCALED_PACK32","A2R10G10B10_SINT_PACK32","A2R10G10B10_SNORM_PACK32","A2R10G10B10_SSCALED_PACK32","A2R10G10B10_UINT_PACK32","A2R10G10B10_UNORM_PACK32","A2R10G10B10_USCALED_PACK32","A4B4G4R4_UNORM_PACK16_EXT","A4R4G4B4_UNORM_PACK16_EXT","A8B8G8R8_SINT_PACK32","A8B8G8R8_SNORM_PACK32","A8B8G8R8_SRGB_PACK32","A8B8G8R8_SSCALED_PACK32","A8B8G8R8_UINT_PACK32","A8B8G8R8_UNORM_PACK32","A8B8G8R8_USCALED_PACK32","ASTC_10x10_SFLOAT_BLOCK_EXT","ASTC_10x10_SRGB_BLOCK","ASTC_10x10_UNORM_BLOCK","ASTC_10x5_SFLOAT_BLOCK_EXT","ASTC_10x5_SRGB_BLOCK","ASTC_10x5_UNORM_BLOCK","ASTC_10x6_SFLOAT_BLOCK_EXT","ASTC_10x6_SRGB_BLOCK","ASTC_10x6_UNORM_BLOCK","ASTC_10x8_SFLOAT_BLOCK_EXT","ASTC_10x8_SRGB_BLOCK","ASTC_10x8_UNORM_BLOCK","ASTC_12x10_SFLOAT_BLOCK_EXT","ASTC_12x10_SRGB_BLOCK","ASTC_12x10_UNORM_BLOCK","ASTC_12x12_SFLOAT_BLOCK_EXT","ASTC_12x12_SRGB_BLOCK","ASTC_12x12_UNORM_BLOCK","ASTC_4x4_SFLOAT_BLOCK_EXT","ASTC_4x4_SRGB_BLOCK","ASTC_4x4_UNORM_BLOCK","ASTC_5x4_SFLOAT_BLOCK_EXT","ASTC_5x4_SRGB_BLOCK","ASTC_5x4_UNORM_BLOCK","ASTC_5x5_SFLOAT_BLOCK_EXT","ASTC_5x5_SRGB_BLOCK","ASTC_5x5_UNORM_BLOCK","ASTC_6x5_SFLOAT_BLOCK_EXT","ASTC_6x5_SRGB_BLOCK","ASTC_6x5_UNORM_BLOCK","ASTC_6x6_SFLOAT_BLOCK_EXT","ASTC_6x6_SRGB_BLOCK","ASTC_6x6_UNORM_BLOCK","ASTC_8x5_SFLOAT_BLOCK_EXT","ASTC_8x5_SRGB_BLOCK","ASTC_8x5_UNORM_BLOCK","ASTC_8x6_SFLOAT_BLOCK_EXT","ASTC_8x6_SRGB_BLOCK","ASTC_8x6_UNORM_BLOCK","ASTC_8x8_SFLOAT_BLOCK_EXT","ASTC_8x8_SRGB_BLOCK","ASTC_8x8_UNORM_BLOCK","ATTACHMENT_OPTIMAL_KHR","Alloc","AllocFlag","B10G11R11_UFLOAT_PACK32","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR","B16G16R16G16_422_UNORM","B16G16R16G16_422_UNORM_KHR","B4G4R4A4_UNORM_PACK16","B5G5R5A1_UNORM_PACK16","B5G6R5_UNORM_PACK16","B8G8R8A8_SINT","B8G8R8A8_SNORM","B8G8R8A8_SRGB","B8G8R8A8_SSCALED","B8G8R8A8_UINT","B8G8R8A8_UNORM","B8G8R8A8_USCALED","B8G8R8G8_422_UNORM","B8G8R8G8_422_UNORM_KHR","B8G8R8_SINT","B8G8R8_SNORM","B8G8R8_SRGB","B8G8R8_SSCALED","B8G8R8_UINT","B8G8R8_UNORM","B8G8R8_USCALED","BC1_RGBA_SRGB_BLOCK","BC1_RGBA_UNORM_BLOCK","BC1_RGB_SRGB_BLOCK","BC1_RGB_UNORM_BLOCK","BC2_SRGB_BLOCK","BC2_UNORM_BLOCK","BC3_SRGB_BLOCK","BC3_UNORM_BLOCK","BC4_SNORM_BLOCK","BC4_UNORM_BLOCK","BC5_SNORM_BLOCK","BC5_UNORM_BLOCK","BC6H_SFLOAT_BLOCK","BC6H_UFLOAT_BLOCK","BC7_SRGB_BLOCK","BC7_UNORM_BLOCK","BackendContext","Bool32","Buffer","COLOR_ATTACHMENT_OPTIMAL","CONCURRENT","COSITED_EVEN","COSITED_EVEN_KHR","CUBIC_EXT","CUBIC_IMG","ChromaLocation","CommandBuffer","D16_UNORM","D16_UNORM_S8_UINT","D24_UNORM_S8_UINT","D32_SFLOAT","D32_SFLOAT_S8_UINT","DEPTH_ATTACHMENT_OPTIMAL","DEPTH_ATTACHMENT_OPTIMAL_KHR","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_OPTIMAL","DEPTH_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR","DEPTH_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_STENCIL_READ_ONLY_OPTIMAL","DRM_FORMAT_MODIFIER_EXT","DUAL_SRC_BLEND","Device","Device","DeviceMemory","DeviceSize","DrawableInfo","E5B9G9R9_UFLOAT_PACK32","EAC_R11G11_SNORM_BLOCK","EAC_R11G11_UNORM_BLOCK","EAC_R11_SNORM_BLOCK","EAC_R11_UNORM_BLOCK","ETC2_R8G8B8A1_SRGB_BLOCK","ETC2_R8G8B8A1_UNORM_BLOCK","ETC2_R8G8B8A8_SRGB_BLOCK","ETC2_R8G8B8A8_UNORM_BLOCK","ETC2_R8G8B8_SRGB_BLOCK","ETC2_R8G8B8_UNORM_BLOCK","EXCLUSIVE","EXT_DEBUG_REPORT","ExtensionFlags","Extent2D","FRAGMENT_DENSITY_MAP_OPTIMAL_EXT","FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR","FeatureFlags","Filter","Flags","Format","FormatFeatureFlags","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR","G16B16G16R16_422_UNORM","G16B16G16R16_422_UNORM_KHR","G16_B16R16_2PLANE_420_UNORM","G16_B16R16_2PLANE_420_UNORM_KHR","G16_B16R16_2PLANE_422_UNORM","G16_B16R16_2PLANE_422_UNORM_KHR","G16_B16R16_2PLANE_444_UNORM_EXT","G16_B16_R16_3PLANE_420_UNORM","G16_B16_R16_3PLANE_420_UNORM_KHR","G16_B16_R16_3PLANE_422_UNORM","G16_B16_R16_3PLANE_422_UNORM_KHR","G16_B16_R16_3PLANE_444_UNORM","G16_B16_R16_3PLANE_444_UNORM_KHR","G8B8G8R8_422_UNORM","G8B8G8R8_422_UNORM_KHR","G8_B8R8_2PLANE_420_UNORM","G8_B8R8_2PLANE_420_UNORM_KHR","G8_B8R8_2PLANE_422_UNORM","G8_B8R8_2PLANE_422_UNORM_KHR","G8_B8R8_2PLANE_444_UNORM_EXT","G8_B8_R8_3PLANE_420_UNORM","G8_B8_R8_3PLANE_420_UNORM_KHR","G8_B8_R8_3PLANE_422_UNORM","G8_B8_R8_3PLANE_422_UNORM_KHR","G8_B8_R8_3PLANE_444_UNORM","G8_B8_R8_3PLANE_444_UNORM_KHR","GENERAL","GEOMETRY_SHADER","GetProc","GetProcOf","GetProcResult","GraphicsBackendMemory","ITU_FULL","ITU_FULL_KHR","ITU_NARROW","ITU_NARROW_KHR","Image","ImageInfo","ImageLayout","ImageTiling","ImageUsageFlags","Instance","Instance","KHR_ANDROID_SURFACE","KHR_SURFACE","KHR_SWAPCHAIN","KHR_WIN32_SURFACE","KHR_XCB_SURFACE","LAZILY_ALLOCATED","LINEAR","LINEAR","MAPPABLE","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MIDPOINT","MIDPOINT_KHR","NEAREST","NONCOHERENT","NULL_HANDLE","NV_GLSL_SHADER","NullHandle","OPTIMAL","Offset2D","PREINITIALIZED","PRESENT_SRC_KHR","PVRTC1_2BPP_SRGB_BLOCK_IMG","PVRTC1_2BPP_UNORM_BLOCK_IMG","PVRTC1_4BPP_SRGB_BLOCK_IMG","PVRTC1_4BPP_UNORM_BLOCK_IMG","PVRTC2_2BPP_SRGB_BLOCK_IMG","PVRTC2_2BPP_UNORM_BLOCK_IMG","PVRTC2_4BPP_SRGB_BLOCK_IMG","PVRTC2_4BPP_UNORM_BLOCK_IMG","PhysicalDevice","PhysicalDeviceFeatures","PhysicalDeviceFeatures2","QUEUE_FAMILY_IGNORED","Queue","R10X6G10X6B10X6A10X6_UNORM_4PACK16","R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR","R10X6G10X6_UNORM_2PACK16","R10X6G10X6_UNORM_2PACK16_KHR","R10X6_UNORM_PACK16","R10X6_UNORM_PACK16_KHR","R12X4G12X4B12X4A12X4_UNORM_4PACK16","R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR","R12X4G12X4_UNORM_2PACK16","R12X4G12X4_UNORM_2PACK16_KHR","R12X4_UNORM_PACK16","R12X4_UNORM_PACK16_KHR","R16G16B16A16_SFLOAT","R16G16B16A16_SINT","R16G16B16A16_SNORM","R16G16B16A16_SSCALED","R16G16B16A16_UINT","R16G16B16A16_UNORM","R16G16B16A16_USCALED","R16G16B16_SFLOAT","R16G16B16_SINT","R16G16B16_SNORM","R16G16B16_SSCALED","R16G16B16_UINT","R16G16B16_UNORM","R16G16B16_USCALED","R16G16_SFLOAT","R16G16_SINT","R16G16_SNORM","R16G16_SSCALED","R16G16_UINT","R16G16_UNORM","R16G16_USCALED","R16_SFLOAT","R16_SINT","R16_SNORM","R16_SSCALED","R16_UINT","R16_UNORM","R16_USCALED","R32G32B32A32_SFLOAT","R32G32B32A32_SINT","R32G32B32A32_UINT","R32G32B32_SFLOAT","R32G32B32_SINT","R32G32B32_UINT","R32G32_SFLOAT","R32G32_SINT","R32G32_UINT","R32_SFLOAT","R32_SINT","R32_UINT","R4G4B4A4_UNORM_PACK16","R4G4_UNORM_PACK8","R5G5B5A1_UNORM_PACK16","R5G6B5_UNORM_PACK16","R64G64B64A64_SFLOAT","R64G64B64A64_SINT","R64G64B64A64_UINT","R64G64B64_SFLOAT","R64G64B64_SINT","R64G64B64_UINT","R64G64_SFLOAT","R64G64_SINT","R64G64_UINT","R64_SFLOAT","R64_SINT","R64_UINT","R8G8B8A8_SINT","R8G8B8A8_SNORM","R8G8B8A8_SRGB","R8G8B8A8_SSCALED","R8G8B8A8_UINT","R8G8B8A8_UNORM","R8G8B8A8_USCALED","R8G8B8_SINT","R8G8B8_SNORM","R8G8B8_SRGB","R8G8B8_SSCALED","R8G8B8_UINT","R8G8B8_UNORM","R8G8B8_USCALED","R8G8_SINT","R8G8_SNORM","R8G8_SRGB","R8G8_SSCALED","R8G8_UINT","R8G8_UNORM","R8G8_USCALED","R8_SINT","R8_SNORM","R8_SRGB","R8_SSCALED","R8_UINT","R8_UNORM","R8_USCALED","READ_ONLY_OPTIMAL_KHR","RGB_IDENTITY","RGB_IDENTITY_KHR","Rect2D","RenderPass","S8_UINT","SAMPLE_RATE_SHADING","SHADER_READ_ONLY_OPTIMAL","SHADING_RATE_OPTIMAL_NV","SHARED_PRESENT_KHR","STENCIL_ATTACHMENT_OPTIMAL","STENCIL_ATTACHMENT_OPTIMAL_KHR","STENCIL_READ_ONLY_OPTIMAL","STENCIL_READ_ONLY_OPTIMAL_KHR","SamplerYcbcrModelConversion","SamplerYcbcrRange","SharingMode","SurfaceInfo","TRANSFER_DST_OPTIMAL","TRANSFER_SRC_OPTIMAL","UNDEFINED","UNDEFINED","Version","X8_D24_UNORM_PACK32","YCBCR_2020","YCBCR_2020_KHR","YCBCR_601","YCBCR_601_KHR","YCBCR_709","YCBCR_709_KHR","YCBCR_IDENTITY","YCBCR_IDENTITY_KHR","YcbcrConversionInfo","_bindgen_opaque_blob","_bindgen_opaque_blob","all","all","all","alloc","backend_memory","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chroma_filter","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","color_attachment_index","compatible_render_pass","complement","complement","complement","contains","contains","contains","current_queue_family","default","default","default","default","default","deref","difference","difference","difference","draw_bounds","drop","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extent","external_format","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_explicit_reconstruction","format","format","format","format","format_features","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_device_memory","from_info","from_info_with_queue_index","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","image","image","image_tiling","image_usage_flags","image_usage_flags","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_valid","layout","level_count","level_count","major","memory","minor","name","ne","ne","ne","ne","ne","new","new","new","new","new_with_extensions","new_with_format","not","not","not","offset","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","patch","protected","protected","remove","remove","remove","sample_count","sample_count","secondary_command_buffer","set","set","set","set_max_api_version","set_protected_context","sharing_mode","sharing_mode","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","tiling","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","width","wrap","wrap","wrap","wrap","wrap","wrap","wrap","x","x_chroma_offset","y","y_chroma_offset","ycbcr_conversion_info","ycbcr_conversion_info","ycbcr_model","ycbcr_range","0","0","1","1","Colors","ColorsInSpace","Flags","GradientShaderColors","INTERPOLATE_COLORS_IN_PREMUL","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","is_empty","len","linear","ne","not","partial_cmp","radial","remove","set","sub","sub_assign","sweep","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","two_point_conical","type_id","type_id","union","0","0","1","allow_jit","font_cache_count_limit","font_cache_count_used","font_cache_limit","font_cache_used","init","purge_all_caches","purge_font_cache","purge_resource_cache","resource_cache_single_allocation_byte_limit","resource_cache_total_bytes_limit","resource_cache_total_bytes_used","set_flags","set_font_cache_count_limit","set_font_cache_limit","set_resource_cache_single_allocation_byte_limit","set_resource_cache_total_bytes_limit","InvertBrightness","InvertLightness","InvertStyle","Last","NoInvert","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id","HighContrastConfig","borrow","borrow_mut","clone","clone_into","contrast","default","eq","fmt","from","grayscale","high_contrast_config","inner","inner_mut","into","invert_style","is_valid","ne","new","new","to_owned","try_from","try_into","type_id","unwrap","wrap","InvertBrightness","InvertLightness","InvertStyle","NoInvert","init","Allow","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BitDepth","COUNT","CachingHint","CompressionType","CubicResampler","Disallow","ETC1","ETC2_RGB8_UNORM","F16","Image","Last","None","U8","alpha_type","b","backend_texture","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","c","catmull_rom","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color_space","color_type","decode_to_raster","dimensions","encode_to_data","encode_to_data_with_quality","encoded_data","eq","eq","eq","eq","flush","flush_and_submit","flush_with_info","fmt","fmt","fmt","fmt","from","from","from","from","from_adopted_texture","from_bitmap","from_compressed","from_encoded","from_generator","from_nv12_textures_copy","from_picture","from_pixmap_cross_context","from_raster_data","from_texture","from_yuva_pixmaps","from_yuva_textures","has_mipmaps","hash","hash","hash","height","image_info","inner","inner_mut","into","into","into","into","is_alpha_only","is_lazy_generated","is_opaque","is_texture_backed","is_valid","mitchell","ne","new_color_space","new_color_space_with_context","new_cross_context_from_pixmap","new_non_texture_image","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_subset","new_subset_with_context","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_with_filter","peek_pixels","read_pixels","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","reinterpret_color_space","scale_pixels","texture_size","to_owned","to_owned","to_owned","to_owned","to_shader","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_id","unwrap","width","with_default_mipmaps","wrap","Forward","ImageFilter","MapDirection","Reverse","alpha_threshold","arithmetic","blur","borrow","borrow_mut","can_compute_fast_bounds","clone","clone_into","color_filter","color_filter_node","compose","compute_fast_bounds","count_inputs","dilate","displacement_map_effect","distant_lit_diffuse_lighting","distant_lit_specular_lighting","eq","erode","filter_bounds","fmt","from","from_paint","from_picture","get_input","hash","input","inputs","into","magnifier","matrix_convolution","merge","offset","point_lit_diffuse_lighting","point_lit_specular_lighting","spot_lit_diffuse_lighting","spot_lit_specular_lighting","tile","to_a_color_filter","to_owned","try_from","try_into","type_id","with_local_matrix","ArithmeticFPInputs","CropRect","Dither","NO_CROP_RECT","No","Yes","alpha_threshold","arithmetic","blend","blur","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_filter","compose","default","dilate","displacement_map","distant_lit_diffuse","distant_lit_specular","drop_shadow","drop_shadow_only","enforce_pm_color","eq","eq","eq","erode","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","image","inner","inner_mut","into","into","into","k","magnifier","matrix_convolution","matrix_transform","merge","ne","ne","new","offset","paint","picture","point_lit_diffuse","point_lit_specular","rect","shader","shader_with_dither","spot_lit_diffuse","spot_lit_specular","tile","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","wrap","new","new","AFFINE","AffineMember","ApplyPerspectiveClip","Center","End","Fill","IDENTITY","IDENTITY","Matrix","Member","No","PERSPECTIVE","Persp0","Persp1","Persp2","SCALE","ScaleToFit","ScaleX","ScaleX","ScaleY","ScaleY","SkewX","SkewX","SkewY","SkewY","Start","TRANSLATE","TransX","TransX","TransY","TransY","TypeMask","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cheap_equal_to","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","concat","contains","decompose_scale","default","difference","dirty_matrix_type_cache","dump","empty","eq","eq","eq","eq","eq","eq","extend","fixed_step_in_x","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_affine","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_poly_to_poly","from_rect_to_rect","get_9","get_type","has_perspective","hash","hash","hash","i","index","index","index","index_mut","index_mut","index_mut","inner","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","invalid_matrix","invert","is_all","is_empty","is_finite","is_fixed_step_in_x","is_identity","is_scale_translate","is_similarity","is_translate","map_homogeneous_points","map_homogeneous_points_2d","map_origin","map_point","map_points","map_points_inplace","map_radius","map_rect","map_rect_scale_translate","map_rect_to_quad","map_rect_with_perspective_clip","map_vector","map_vectors","map_vectors_inplace","map_xy","max_scale","min_max_scales","min_scale","mul","ne","new_all","new_identity","new_scale","new_trans","normalize_perspective","not","partial_cmp","persp_x","persp_y","post_concat","post_idiv","post_rotate","post_scale","post_skew","post_translate","pre_concat","pre_rotate","pre_scale","pre_skew","pre_translate","preserves_axis_alignment","preserves_right_angles","rc","rect_stays_rect","rect_to_rect","remove","reset","rotate_deg","rotate_deg_pivot","rotate_rad","scale","scale_x","scale_y","set","set_9","set_affine","set_affine_identity","set_all","set_concat","set_identity","set_persp_x","set_persp_y","set_poly_to_poly","set_rect_to_rect","set_rotate","set_rsxform","set_scale","set_scale_translate","set_scale_x","set_scale_y","set_sin_cos","set_skew","set_skew_x","set_skew_y","set_translate","set_translate_x","set_translate_y","skew","skew_x","skew_y","sub","sub_assign","symmetric_difference","to_affine","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","translate","translate_x","translate_y","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","wrap","new","new_translate","new","DOT22","HLG","LINEAR","PQ","REC2020","SRGB","NUM_COLORS","new","Bevel","Butt","Cap","Fill","Join","Miter","Paint","Round","Round","Square","Stroke","StrokeAndFill","Style","alpha","alpha_f","as_blend_mode","as_image_filter","blend_mode","blend_mode_or","blender","color","color4f","color_filter","get_fill_path","get_fill_path_with_matrix","image_filter","is_anti_alias","is_dither","is_src_over","mask_filter","new","nothing_to_draw","path_effect","reset","set_alpha","set_alpha_f","set_anti_alias","set_argb","set_blend_mode","set_blender","set_color","set_color4f","set_color_filter","set_dither","set_image_filter","set_mask_filter","set_path_effect","set_shader","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_width","set_style","shader","stroke_cap","stroke_join","stroke_miter","stroke_width","style","AddPathMode","Append","ArcSize","CCW","CONIC","CUBIC","CW","Close","Conic","Cubic","Direction","Done","EvenOdd","Extend","FillType","InverseEvenOdd","InverseWinding","Iter","LINE","Large","Line","MAX_POINTS","Move","Path","QUAD","Quad","RawIter","SegmentMask","Small","Verb","Winding","add_arc","add_circle","add_oval","add_path","add_path_matrix","add_poly","add_rect","add_round_rect","add_rrect","all","approximate_bytes_used","arc_to","arc_to_rotated","arc_to_tangent","as_winding","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","circle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","cmp","complement","compute_tight_bounds","conic_to","conic_weight","conic_weight","conservatively_contains_rect","contains","contains","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","count_points","count_verbs","cubic_to","default","default","deserialize","difference","drop","drop","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","empty","eq","eq","eq","eq","extend","fill_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_str","from_svg","generation_id","get_point","get_points","get_verbs","hash","hash","hash","hash","inc_reserve","insert","interpolate","intersection","intersects","into","into","into","into","into","into","into_iter","into_iter","is_all","is_close_line","is_closed_contour","is_convex","is_cubic_degenerate","is_empty","is_empty","is_finite","is_interpolatable","is_inverse_fill_type","is_last_contour_closed","is_line","is_line_degenerate","is_oval","is_quad_degenerate","is_rect","is_rrect","is_valid","is_volatile","last_pt","line","line_to","make_scale","make_transform","move_to","ne","new","new","new","new_from","next","next","not","offset","op","oval","oval_with_start_index","partial_cmp","peek","points","polygon","quad_to","r_arc_to_rotated","r_conic_to","r_cubic_to","r_line_to","r_move_to","r_quad_to","rect","remove","reset","reverse_add_path","rewind","rrect","rrect_with_start_index","segment_masks","serialize","set","set_fill_type","set_is_volatile","set_last_pt","set_path","set_path","shrink_to_fit","simplify","sub","sub_assign","swap","symmetric_difference","tight_bounds","to_owned","to_owned","to_owned","to_owned","to_svg","to_svg_with_encoding","toggle","toggle_inverse_fill_type","transform","transform_with_perspective_clip","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","update_bounds_cache","with_offset","with_transform","with_transform_with_perspective_clip","LastEnum","Morph","Rotate","Style","Translate","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","new","DashInfo","PathEffect","as_a_dash","borrow","borrow_mut","clone","clone_into","compose","corner_path","dash","discrete","eq","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","fmt","from","intervals","into","line_2d","matrix","matrix_translate","merge","ne","needs_ctm","path_1d","path_2d","phase","stroke","sum","to_owned","trim","try_from","try_into","type_id","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","PathMeasure","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","hash","insert","intersection","intersects","into","is_all","is_closed","is_empty","length","matrix","ne","new","next_contour","not","partial_cmp","pos_tan","remove","segment","set","set_path","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","CCW","CW","Close","Conic","Cubic","EvenOdd","InverseEvenOdd","InverseWinding","Line","Move","PathDirection","PathFillType","PathSegmentMask","PathVerb","Quad","Winding","Annot","Art","AttributeList","BibEntry","BlockQuote","Caption","Code","Div","Document","DocumentStructureType","Figure","Form","Formula","H","H1","H2","H3","H4","H5","H6","Index","L","LBody","LI","Lbl","Link","Metadata","NonStruct","Note","P","Part","Private","Quote","RB","RP","RT","Reference","Ruby","Sect","Span","StructureElementNode","TBody","TD","TFoot","TH","THead","TOC","TOCI","TR","Table","WP","WT","Warichu","alt","append_child","append_float","append_float_array","append_int","append_string","append_string_array","attributes","attributes_mut","author","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","child_vector","clone","clone_into","creation","creator","default","default","drop","encoding_quality","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","keywords","lang","modified","new","new_document","node_id","pdfa","producer","raster_dpi","set_alt","set_child_vector","set_lang","set_node_id","set_type_string","subject","title","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_string","fractal_noise","turbulence","PictureRecorder","begin_recording","finish_recording_as_drawable","finish_recording_as_picture","new","recording_canvas","Cliperator","Combine","Difference","Intersect","Intersects","Iterator","LastOp","Region","RegionOp","Replace","ReverseDifference","Spanerator","Union","XOR","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine","compute_region_complexity","contains_point","contains_rect","contains_region","difference","difference","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_rect","get_boundary_path","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","intersect","intersect","intersects","intersects_rect","intersects_region","into","into","into","into","into_iter","into_iter","into_iter","is_complex","is_done","is_done","is_empty","is_rect","new","new","new","new","new_empty","next","next","next","next","next","op_rect","op_rect_region","op_region","op_region_rect","quick_contains","quick_reject_rect","quick_reject_region","read_from_memory","rect","rect","replace","replace","reset","reverse_difference","reverse_difference","rewind","rgn","set","set_empty","set_path","set_rect","set_rects","set_region","swap","to_owned","to_owned","to_owned","to_owned","translate","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","unwrap","unwrap","unwrap","wrap","wrap","wrap","write_to_memory","xor","xor","Complex","Corner","Empty","LastType","LowerLeft","LowerRight","NinePatch","Oval","RRect","Rect","SIZE_IN_MEMORY","Simple","Type","UpperLeft","UpperRight","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","contains","default","dump","dump_hex","dump_to_string","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_type","hash","hash","height","inner","inner_mut","inset","into","into","into","is_complex","is_empty","is_nine_patch","is_oval","is_rect","is_simple","is_valid","new","new_empty","new_nine_patch","new_oval","new_rect","new_rect_radii","new_rect_xy","offset","outset","radii","read_from_memory","rect","set_empty","set_nine_patch","set_oval","set_rect","set_rect_radii","set_rect_xy","simple_radii","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","width","with_inset","with_offset","with_outset","wrap","write_to_memory","Blender","Blender","Child","ChildPtr","ChildType","ColorFilter","ColorFilter","Options","RuntimeEffect","Shader","Shader","Uniform","Variable","Varying","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone_into","clone_into","clone_into","count","default","eq","eq","find_child","find_input","find_uniform","flags","fmt","fmt","fmt","force_no_inline","from","from","from","from","from","from","hash","index","inner","inner_mut","input_size","inputs","into","into","into","is_array","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_image","make_shader","name","name","ne","offset","size_in_bytes","source","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","uniform","uniform_size","uniforms","unwrap","wrap","0","0","0","ARRAY","Flags","Float","Float2","Float2x2","Float3","Float3x3","Float4","Float4x4","Int","Int2","Int3","Int4","SRGB_UNPREMUL","Type","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","ne","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","CubicResampler","FilterMode","FilterOptions","Linear","Linear","MipmapMode","Nearest","Nearest","None","SamplingMode","SamplingOptions","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","cubic","default","eq","eq","filter","fmt","fmt","from","from","from","from","from","hash","inner","inner_mut","into","into","mipmap","mipmap","ne","ne","new","sampling","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","use_cubic","wrap","Color","Color","Conical","Conical","GradientInfo","GradientType","GradientTypeInternal","Last","Linear","Linear","None","Radial","Radial","Shader","Sweep","Sweep","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_count","color_offsets","colors","eq","eq","eq","fmt","fmt","fmt","fractal_perlin_noise","from","from","from","gradient_flags","hash","image","into","into","into","is_a_image","is_opaque","linear_gradient","ne","ne","radial_gradient","shaders","sweep_gradient","tile_mode","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","turbulence_perlin_noise","two_point_conical_gradient","type_id","type_id","type_id","with_color_filter","with_local_matrix","0","0","0","0","1","1","blend","color","color_in_space","empty","new","blend","color","color_in_space","empty","AsNativeRunHandler","AsRunHandler","BiDiRunIterator","Feature","FontRunIterator","LanguageRunIterator","RunHandler","RunHandler","RunIterator","ScriptRunIterator","Shaper","TextBlobBuilderRunHandler","as_native_run_handler","as_native_run_handler","as_run_handler","as_run_handler","at_end","begin_line","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit_line","commit_run_buffer","commit_run_info","consume","current_font","current_language","current_level","current_script","end","end_of_current_run","end_point","fmt","fmt","from","from","icu","into","into","make_blob","new","new","new_bidi_run_iterator","new_core_text","new_font_mgr_run_iterator","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_primitive","new_script_run_iterator","new_shape_dont_wrap_or_reorder","new_shape_then_wrap","new_shaper_driven_wrapper","new_std_language_run_iterator","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","purge_caches","purge_harf_buzz_cache","run_buffer","run_handler","run_info","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","start","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","init","Buffer","RunHandler","RunInfo","advance","begin_line","bidi_level","borrow","borrow","borrow_mut","borrow_mut","clusters","commit_line","commit_run_buffer","commit_run_info","fmt","fmt","font","from","from","glyph_count","glyphs","into","into","new","offsets","point","positions","run_buffer","run_info","try_from","try_from","try_into","try_into","type_id","type_id","utf8_range","new","new","Fill","Fill","Hairline","Hairline","InitStyle","Stroke","StrokeAndFill","StrokeRec","Style","apply_to_paint","apply_to_path","apply_to_path_inplace","borrow","borrow","borrow_mut","borrow_mut","cap","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_paint","has_equal_effect","hash","hash","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","into","into","is_fill_style","is_hairline_style","join","miter","need_to_apply","new","new_fill","new_hairline","res_scale","set_fill_style","set_hairline_style","set_res_scale","set_stroke_params","set_stroke_style","style","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","BackendHandleAccess","BackendSurfaceAccess","ContentChangeMode","Discard","DiscardWrite","FlushRead","FlushWrite","NoAccess","Present","Retain","Surface","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canvas","characterize","clone","clone","clone","clone_into","clone_into","clone_into","draw","draw_display_list","draw_display_list_with_offset","eq","eq","eq","flush","flush_and_submit","flush_submit_and_sync_cpu","flush_with_access_info","flush_with_mutable_state","fmt","fmt","fmt","from","from","from","from_backend_render_target","from_backend_texture","generation_id","get_backend_render_target","get_backend_texture","hash","hash","hash","height","image_info","image_snapshot","image_snapshot_with_bounds","into","into","into","is_compatible","new_null","new_raster","new_raster_direct","new_raster_n32_premul","new_render_target","new_render_target_with_characterization","new_surface","new_surface_with_dimensions","notify_content_will_change","peek_pixels","props","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","replace_backend_texture","replace_backend_texture_with_mode","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","write_pixels_from_bitmap","write_pixels_from_pixmap","canvas","CONVERT_TEXT_TO_PATHS","Canvas","Flags","NO_PRETTY_XML","RELATIVE_PATH_ENCODING","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","default","deref","deref_mut","difference","drop","empty","end","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","ne","new","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","from_argb","from_table","ALL","ALL_TEXT_DECORATIONS","AboveBaseline","Affinity","All","AllAttributes","Alphabetic","Background","Baseline","BelowBaseline","Block","BlockIndex","BlockRange","Bottom","Center","Dashed","Decoration","Decorations","Direct","DisableAll","DisableFirstAscent","DisableLastDescent","Dotted","Double","Downstream","DrawOptions","EMPTY_BLOCK","EMPTY_BLOCKS","EMPTY_INDEX","EMPTY_RANGE","EMPTY_TEXT","End","Font","FontCollection","FontFamilies","FontFeature","Foreground","Gaps","Ideographic","IncludeLineSpacingBottom","IncludeLineSpacingMiddle","IncludeLineSpacingTop","Justify","LINE_THROUGH","LTR","Left","LetterSpacing","LineMetrics","LineMetricsVector","Max","Max","Middle","NO_DECORATION","None","OVERLINE","Paragraph","ParagraphBuilder","ParagraphCache","ParagraphStyle","Placeholder","PlaceholderAlignment","PlaceholderStyle","PositionWithAffinity","RTL","RangeExtensions","Record","RectHeightStyle","RectWidthStyle","Replay","Right","Shadow","Solid","Start","Strut","StrutStyle","StyleMetrics","StyleType","TextAlign","TextBaseline","TextBox","TextBoxes","TextDecoration","TextDecorationMode","TextDecorationStyle","TextDirection","TextHeightBehavior","TextIndex","TextRange","TextShadow","TextStyle","Through","Tight","Tight","Top","TypefaceFontProvider","TypefaceFontStyleSet","UNDERLINE","Upstream","Wavy","WordSpacing","abandon","add","add_font_feature","add_placeholder","add_shadow","add_text","affinity","alias","alignment","all","alphabetic_baseline","append_typeface","ascent","background","baseline","baseline","baseline_offset","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","blocks_before","blur_sigma","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clear_caches","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color","color","color","complement","contains","contains","count","decoration","decoration_mut","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_fallback","default_fallback_char","descent","did_exceed_max_lines","difference","direct","disable_font_fallback","draw_options","effective_align","ellipsis","ellipsized","empty","empty","enable_font_fallback","end_excluding_whitespaces","end_including_newline","end_index","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","equals_by_fonts","extend","fallback_manager","family_name","find_typefaces","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_size","font_size","font_style","font_style","force_strut_height","foreground","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_glyph_position_at_coordinate","get_line_metrics","get_rects_for_placeholders","get_rects_for_range","get_style_metrics","get_style_metrics_count","get_word_boundary","half_leading","half_leading","hard_break","has_shadow","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height_override","height_override","hinting_is_on","ideographic_baseline","index","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","is_placeholder","iter","layout","leading","left","letter_spacing","line_number","line_number","locale","longest_line","mark_dirty","match_one_attribute","max_intrinsic_width","max_lines","max_width","min_intrinsic_width","mode","name","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","not","offset","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","peek_style","pop","position","print_statistics","push_style","range","range","rect","register_typeface","remove","reset","reset_font_features","reset_shadows","set","set_asset_font_manager","set_background_color","set_color","set_default_font_manager","set_default_font_manager_and_family_names","set_draw_options","set_dynamic_font_manager","set_ellipsis","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_force_strut_height","set_foreground_color","set_half_leading","set_half_leading","set_height","set_height","set_height","set_height_override","set_height_override","set_leading","set_letter_spacing","set_locale","set_max_lines","set_paragraph_style","set_placeholder","set_strut_enabled","set_strut_style","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_typeface","set_word_spacing","shadows","shift","start_index","strut_enabled","strut_style","style","style","style","sub","sub_assign","symmetric_difference","text_align","text_baseline","text_before","text_direction","text_height_behavior","text_style","text_style","text_style","thickness_multiplier","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn_hinting_off","turn_on","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typeface","union","unlimited_lines","unresolved_glyphs","unscaled_ascent","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","value","width","width","width","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","Inverted","Mode","Normal","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","DoIncludeData","DontIncludeData","FontId","FontTableTag","IncludeDataIfLocal","LocalizedString","LocalizedStringsIter","SerializeBehavior","Typeface","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone","clone_into","clone_into","clone_with_arguments","copy_table_data","count_glyphs","count_tables","deserialize","eq","eq","equal","family_name","fmt","fmt","font_style","from","from","from_data","from_name","get_kerning_pair_adjustments","get_table_data","get_table_size","hash","into","into","is_bold","is_fixed_pitch","is_italic","language","ne","new","new_family_name_iterator","post_script_name","serialize","str_to_glyphs","string","table_tags","text_to_glyphs","to_font_data","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unichar_to_glyph","unichars_to_glyphs","unique_id","units_per_em","variation_design_parameters","variation_design_position","Camera3D","CustomTypefaceBuilder","Image","OrderedFontMgr","Patch3D","Path","PathAndPaint","Picture","TypefaceGlyph","View3D","append","axis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","detach","dot_with","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","inner","inner","inner_mut","inner_mut","into","into","into","location","ne","ne","new","new","new_null_canvas","observer","origin","parse_path","patch_to_matrix","reset","reset","set_font_style","set_glyph","set_metrics","shadow_utils","text_utils","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","unwrap","unwrap","update","v","wrap","wrap","zenith","0","0","0","1","image","scale","Absolute","PathEncoding","Relative","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_svg","hash","into","to_owned","to_svg","to_svg_with_encoding","try_from","try_into","type_id","ALL","GEOMETRIC_ONLY","ShadowFlags","TRANSPARENT_OCCLUDER","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","compute_tonal_colors","contains","difference","draw_shadow","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","local_bounds","ne","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","Align","Center","Left","Right","borrow","borrow_mut","clone","clone_into","draw_str","eq","fmt","from","get_path","hash","into","to_owned","try_from","try_into","type_id","Bone","BoneIndices","BoneWeights","Builder","BuilderFlags","HAS_COLORS","HAS_TEX_COORDS","Last","MAX_CUSTOM_ATTRIBUTES","TriangleFan","TriangleStrip","Triangles","VertexMode","Vertices","all","apply_bones","approximate_size","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","cmp","colors","colors","complement","contains","decode","detach","difference","empty","encode","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bones","has_colors","has_indices","has_tex_coords","hash","hash","index_count","indices","indices","insert","intersection","intersects","into","into","into","is_all","is_empty","is_volatile","is_volatile","mode","ne","ne","new","new_copy","not","partial_cmp","positions","positions","remove","set","sub","sub_assign","symmetric_difference","tex_coords","tex_coords","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","unique_id","vertex_count","NativeTransmutableWrapper","PointerWrapper","RefWrapper","ValueWrapper","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","unwrap","unwrap","unwrap","wrap","wrap","wrap","wrap_mut","wrap_ref","Centered","MAX_PLANES","PlaneConfig","S410","S411","S420","S422","S440","S444","Siting","Subsampling","UYV","UYVA","Unknown","Unknown","YUV","YUVA","YUVAInfo","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_total_bytes","dimensions","eq","eq","fmt","fmt","from","from","has_alpha","has_alpha","hash","hash","height","inner","inner_mut","into","into","new","num_channels_in_plane","num_channels_in_plane","num_planes","num_planes","origin","origin_matrix","plane_config","plane_dimensions","plane_dimensions","plane_subsampling_factors","plane_subsampling_factors","siting_xy","subsampling","subsampling_factors","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","width","with_dimensions","with_subsampling","wrap","yuv_color_space","DataType","Float16","Last","Last","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_color_type_for_data_type","eq","eq","fmt","fmt","from","from","hash","hash","into","into","num_channels_and_data_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DATA_TYPE_CNT","DataType","Float16","MAX_PLANES","MAX_PLANES","Unorm10_Unorm2","Unorm16","Unorm8","YUVAPixmapInfo","YUVAPixmaps","allocate","compute_total_bytes","data_type","data_type","from_data","from_data_type","from_external_memory","from_external_pixmaps","init_pixmaps_from_single_allocation","is_supported","new","num_planes","num_planes","pixmaps_info","plane","plane_info","plane_infos","planes","recommended_rgba_color_type","row_bytes","row_bytes_iter","yuv_color_space","yuva_info","yuva_info","yuva_pixmap_info","DataType","Float16","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","all","default_color_type_for_data_type","enable_data_type","from_context","num_channels_and_data_type","supported"],"q":["skia_safeskia_safe::annotate","","","skia_safe::blenders","skia_safe::canvasskia_safe::canvas::GlyphPositions","","skia_safe::canvas::lattice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::color_filter","","","","","","","","","","","","","","skia_safe::color_filter::color_filters","","","","","","","","","skia_safe::color_filters","","","","","","","","","skia_safe::color_matrix","","","","","","","","","","","skia_safe::color_matrix_filter","skia_safe::colors","","","","","","","","","","","","skia_safe::contour_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::corner_path_effect","skia_safe::dash_path_effect","skia_safe::discrete_path_effect","skia_safe::document","","","","","","","","","","","","","","","","","skia_safe::document::state","","","","","","","","","","","","","","","","","","skia_safe::drawable","","","","","","","","","skia_safe::drawable::gpu_draw_handler","","skia_safe::encode","","skia_safe::font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments::variation_position","","","","","","","","","","","","","","","","","","","","","skia_safe::font_metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_parameters","","","","","","skia_safe::font_parameters::variation","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_style","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpuskia_safe::gpu::context_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpu::d3dskia_safe::gpu::glskia_safe::gpu::vkskia_safe::gpu::vk::GetProcOf","","","","skia_safe::gradient_shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gradient_shader::GradientShaderColors","","","skia_safe::graphics","","","","","","","","","","","","","","","","","skia_safe::high_contrast_config","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter::high_contrast_config","","","","skia_safe::icu","skia_safe::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::line_2d_path_effect","skia_safe::luma_color_filter","skia_safe::matrixskia_safe::matrix_path_effect","","skia_safe::merge_path_effect","skia_safe::named_transfer_fn","","","","","","skia_safe::overdraw_color_filter","","skia_safe::paint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::pathskia_safe::path_1d_path_effect","","","","","","","","","","","","","","","","","","","skia_safe::path_2d_path_effect","skia_safe::path_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_types","","","","","","","","","","","","","","","","skia_safe::pdf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::perlin_noise_shader","","skia_safe::picture_recorder","","","","","","skia_safe::region","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::rrect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect::ChildPtr","","","skia_safe::runtime_effect::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::sampling_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader::GradientType","","","","","","skia_safe::shader::shaders","","","","skia_safe::shader_mask_filter","skia_safe::shaders","","","","skia_safe::shaper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shaper::icu","skia_safe::shaper::run_handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::stroke_and_fill_path_effect","skia_safe::stroke_path_effect","skia_safe::stroke_rec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::svg","skia_safe::svg::canvas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::table_color_filter","","skia_safe::textlayout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::trim_path_effect","","","","","","","","","","","","","","","","","skia_safe::typeface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::TypefaceGlyph","","","","","","skia_safe::utils::parse_path","","","","","","","","","","","","","","","","","","","","skia_safe::utils::shadow_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::text_utils","","","","","","","","","","","","","","","","","","","skia_safe::vertices","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::wrapper","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bitmap describes a two-dimensional raster pixel array. …","","","Blender represents a custom blend function in the Skia …","","","Reflected across x-axis","Rotated 180","","","","","","<code>Canvas</code> provides an interface for drawing, and how the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","These values match the orientation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps a native type that can be represented and used in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","","","","","","","","The maximum number of points an iterator will return for …","","MaskFilter is the base class for object that perform …","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","","","","","","","","","","","","","","","","","","Implement this trait to use a pixel type in …","","","","","","","","","","","","","","","A wrapper type represented by a reference counted pointer …","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper type that represents a native type with a …","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the structure of planes for a YUV image with …","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Returns the set containing all flags.","Returns the set containing all flags.","Sets ImageInfo to width, height, and native color type; …","Sets ImageInfo to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","","","","","","","","","","","","","","","","","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the approximate bounds that would result from …","Returns the approximate bounds that would result from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new image from the bitmap. If the bitmap is …","Returns a new image from the bitmap. If the bitmap is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","Create a blur mask filter.","","Create a blur mask filter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","","","","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","","","","Access the underlying pixels as a byte array. This is a …","Access the underlying pixels as a byte array. This is a …","Returns number of bytes per pixel required by ColorType.","","","Returns number of bytes per pixel required by ColorType.","","","","","","","","","","Returns <code>true</code> if the handle can be sent to another thread.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns ColorSpace, the range of colors, associated with …","","","","","","","","","Returns ColorSpace, the range of colors, associated with …","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","Returns minimum memory required for pixel storage.","","","Returns minimum memory required for pixel storage.","","","","","Returns <code>true </code>if all pixels are opaque. ColorType …","","","Returns <code>true </code>if all pixels are opaque. ColorType …","","","","","","","Determine size to allocate for all planes. Optionally …","Given a per-plane row bytes, determine size to allocate …","","","","","","","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The per-YUV<code>[A]</code> channel data type.","","","","","","","See RCHandle::new().","","","","","","","","","","","Defaults to nothing supported.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns <code>ISize { width(), height() }</code>.","","","","","Dimensions of the full resolution image (after planes have …","","","","","","Returns <code>ISize { width(), height() }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","","","","","","","","","","","","","","","","","Returns an empty set of flags.","","Returns an empty set of flags.","Update to add support for pixmaps with <code>num_channels</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","","","","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","","","","","","","","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Shares PixelRef with dst. Pixels are not copied; Bitmap …","","","Shares PixelRef with dst. Pixels are not copied; Bitmap …onvert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","Init based on texture formats supported by the context.","","Use storage in Data as backing store for pixmaps’ …","","","","Like above but uses …","","","","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a unique value corresponding to the pixels in …","","","Returns a unique value corresponding to the pixels in …","","","","Returns pixel address at (x, y).","Returns pixel address at (x, y).","Look up the pixel at (x,y) and return its alpha component, …","","Look up the pixel at (x,y) and return its alpha component, …","","","","","","","Returns pixel at (x, y) as unpremultiplied color. Returns …","","Returns pixel at (x, y) as unpremultiplied color. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bounds of this bitmap, offset by its PixelRef …","Returns the bounds of this bitmap, offset by its PixelRef …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns pixel row count.","","","","","","","","","Returns pixel row count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns width, height, AlphaType, ColorType, and ColorSpace…","","","Returns width, height, AlphaType, ColorType, and ColorSpace…","","","","Takes an allocation that is assumed to be at least […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","","Sets ImageInfo to info following the rules in <code>set_info()</code>, …","Sets ImageInfo to info following the rules in <code>set_info()</code>, …","","","","","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","Returns <code>true</code> if no flags are currently stored.","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if pixels can not change.","","Returns <code>true</code> if pixels can not change.","","","","","","","","","","","","","","","Returns <code>true</code> if PixelRef is <code>None</code>.","Returns <code>true</code> if PixelRef is <code>None</code>.","Returns <code>true</code> if AlphaType is set to hint that all pixels …","","","","Returns <code>true</code> if AlphaType is set to hint that all pixels …","","","","","","","","","","","","","","","Returns <code>true</code> if Bitmap can be drawn.","Returns <code>true</code> if Bitmap can be drawn.","","","","","","","","","","","Is this valid and does it use color types allowed by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>true</code> if the type matches the color type’s format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a blender that implements the specified <code>BlendMode</code>.","Create a blender that implements the specified <code>BlendMode</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro to mark a Rust type as NativeTransmutable and test …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty Bitmap without pixels, with …","","","","","","","","","","","","","Initializes the YUVAPixmapInfo from a YUVAInfo with …","<code>dimensions</code> should specify the size of the full resolution …","","","","","","","Constructs a native Strings array from a slice of …","","","","","","","Initializes a YUVABackendTextureInfo to describe a set of …","","","","","","","","Creates an empty Bitmap without pixels, with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a given byte slice without copying it.","Constructs Data from a given byte slice without copying it.","","","","","","","","Constructs Data from a &amp;CStr by copying its contents.","Constructs Data from a &amp;CStr by copying its contents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a copy of a &amp;str.","Constructs Data from a copy of a &amp;str.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","Marks that pixels in PixelRef have changed. Subsequent …","","Marks that pixels in PixelRef have changed. Subsequent …","","","Number of pixmap planes.","","The number of Pixmap planes.","The number of crate::Pixmap planes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies Bitmap pixel address, row bytes, and ImageInfo to …","Copies Bitmap pixel address, row bytes, and ImageInfo to …","","","","","","","","","Returns PixelRef, which contains: pixel base address; its …","Returns PixelRef, which contains: pixel base address; its …","Returns origin of pixels within PixelRef. Bitmap bounds is …","Returns origin of pixels within PixelRef. Bitmap bounds is …","Returns pixel address, the base address corresponding to …","","Access the underlying pixels. This is a rust-skia specific …","Access the underlying pixels. This is a rust-skia specific …","Returns pixel address, the base address corresponding to …","","Returns a constant reference to the Pixmap holding the …","Returns a constant reference to the Pixmap holding the …","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","","Returns the dimensions for each plane. Dimensions are as …","Format of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>","All plane formats.","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","","Access the Pixmap planes.","","","","","The number of points an iterator will return for the verb.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies a crate::Rect of pixels from Bitmap to <code>dst_pixels</code>. …","","","Copies a crate::Rect of pixels from Bitmap to <code>dst_pixels</code>. …","","","","","","","","","","","","","","","","","","","Notify that the borrowed dependency is not referred to …","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Resets to its initial state; all fields are set to zero, …","","","","","","","","Resets to its initial state; all fields are set to zero, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns row bytes, the interval from one pixel row to the …","","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","Returns row bytes, the interval from one pixel row to the …","","","Returns number of pixels that fit on row. Should be …","","Returns number of pixels that fit on row. Should be …","","Row bytes for all planes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","Inserts or removes the specified flags depending on the …","","","","","Sets AlphaType, if <code>alpha_type</code> is compatible with ColorType…","Sets AlphaType, if <code>alpha_type</code> is compatible with ColorType…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets internal flag to mark Bitmap as immutable. Once set, …","","Sets internal flag to mark Bitmap as immutable. Once set, …","","Sets width, height, AlphaType, ColorType, ColorSpace, and …","Sets width, height, AlphaType, ColorType, ColorSpace, and …","","","","","","","","","","","","","","","","","","","","","","","","Replaces <code>pixel_ref</code> and origin in Bitmap.  <code>offset</code> specifies …","Replaces <code>pixel_ref</code> and origin in Bitmap.  <code>offset</code> specifies …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","Disables all flags enabled in the set.","","","","Checks whether there is a supported combination of color …","","","","","Swaps the fields of the two bitmaps.","","","Swaps the fields of the two bitmaps.","","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","Sets ImageInfo to width, height, and native color type; …","Sets ImageInfo to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","Sets ImageInfo to info following the rules in <code>set_info()</code> …","Sets ImageInfo to info following the rules in <code>set_info()</code> …eturns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","Macro that implements Send and Sync.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro that verifies a variant name at compile time.","","","","","","","","","","","","Returns pixel count in each row. Should be equal or less …","","","","","","","","","","","Returns pixel count in each row. Should be equal or less …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","","","","","","","","","","","","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap the handle in a type that can be sent to another …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a blender that implements the following: …","","Stack helper class calls <code>Canvas::restore_to_count()</code> when …","<code>Canvas</code> provides an interface for drawing, and how the …","","","Used to pass either a slice of <code>Point</code> or <code>RSXform</code> to …","initializes with previous contents","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","Selects if an array of points are drawn as discrete …","","","","","<code>SaveLayerFlags</code> provides options that may be used in any …","<code>SaveLayerRec</code> contains the state used to create the layer.","","<code>SrcRectConstraint</code> controls the behavior at the edge of …","","Provides access to Canvas’s pixels.","Returns the pixel base address, <code>ImageInfo</code>, <code>row_bytes</code>, and …","Returns the set containing all flags.","","","","","","If not <code>None</code>, this triggers the same initialization …","Gets the size of the base or root layer in global canvas …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Hints at layer size limit","source bounds to draw from","Fills clip with color <code>color</code> using <code>BlendMode::Src</code>. This has …","","","","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","","","","","","","","","","","array of colors","Returns the complement of this set of flags.","Replaces <code>Matrix</code> with matrix premultiplied with existing …","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Sets <code>Self::bounds</code>, <code>Self::paint</code>, and <code>Self::backdrop</code> to <code>None</code>…","Creates an empty <code>Canvas</code> with no backing device or pixels, …","","","","","Returns <code>IRect</code> bounds of clip, unaffected by <code>Matrix</code>. If …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Makes <code>Canvas</code> contents undefined. Subsequent calls that …","Associates <code>Rect</code> on <code>Canvas</code> when an annotation; a key-value …","Draws arc using clip, <code>Matrix</code>, and <code>Paint</code> paint.","Draws circle at center with radius using clip, <code>Matrix</code>, and …","Fills clip with color <code>color</code>. <code>mode</code> determines how ARGB is …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, offset by …","Draws <code>RRect</code> outer and inner using clip, <code>Matrix</code>, and <code>Paint</code> …","Draws <code>count</code> glyphs, at positions relative to <code>origin</code> styled …","Draws glyphs at positions relative to <code>origin</code> styled with …","","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","","","","Draws <code>IRect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws line segment from <code>p1</code> to <code>p2</code> using clip, <code>Matrix</code>, and …","Draws oval oval using clip, <code>Matrix</code>, and <code>Paint</code>. In <code>paint</code>: …","Fills clip with <code>Paint</code> <code>paint</code>. <code>Paint</code> components, <code>Shader</code>, …","Draws a Coons patch: the interpolation of four cubics with …","Draws <code>Path</code> path using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. <code>Path</code> …","Draws <code>Picture</code> picture, using clip and <code>Matrix</code>; transforming …","Draws point <code>p</code> using clip, <code>Matrix</code> and <code>Paint</code> paint.","Draws <code>pts</code> using clip, <code>Matrix</code> and <code>Paint</code> <code>pain</code>. if the number …","Draws <code>Rect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws <code>Region</code> region using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. …","Draws <code>RRect</code> bounded by <code>Rect</code> rect, with corner radii …","Draws <code>RRect</code> rrect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","","Draws <code>String</code>, with origin at <code>(origin.x, origin.y)</code>, using …","","Draws <code>TextBlob</code> blob at <code>(origin.x, origin.y)</code>, using clip, …","Draws <code>Vertices</code> vertices, a triangle mesh, using clip and …","Draws saved layers, if any. Frees up resources used by …","Restores <code>Canvas</code> to saved state. Drop is called when …","Returns an empty set of flags.","","","","","Preserves LCD text, creates with prior layer contents","Triggers the immediate execution of all pending draw …","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a canvas that draws into bitmap. Use props to …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Allocates raster <code>Canvas</code> that will draw directly into …","Allocates raster <code>Canvas</code> specified by inline image …","Preserves <code>Canvas::save()</code> count. Optionally saves <code>Canvas</code> …","","","","Returns <code>ImageInfo</code> for <code>Canvas</code>. If <code>Canvas</code> is not associated …","Writable pixels’ <code>ImageInfo</code>","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if clip is empty; that is, nothing will draw.","Returns <code>true</code> if clip is <code>Rect</code> and not empty. Returns <code>false</code> …","Returns <code>true</code> if no flags are currently stored.","","Returns bounds of clip, transformed by inverse of <code>Matrix</code>. …","Returns the current transform from local coordinates to …","Throws away the 3rd row and column in the matrix, so be …","","Creates <code>Canvas</code> of the specified dimensions without a …","","Creates <code>Surface</code> matching info and props, and associates it …","Returns the complement of this set of flags.","<code>Canvas</code> top layer origin, its top-left corner","Modifies overlay","","Returns <code>true</code> if <code>Canvas</code> has direct access to its pixels.","Address of pixels","Copies <code>SurfaceProps</code>, if <code>Canvas</code> is associated with raster …","Returns <code>true</code> if <code>Rect</code> <code>rect</code>, transformed by <code>Matrix</code>, can be …","Returns <code>true</code> if <code>path</code>, transformed by <code>Matrix</code>, can be …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>. <code>Matrix</code> …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into bitmap. <code>Matrix</code> and …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into pixmap. <code>Matrix</code> and …","Returns GPU context of the GPU surface associated with …","array of fill types","Removes the specified flags in-place.","Sets <code>Matrix</code> to the identity matrix. Any prior matrix state …","Removes changes to <code>Matrix</code> and clip since <code>Canvas</code> state was …","Restores <code>Canvas</code> to saved state immediately. Subsequent …","Restores state to <code>Matrix</code> and clip values when <code>Self::save()</code>…","Rotates <code>Matrix</code> by degrees about a point at <code>(p.x, p.y)</code>. …","Writable pixels’ row bytes","Saves <code>Matrix</code> and clip. Calling <code>Self::restore()</code> discards …","Returns the number of saved states, each containing: <code>Matrix</code>…","Saves <code>Matrix</code> and clip, and allocates <code>Bitmap</code> for subsequent …","Saves <code>Matrix</code> and clip, and allocates <code>Bitmap</code> for subsequent …","Scales <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis.","Inserts or removes the specified flags depending on the …","DEPRECATED – use <code>M44</code> version","DEPRECATED – use <code>M44</code> version","Replaces <code>Matrix</code> with <code>matrix</code>. Unlike <code>Self::concat()</code>, any …","Skews <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis. A …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Sometimes a canvas is owned by a surface. If it is, …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","DEPRECATED Legacy version of <code>Self::local_to_device()</code>, …","Translates <code>Matrix</code> by <code>d</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","x-axis values dividing bitmap","y-axis values dividing bitmap","","","","","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","Optional setting per rectangular grid entry to make it …","","","","","","source bounds to draw from","","","array of colors","","","","","","","","","","array of fill types","","","","","","","","x-axis values dividing bitmap","y-axis values dividing bitmap","Reflected across x-axis","Rotated 180","","","","","These values match the orientation …","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if the encoded origin includes a 90 degree …","Given an width and height of the source data, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Borrows the canvas for the current page on the document.","Close the document and return the encoded representation. …","Ends the page. This function consumes the document and …","","","","The current page we are currently drawing on.","The number of pages in this document.","","","","","Document is currently on a page and can be drawn onto.","Document is currently open. May contain several pages.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type of a font weight.","Wrapper type for the width of a font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A description of a set BackendTextures that hold the …","A set of BackendTextures that hold the planar data for an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes a YUVABackendTextureInfo to describe a set of …","","","","","","","","","","","","","","","","","","The number of crate::Pixmap planes.","","","","","Format of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>","All plane formatsbtains the raw pointer without transferring ownership. Do …","","","","","","","","","","","","","","","","","","","Performs QueryInterface fun.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>ComPtr</code> to wrap a raw pointer. It takes ownership …","","","","","","","","","","","","","","","","","","","Extracts the raw pointer. You are now responsible for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts up the inheritance chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</codeeturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Safety","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","Safety","","","","","","Safety","","Safety","","Safety","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type that represents either a slice of <code>Color</code>, or a slice …","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On Windows, and if the default feature “embed-icudtl” …","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …eturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum number of points an iterator will return for …","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","The number of points an iterator will return for the verb.","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</codeeturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for accessing the native run handler instance used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On Windows, and if the default feature “embed-icudtl” …eturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Ends the Canvas drawing and returns the resulting SVG. …","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Creates a new SVG canvas.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Efficient reference type to a C++ vector of font family …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Returns indices and references to style metrics in the …","Returns the number of style metrics in the given index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</codeeturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","A trait that supports the conversion from a C/C++ value …","This trait supports the conversion of a wrapper into it’…","A trait that supports the conversion from a C/C++ …","A trait that supports the conversion from a C/C++ value …","Access the wrapped pointer.","","","","Access the wrapped pointer.","","","","Unwraps the wrapper type into the native pointer.","","","Wraps a native pointer into a wrapper type. Returns <code>None</code> …","","","","","","","Specifies how YUV (and optionally A) are divided among …","","","","","","","Describes how subsampled chroma values are sited relative …","UV subsampling is also specified in the enum value names …","","","","","","","Specifies the structure of planes for a YUV image with …","","","","","","","","","","","","","","","","","Given a per-plane row bytes, determine size to allocate …","Dimensions of the full resolution image (after planes have …","","","","","","","Does the PlaneConfig have alpha values?","","","","","","","","","<code>dimensions</code> should specify the size of the full resolution …","Number of Y, U, V, A channels in the ith plane for a given …","","Number of planes for a given PlaneConfig.","","","","","Given image dimensions, a planer configuration, …","Returns the dimensions for each plane. Dimensions are as …","<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to a …","","","","Ratio of Y/A values to U/V values in x and y.","","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Returns a YUVAInfo that is identical to this one but with …","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the default ColorType to use with <code>num_channels</code> …","","","","","","","","","","","If the ColorType is supported for YUVA pixmaps this will …","","","","","","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","Determine size to allocate for all planes. Optionally …","The per-YUV<code>[A]</code> channel data type.","","Use storage in Data as backing store for pixmaps’ …","Like above but uses …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Takes an allocation that is assumed to be at least […","Is this valid and does it use color types allowed by the …","Initializes the YUVAPixmapInfo from a YUVAInfo with …","The number of Pixmap planes.","Number of pixmap planes.","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","Access the Pixmap planes.","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","Row bytes for all planes.","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Gets the default ColorType to use with <code>num_channels</code> …","Update to add support for pixmaps with <code>num_channels</code> …","Init based on texture formats supported by the context.","If the ColorType is supported for YUVA pixmaps this will …","Checks whether there is a supported combination of color …"],"i":[1,2,3,3,4,3,5,5,3,0,0,2,0,0,3,3,3,6,6,7,7,4,5,8,8,8,8,8,8,8,9,0,0,0,0,0,0,10,10,0,11,12,12,7,0,13,14,0,15,0,0,16,0,14,0,0,14,0,0,14,0,0,0,0,0,0,0,0,15,0,0,0,17,0,15,0,0,16,7,18,16,5,19,14,0,0,0,13,11,9,0,0,14,20,21,22,0,0,14,14,14,14,14,0,0,0,17,23,14,24,0,0,0,0,0,0,0,0,0,0,0,25,2,5,7,4,4,7,4,0,26,3,27,27,5,0,0,14,0,14,5,16,16,0,0,16,16,0,0,8,0,0,0,0,17,28,17,20,21,22,17,17,17,17,23,23,0,5,8,8,5,7,29,30,11,9,21,14,31,8,2,28,14,14,13,10,10,14,15,29,30,14,0,7,32,18,18,18,18,15,0,0,0,20,0,13,9,14,15,14,27,27,33,0,29,30,33,30,25,25,28,27,27,16,0,31,28,14,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,31,15,0,2,3,3,3,3,0,7,4,4,0,4,3,3,3,4,3,3,3,3,3,6,6,0,0,8,8,8,8,8,0,0,0,13,21,22,10,10,11,9,0,0,16,16,3,0,0,14,0,0,14,0,0,0,0,25,14,28,11,14,14,14,14,14,24,24,0,17,0,0,0,0,7,0,0,0,0,0,0,10,10,0,19,26,26,26,0,17,21,22,3,6,31,31,0,0,0,0,0,0,5,5,7,23,22,0,14,21,7,33,0,0,0,0,33,27,27,16,7,34,35,36,18,32,32,37,18,18,38,39,40,41,41,42,42,43,44,18,18,38,39,40,41,41,42,42,43,44,18,18,18,44,18,18,44,18,18,18,45,18,44,18,44,18,18,18,44,18,18,18,45,46,18,46,18,47,32,18,4,19,48,18,48,18,48,18,48,18,49,18,49,18,49,18,49,18,49,18,49,18,49,18,49,18,18,18,18,32,48,50,51,46,18,18,18,18,32,45,0,32,18,18,18,18,18,32,32,45,18,18,18,52,18,32,53,32,52,32,52,32,32,44,18,18,44,18,18,44,18,18,54,55,56,32,32,32,35,38,39,40,35,18,57,32,14,32,18,18,48,18,52,18,32,38,39,40,18,18,32,35,47,58,58,18,18,18,0,18,59,60,32,45,60,32,60,32,60,32,59,7,34,61,35,36,62,18,18,18,18,32,63,18,18,18,32,18,18,7,7,4,19,4,19,7,7,4,19,4,19,4,19,4,19,4,19,18,18,18,0,53,32,32,18,32,18,32,64,18,45,32,65,66,7,61,67,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,64,18,45,32,65,66,7,61,67,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,47,58,59,47,58,48,51,46,76,18,18,18,18,18,32,32,32,32,32,32,45,46,18,48,50,51,18,18,18,3,34,36,62,63,18,32,77,32,0,78,18,32,18,59,58,58,58,18,32,32,32,18,32,44,79,18,32,7,61,67,4,35,68,36,1,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,18,45,32,7,61,67,4,35,68,36,1,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,32,74,44,18,18,4,19,0,71,71,18,18,18,0,18,32,32,0,51,18,0,0,48,50,51,46,63,18,18,18,18,18,32,48,50,51,46,63,18,18,18,18,18,32,32,32,0,18,32,71,53,18,18,18,32,4,19,53,32,32,32,32,32,32,44,18,48,51,46,18,18,18,32,69,48,46,18,18,51,18,51,18,18,18,18,18,69,71,44,18,18,18,45,80,81,81,81,18,4,47,47,47,47,47,58,58,58,19,47,18,18,18,0,82,18,18,18,57,32,32,32,0,60,83,18,18,32,32,84,32,32,32,18,18,32,18,18,38,39,42,43,42,43,85,44,18,18,52,32,45,45,45,45,34,36,18,18,32,0,18,18,75,75,32,32,18,18,48,86,83,84,50,87,46,88,63,89,90,91,92,93,94,95,79,96,97,98,18,18,18,18,18,18,99,100,7,26,38,39,40,71,41,42,43,47,58,55,73,6,19,74,34,8,14,20,11,9,12,13,28,32,32,32,57,101,102,97,65,100,34,101,102,97,65,100,59,103,104,18,32,32,32,78,44,18,18,18,18,18,18,45,4,19,32,48,51,105,46,63,18,18,18,18,18,18,18,32,32,32,32,32,0,32,42,42,32,32,38,42,73,38,42,73,0,38,39,42,43,42,43,45,45,32,32,32,32,32,45,0,48,18,18,45,32,18,71,58,18,18,18,18,58,36,18,45,45,45,4,47,19,18,32,0,48,46,18,18,32,32,32,106,45,32,32,45,57,93,107,18,32,7,61,67,4,35,68,36,1,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,32,18,41,42,55,73,18,48,46,18,18,46,18,48,18,48,18,46,18,32,4,19,32,32,48,18,48,46,18,18,36,32,84,32,32,32,84,32,44,18,18,85,32,32,32,32,32,32,32,32,32,32,18,18,35,18,74,32,32,32,32,32,32,32,32,32,32,32,32,108,48,56,109,104,110,111,57,60,112,78,113,114,86,83,84,115,116,106,50,51,53,117,118,44,119,87,52,120,105,46,81,88,121,122,63,76,49,64,89,123,124,125,90,126,127,91,92,93,128,129,130,131,132,133,134,94,135,136,101,137,138,139,140,141,142,143,144,145,95,79,107,96,102,97,98,146,147,148,149,37,18,18,18,99,150,100,7,61,67,4,4,4,4,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,19,19,19,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,0,0,32,18,18,18,32,0,18,0,18,18,0,18,18,32,18,18,32,32,56,84,84,64,139,18,45,32,32,65,66,7,7,7,61,61,67,67,4,35,35,35,35,68,36,1,69,70,26,3,38,39,40,71,71,71,41,41,42,42,42,42,43,43,47,47,58,58,58,58,72,55,55,73,73,73,73,6,19,74,75,34,34,34,33,151,152,153,154,155,156,157,158,159,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,32,32,7,32,32,32,4,19,4,19,4,19,58,52,18,32,34,51,18,32,18,52,18,32,32,32,18,106,45,32,18,18,32,58,58,73,4,19,58,47,32,32,18,32,18,18,106,45,32,32,32,58,76,32,76,32,47,72,32,18,7,76,32,53,32,47,58,60,32,60,32,76,18,18,32,18,32,76,32,32,18,18,18,47,58,47,58,32,32,7,61,35,36,48,105,18,18,32,32,32,48,18,48,46,18,18,32,32,18,18,71,48,46,18,18,18,18,32,45,32,32,76,18,32,32,45,32,18,106,45,32,32,32,18,18,18,45,45,32,18,71,32,32,48,18,32,32,18,18,18,18,45,18,32,18,18,18,64,0,0,0,82,67,18,18,18,18,32,32,18,32,32,18,18,32,32,18,4,26,3,19,75,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,48,51,105,46,63,18,18,18,18,18,18,18,18,18,45,45,32,32,32,47,58,55,73,47,18,18,32,0,0,18,45,75,0,32,45,0,32,0,18,0,63,18,32,32,32,32,44,18,18,32,60,18,18,35,40,32,35,18,32,18,18,18,48,106,46,18,18,45,32,18,18,18,45,32,7,35,68,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,74,75,34,33,15,18,18,45,32,7,35,68,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,74,75,34,33,15,32,32,32,32,4,19,47,58,48,18,18,47,58,58,47,4,19,81,81,4,47,58,19,58,18,18,64,18,45,32,65,66,7,61,67,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,52,32,18,45,65,70,71,82,32,4,19,32,32,3,18,18,18,6,32,18,32,18,32,18,18,18,18,18,18,48,57,60,51,18,18,18,18,18,32,32,4,47,58,55,73,19,47,23,18,18,71,42,43,58,32,18,18,50,51,18,18,6,18,48,105,18,32,18,18,23,18,32,18,32,18,18,69,18,63,18,48,18,48,50,51,46,18,18,18,18,32,32,35,31,18,18,63,18,18,18,18,48,18,18,18,6,18,18,58,18,104,32,18,18,32,63,18,74,6,106,63,18,18,18,18,18,18,45,32,18,18,32,41,42,55,73,42,60,32,18,47,58,58,58,58,18,45,18,59,47,58,47,58,18,18,32,38,39,42,43,38,39,42,43,18,18,32,0,45,44,18,18,32,18,45,71,32,0,32,44,49,18,18,32,32,32,32,32,32,18,32,18,71,45,18,84,32,84,32,84,32,84,32,18,83,32,160,7,35,0,18,45,32,32,0,32,59,45,45,32,32,32,45,18,18,32,32,0,18,45,51,18,75,161,85,18,18,18,56,32,32,75,44,18,18,162,162,162,162,35,35,35,38,38,39,39,40,40,42,73,38,38,39,39,40,40,42,73,3,18,18,18,14,0,71,163,163,0,7,61,67,4,35,68,36,1,38,39,40,41,42,43,47,58,72,55,73,19,75,34,33,27,162,27,162,18,32,38,39,40,41,42,43,42,48,78,84,50,51,44,46,76,49,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,45,45,45,45,32,32,32,32,32,32,32,65,7,35,69,38,39,40,71,41,42,43,47,58,72,55,73,74,34,51,18,45,57,32,32,32,57,32,32,45,32,57,32,18,18,32,18,57,60,83,32,32,32,47,58,55,73,32,18,45,18,84,32,18,18,18,32,18,45,45,71,32,32,51,18,51,18,32,32,32,44,18,52,32,45,32,32,32,32,32,32,32,32,51,18,45,45,45,45,104,32,104,32,45,57,32,84,32,84,32,57,32,32,32,32,32,32,32,32,45,45,45,45,83,32,57,32,51,18,18,18,18,18,32,18,32,111,123,65,70,18,32,38,39,42,43,71,42,43,4,19,18,105,32,32,32,48,105,18,32,18,18,18,18,18,18,44,18,18,18,32,42,47,58,42,47,58,32,0,18,18,18,18,18,63,18,18,32,18,32,47,58,18,18,32,0,0,45,32,32,4,19,0,32,0,32,0,0,18,0,0,0,48,18,32,32,45,32,0,71,0,74,48,18,48,18,48,105,46,18,18,32,48,18,18,18,18,18,18,18,18,18,18,18,52,32,32,32,15,18,44,18,45,18,32,18,32,18,71,32,18,71,18,71,71,0,0,71,71,71,32,18,0,32,45,45,32,45,44,18,18,32,18,164,81,81,18,18,7,61,35,18,44,18,18,44,18,18,44,18,18,18,44,18,18,32,0,71,18,48,46,18,18,32,32,32,46,18,32,32,32,32,18,18,32,18,72,71,0,32,32,65,32,18,4,19,32,32,18,48,51,44,46,18,18,18,18,18,18,18,18,18,32,18,32,18,63,18,37,18,32,32,32,32,45,18,18,47,58,47,58,71,45,45,45,58,58,165,58,58,71,48,105,46,18,18,18,32,48,46,18,18,18,71,71,0,18,18,0,67,63,18,18,161,0,45,0,71,42,43,46,18,32,18,42,43,32,72,75,18,32,18,103,104,52,18,32,32,32,32,18,4,41,42,43,72,55,73,19,71,42,18,18,48,18,18,18,32,32,32,32,32,18,18,18,18,58,58,58,58,71,71,18,18,18,18,46,18,18,71,71,18,18,32,32,18,45,32,18,45,18,18,18,47,58,55,73,18,44,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,45,18,18,18,18,71,72,18,48,105,18,32,48,18,58,44,18,18,58,18,18,42,42,18,18,18,47,58,18,45,18,18,42,45,18,18,18,48,18,18,71,18,18,18,18,32,32,71,71,71,71,18,71,18,18,71,18,18,18,47,18,18,18,18,18,18,18,18,18,45,18,18,32,45,18,45,45,45,71,18,18,18,18,47,58,18,47,58,0,18,0,0,18,45,45,45,45,0,48,50,51,46,18,18,18,18,18,0,18,18,57,18,32,47,58,18,18,32,32,44,18,47,58,47,58,32,18,32,32,72,32,32,18,32,18,32,18,32,0,18,18,18,0,0,18,18,45,83,18,18,32,4,38,39,40,41,41,42,42,43,19,4,38,39,40,41,41,42,42,43,19,32,18,32,18,32,0,18,0,48,18,18,18,0,0,32,4,19,0,32,18,32,45,18,45,45,45,18,32,18,0,18,18,18,32,18,106,45,0,18,32,75,32,32,32,73,67,35,73,32,7,61,71,23,35,18,45,32,7,61,67,4,35,68,36,1,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,18,58,72,7,73,48,52,18,32,32,18,18,18,18,72,104,32,4,19,44,18,18,47,58,59,47,58,18,18,18,45,71,18,71,32,0,48,18,48,18,48,18,48,18,64,18,45,32,65,66,7,61,67,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,64,18,45,32,65,66,7,61,67,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,32,45,18,32,72,18,18,72,64,18,45,32,65,66,7,61,67,4,35,68,36,1,69,70,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,19,74,75,34,33,31,8,2,5,29,30,17,14,16,20,25,24,11,9,23,12,15,21,13,28,22,103,32,0,64,18,18,18,18,32,18,32,32,32,4,19,106,52,76,45,32,32,32,32,32,32,45,45,0,18,45,32,66,7,35,68,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,74,75,34,33,15,18,85,63,18,0,67,51,18,32,32,3,18,0,32,32,32,0,63,18,18,18,63,18,40,48,51,105,46,63,18,18,18,18,18,18,18,18,32,32,32,47,58,55,73,47,7,47,50,51,18,18,63,18,32,50,51,63,18,18,18,104,32,50,51,18,18,32,51,18,18,63,18,47,58,104,32,32,32,53,32,18,47,58,47,58,47,58,18,104,32,18,18,18,18,18,45,32,7,35,68,69,26,3,38,39,40,71,41,42,43,47,58,72,55,73,6,74,75,34,33,15,18,18,77,32,0,46,18,46,18,18,32,32,18,47,58,38,39,40,41,41,42,43,59,59,59,47,58,38,39,40,41,41,42,43,75,18,18,18,0,18,18,18,18,0,0,39,40,43,0,0,0,0,0,0,0,166,167,0,166,0,168,0,166,0,169,168,168,169,0,0,0,0,167,0,170,166,170,170,170,170,171,172,170,166,166,166,166,166,166,166,172,170,171,173,166,174,169,175,168,167,172,170,171,173,166,174,169,175,168,167,172,176,170,170,172,172,170,170,170,170,170,166,169,168,167,166,169,168,167,166,176,166,170,170,166,172,171,171,175,171,175,170,166,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,175,166,166,168,167,166,172,170,172,170,171,166,166,166,166,166,174,169,175,168,167,172,170,171,173,166,174,169,169,169,175,168,167,170,166,166,166,166,170,170,173,166,168,167,170,174,172,172,166,166,166,172,170,171,173,166,174,169,175,168,167,166,170,170,166,0,170,170,170,166,170,170,170,166,174,172,166,170,174,170,170,170,170,170,170,170,176,166,170,170,175,170,170,174,170,170,170,170,170,166,177,170,170,170,166,166,170,166,166,169,168,167,166,170,170,172,170,171,173,166,174,169,175,168,167,172,170,171,173,166,174,169,175,168,167,172,170,171,173,166,174,169,175,168,167,166,172,172,170,170,176,176,178,179,180,180,0,0,180,176,180,176,180,176,180,180,176,180,180,176,180,176,180,180,176,180,176,180,176,180,176,180,176,180,176,176,10,10,181,0,17,10,0,17,17,17,17,17,17,17,10,10,10,182,0,183,183,0,10,10,0,0,17,181,10,10,17,182,0,184,10,183,182,181,184,10,183,182,181,108,184,10,183,182,181,184,10,183,182,181,10,108,108,184,10,183,182,181,184,10,183,182,181,184,184,10,183,182,181,108,108,108,108,108,108,108,108,108,108,10,183,182,181,108,108,10,10,184,10,183,182,181,184,108,108,108,184,108,0,108,108,108,108,184,10,10,184,10,183,182,181,184,10,183,182,181,184,10,183,182,181,184,10,183,182,181,10,108,10,184,0,0,109,109,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,93,93,93,93,93,93,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,185,185,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,111,110,185,185,185,185,185,185,110,185,110,185,111,185,185,110,185,111,110,185,185,185,185,185,185,185,185,185,185,0,0,0,0,186,186,186,186,186,186,186,186,186,186,186,186,0,186,186,186,0,0,187,188,187,188,187,188,187,188,187,188,187,188,187,188,187,188,0,0,113,113,113,113,0,113,113,0,114,0,0,189,189,0,0,189,189,189,189,189,86,86,86,189,189,189,86,86,86,86,86,86,86,86,86,189,86,189,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,189,189,189,189,86,86,86,86,86,0,0,190,191,190,191,190,191,190,190,190,191,190,191,190,190,190,191,190,190,190,190,191,190,191,190,191,190,190,0,190,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,193,0,0,193,193,193,193,193,59,59,193,193,193,193,193,193,193,193,59,193,59,59,59,193,59,193,59,193,193,193,193,59,59,193,193,193,59,193,193,193,193,193,193,59,193,59,193,193,193,193,59,193,59,59,193,193,193,193,59,193,193,59,59,193,59,193,193,193,193,59,59,193,193,193,193,59,193,59,193,59,193,59,193,59,59,59,193,59,59,59,59,59,0,194,194,194,194,0,0,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,195,195,196,196,195,195,196,196,195,0,195,197,195,195,195,196,197,195,196,196,0,195,196,196,197,0,0,198,198,195,196,198,197,195,196,198,197,195,196,198,197,195,196,198,197,198,195,196,195,196,198,197,195,196,198,197,195,195,196,196,198,197,197,195,196,198,195,196,198,195,196,198,197,198,195,196,198,198,195,196,198,195,196,198,197,195,196,198,197,195,196,198,197,195,196,198,197,195,196,198,198,198,195,196,198,0,0,0,0,0,0,199,0,200,200,0,0,0,0,140,200,0,0,200,201,201,202,203,204,200,200,0,0,0,0,0,0,0,199,200,0,0,201,201,202,203,204,101,139,205,205,139,132,132,132,131,132,133,134,139,133,134,206,207,208,209,200,201,202,203,199,204,205,206,207,208,209,200,201,202,203,199,204,205,132,101,206,207,208,200,201,202,203,199,204,206,207,208,200,201,202,203,199,204,139,139,101,139,0,0,133,134,209,139,133,134,205,205,205,205,205,205,206,207,208,200,201,202,203,199,204,101,101,205,101,101,206,207,208,209,200,201,202,203,199,204,205,205,101,206,207,208,209,200,201,202,203,199,204,205,131,131,0,205,134,133,133,133,133,200,201,202,203,199,204,133,134,101,206,209,206,209,206,207,208,209,200,201,202,203,199,204,205,134,133,134,133,131,132,133,134,205,205,139,207,207,139,139,205,133,140,206,207,208,131,132,140,141,205,205,133,134,101,132,132,133,134,101,94,132,133,134,101,132,140,141,101,205,101,140,140,101,101,101,205,101,101,208,101,101,101,101,208,205,134,101,101,101,101,133,134,134,101,101,133,134,134,101,101,101,141,140,141,141,206,207,208,200,201,202,203,199,204,132,206,207,208,209,200,201,202,203,199,204,205,206,207,208,209,200,201,202,203,199,204,205,206,207,208,209,200,201,202,203,199,204,205,205,205,206,209,0,133,134,133,134,206,209,140,140,141,210,210,0,211,0,211,0,210,211,212,212,212,212,211,210,212,211,210,212,211,210,211,210,212,212,212,212,212,212,212,212,211,210,212,211,210,212,211,210,212,212,211,210,212,212,212,212,211,210,212,212,212,212,212,212,212,212,212,212,212,212,212,211,210,212,211,210,212,211,210,212,211,210,212,212,212,0,0,213,214,214,214,213,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,0,213,214,213,0,214,213,214,214,215,213,216,214,214,215,215,214,214,214,213,0,0,0,0,214,215,0,214,214,215,0,213,214,213,0,0,215,213,213,215,217,218,219,217,218,220,221,216,215,213,214,219,217,218,220,221,216,215,213,214,219,219,217,218,220,221,219,217,218,220,221,219,0,221,216,215,213,214,219,217,219,221,219,220,217,218,220,221,219,218,221,217,218,218,220,221,216,215,213,214,219,219,218,217,218,221,219,217,218,221,219,217,218,220,221,216,215,213,214,219,219,218,221,216,215,213,214,217,221,218,221,217,217,218,218,0,0,218,221,218,221,217,218,220,221,219,217,218,220,221,216,215,213,214,219,217,218,220,221,216,215,213,214,219,217,218,220,221,216,215,213,214,219,217,218,221,219,219,216,215,213,214,220,218,217,218,221,219,222,222,223,0,222,222,222,222,222,0,0,223,0,0,224,224,0,222,222,222,222,222,223,223,224,223,223,222,222,222,223,222,222,222,222,222,222,222,222,222,222,222,223,222,222,0,0,223,0,0,222,223,223,224,137,223,223,223,223,223,223,223,223,225,226,227,223,224,222,225,226,227,223,224,222,225,226,227,223,224,222,225,226,227,223,224,222,223,223,223,225,226,227,223,223,225,226,227,223,224,222,223,138,138,226,225,226,227,223,223,223,223,223,224,222,225,226,227,225,226,227,223,224,222,222,223,223,223,226,223,225,137,138,223,224,222,225,225,226,227,225,226,227,223,223,223,225,226,227,223,224,222,223,223,137,227,226,227,223,138,138,223,223,227,137,223,137,227,223,223,223,223,225,227,225,226,227,223,224,222,223,225,226,227,223,224,222,225,226,227,223,224,222,225,226,227,223,224,222,223,225,226,227,138,225,226,227,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,0,0,229,230,231,231,232,232,0,0,228,228,228,228,228,229,229,229,229,229,229,229,229,229,229,233,234,0,235,0,0,0,228,228,228,228,228,228,228,228,228,228,228,230,236,0,0,229,229,0,0,0,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,234,0,0,0,0,237,237,237,237,0,0,0,0,0,0,235,236,236,236,236,236,238,233,232,238,229,228,233,230,232,239,237,231,231,231,232,238,0,236,0,233,0,229,229,228,228,228,228,228,228,228,228,0,0,0,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,239,239,0,0,228,234,229,229,229,229,229,229,229,0,0,0,0,229,229,229,228,0,228,239,239,239,239,239,239,239,239,0,240,241,236,234,238,242,243,236,234,238,236,234,238,236,234,238,236,234,238,236,234,238,236,234,238,236,234,238,244,236,234,243,238,245,242,235,246,247,248,249,240,229,228,233,230,232,250,251,252,239,237,231,241,244,236,234,243,238,245,242,235,246,247,248,249,240,229,228,233,230,232,250,251,252,239,237,231,241,245,236,234,243,238,245,242,235,246,247,249,229,228,233,230,232,250,251,252,239,237,231,241,236,234,243,238,245,242,235,246,247,249,229,228,233,230,232,250,251,252,239,237,231,241,236,234,238,249,246,246,236,234,238,236,234,238,242,243,245,242,246,247,249,236,234,238,246,244,236,234,238,236,234,243,238,245,247,249,229,228,233,230,232,239,237,231,236,234,238,252,245,243,244,236,236,236,236,236,234,234,234,234,234,243,238,238,238,238,238,245,242,235,246,247,248,249,229,228,233,230,232,250,251,252,239,237,231,241,245,245,242,246,247,245,244,236,234,243,238,245,242,235,246,247,248,249,249,249,240,229,228,233,230,232,250,251,252,239,237,231,241,236,234,238,236,234,238,236,234,238,243,242,242,236,234,238,236,234,238,229,228,233,230,232,239,237,231,250,242,246,247,242,247,236,234,243,245,242,246,247,236,234,243,245,242,246,247,236,234,238,236,234,238,236,234,238,244,236,234,243,238,245,242,235,246,247,248,249,240,229,228,233,230,232,250,251,252,239,237,231,241,236,234,238,236,234,238,245,242,242,247,249,243,249,235,236,234,238,247,249,244,245,242,249,244,245,236,234,238,243,252,236,234,238,249,249,242,247,236,234,238,242,247,246,236,234,238,244,244,242,247,243,236,234,238,236,234,238,236,234,238,242,236,234,243,238,245,242,235,246,247,249,229,228,233,230,232,250,251,252,239,237,231,241,236,234,238,244,236,234,243,238,245,242,235,246,247,248,249,240,229,228,233,230,232,250,251,252,239,237,231,241,244,236,234,243,238,245,242,235,246,247,248,249,240,229,228,233,230,232,250,251,252,239,237,231,241,244,236,234,243,238,245,242,235,246,247,248,249,240,229,228,233,230,232,250,251,252,239,237,231,241,236,234,238,236,234,243,245,242,246,247,250,236,234,243,245,242,246,247,251,245,251,245,242,247,245,245,253,254,253,254,255,255,0,0,256,256,256,256,256,256,256,256,256,256,255,256,255,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,255,256,255,255,255,256,256,256,256,256,256,256,256,256,255,256,256,255,255,0,256,256,256,0,256,256,256,256,0,256,256,256,256,255,256,255,0,256,255,256,257,258,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,259,0,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,0,82,82,82,82,82,82,82,82,82,82,0,82,82,82,82,82,82,0,82,82,82,82,82,82,82,259,259,0,259,0,260,261,261,0,261,0,0,0,260,261,261,262,0,261,261,262,115,62,115,62,261,262,260,62,261,262,260,115,62,62,62,261,262,260,62,261,262,260,115,115,115,115,115,115,115,62,261,262,260,115,115,115,62,261,262,260,62,261,262,260,115,115,115,115,115,115,115,115,115,115,115,115,115,261,262,260,115,115,62,62,62,261,262,260,115,115,115,115,115,62,62,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,62,261,262,260,115,62,261,262,260,62,261,262,260,62,261,262,260,115,62,115,115,62,263,0,0,263,116,116,116,263,263,116,263,263,116,116,116,116,116,116,116,116,116,263,116,116,263,263,116,116,116,263,116,116,263,116,116,116,116,116,116,116,116,116,116,263,263,263,263,116,0,0,0,264,265,265,0,0,0,0,264,266,265,264,266,265,264,266,265,264,266,265,0,0,264,0,0,0,0,0,0,266,264,266,265,0,264,266,265,264,264,264,264,264,264,264,266,266,265,265,0,264,264,264,266,265,266,0,0,0,0,264,266,266,0,0,0,0,0,264,0,0,0,0,0,264,266,265,264,266,265,264,266,265,264,266,265,264,264,0,0,267,0,0,268,268,268,0,267,0,0,269,267,270,270,270,267,0,270,271,270,271,270,271,270,271,268,267,270,271,270,271,0,269,267,267,267,267,267,267,267,267,267,272,270,271,269,268,267,272,270,271,269,268,272,267,272,270,271,269,268,267,272,270,271,269,268,267,267,272,267,272,272,267,272,272,267,267,272,270,271,269,268,267,272,267,267,267,267,267,272,270,271,269,268,267,272,270,271,269,268,272,267,267,267,267,272,272,272,272,272,267,269,268,272,272,272,272,272,272,272,272,272,267,267,267,267,272,270,271,269,268,272,272,267,267,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,267,272,272,272,272,272,267,267,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,267,272,272,272,272,272,272,272,267,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,267,267,267,272,267,272,270,271,269,268,267,272,272,272,267,272,270,271,269,268,267,272,270,271,269,268,267,272,270,271,269,268,267,272,272,0,0,0,0,0,0,0,0,0,0,0,9,11,0,24,0,9,0,11,9,11,24,24,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,273,0,12,274,274,12,275,275,275,0,275,23,273,0,23,23,0,274,276,275,275,275,0,274,275,0,0,276,0,23,118,118,118,118,118,118,118,118,118,274,118,118,118,118,118,274,274,274,274,274,274,274,277,278,274,276,273,275,277,278,274,276,273,275,118,118,274,276,273,275,274,276,273,275,118,274,274,118,118,277,278,118,118,274,118,118,118,118,118,118,277,278,118,274,277,278,118,118,118,118,118,274,274,276,273,275,274,118,277,274,274,274,274,274,276,273,275,277,278,274,276,273,275,275,274,274,274,274,118,118,118,118,118,118,274,276,273,275,118,274,118,274,274,277,278,274,276,273,275,277,278,274,277,277,118,118,118,274,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,274,277,278,118,118,277,278,274,118,118,118,118,274,278,275,118,118,118,118,118,118,118,118,118,274,118,118,118,118,118,118,118,274,118,118,118,277,278,118,118,274,274,118,274,118,274,276,273,275,118,118,274,118,118,118,277,278,274,276,273,275,277,278,274,276,273,275,277,278,274,276,273,275,274,118,118,118,118,279,279,279,0,279,279,279,279,279,279,279,279,279,279,0,279,279,279,279,0,0,0,119,280,280,280,280,119,119,119,119,280,119,119,119,280,280,280,280,119,119,119,119,280,119,119,119,280,119,119,280,119,280,280,280,281,281,281,0,0,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,87,281,281,281,281,281,281,87,281,87,87,281,87,87,281,281,87,281,87,281,87,281,281,281,281,281,281,281,281,281,12,12,15,15,15,23,23,23,15,15,0,0,0,0,15,23,282,282,0,282,282,282,282,282,282,0,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,0,282,282,282,282,282,282,282,282,282,282,282,282,282,0,282,282,282,282,282,282,282,282,282,282,282,282,283,283,92,92,92,92,92,283,283,284,283,284,282,283,284,282,283,282,282,284,284,283,284,283,284,282,283,284,282,283,284,282,282,283,284,282,284,283,284,283,0,283,284,284,284,283,283,283,283,283,284,284,282,283,284,282,283,284,282,283,284,282,283,0,0,0,120,120,120,120,120,0,0,285,285,0,0,285,0,0,285,285,0,285,285,286,287,288,285,286,287,288,285,81,286,287,288,285,286,287,288,285,289,81,81,81,81,289,289,287,288,285,286,287,288,285,286,287,288,285,81,81,285,286,287,288,286,287,288,289,289,290,81,81,286,287,288,285,286,287,288,81,286,287,81,81,81,286,287,288,286,286,286,287,287,288,81,81,81,81,81,81,81,81,286,287,289,289,286,289,289,286,286,81,81,81,81,81,81,81,286,287,288,285,81,81,286,287,288,285,286,287,288,285,286,287,288,285,289,289,286,287,288,286,287,288,81,289,289,291,0,291,291,292,292,291,291,0,291,293,291,0,292,292,293,293,291,292,293,291,292,293,293,291,292,293,291,292,293,293,293,293,293,293,291,292,293,291,292,293,291,292,293,291,292,293,293,293,293,293,291,292,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,291,292,293,293,291,292,293,291,292,293,291,292,293,293,293,293,293,293,293,294,295,0,0,0,294,295,0,0,294,295,0,0,0,296,294,295,296,294,295,130,296,294,295,296,294,295,128,296,296,295,130,130,130,128,296,294,295,296,296,294,294,294,294,295,295,129,296,296,130,130,296,294,295,128,130,130,130,130,130,130,130,128,129,296,128,128,130,296,294,295,296,294,295,296,294,295,128,129,294,296,294,295,0,130,130,296,296,297,298,299,300,0,301,301,301,301,301,301,301,301,301,301,301,300,0,300,300,300,300,300,300,300,300,300,301,300,301,300,301,300,301,300,300,300,300,300,300,301,300,300,300,300,300,300,301,300,301,300,300,300,300,300,301,300,300,300,300,301,300,300,300,300,300,300,300,300,300,300,300,301,300,300,301,300,301,300,301,300,0,0,0,29,30,0,29,30,30,0,0,62,161,85,161,85,62,161,85,161,85,85,85,161,85,85,161,85,161,85,85,85,85,161,85,85,161,85,161,85,161,85,85,161,161,85,161,85,161,85,161,85,85,85,85,302,303,302,303,0,0,0,303,302,303,303,302,303,0,302,303,302,304,303,302,304,303,302,304,303,302,304,303,304,304,304,302,304,303,302,304,303,88,302,304,303,304,303,88,302,304,303,88,88,88,302,304,88,0,88,304,302,304,303,302,304,303,302,304,303,88,88,302,304,303,88,88,305,306,307,308,305,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,309,0,0,0,0,310,311,309,311,312,313,311,314,311,314,314,314,313,313,313,312,146,149,147,148,314,312,311,311,314,311,314,0,311,314,311,98,311,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,313,0,313,98,98,98,98,314,314,314,311,314,311,314,311,314,314,0,0,0,0,315,313,315,315,316,315,316,316,313,313,313,315,316,315,315,316,315,316,315,316,316,316,316,316,313,313,315,316,315,316,315,316,315,0,0,317,318,317,318,0,318,318,0,0,121,121,121,317,318,317,318,121,317,318,317,318,317,318,317,318,317,318,121,121,317,318,121,121,121,317,318,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,317,318,317,318,317,318,317,318,121,0,0,0,319,320,320,320,321,321,319,0,319,320,321,319,320,321,122,122,319,320,321,319,320,321,122,122,122,319,320,321,122,122,122,122,122,319,320,321,319,320,321,122,122,122,122,122,319,320,321,122,122,122,122,319,320,321,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,319,320,321,319,320,321,319,320,321,319,320,321,122,122,122,0,322,0,0,322,322,322,322,322,322,322,322,322,322,323,322,323,322,322,322,322,322,322,322,323,323,322,323,322,323,322,322,323,322,322,322,322,322,323,322,322,322,322,322,322,322,322,322,323,322,322,322,322,323,322,322,322,322,322,322,322,322,322,323,322,323,322,323,322,322,0,0,324,0,325,0,326,327,328,327,325,325,0,0,0,325,329,330,0,327,331,326,326,326,330,330,332,0,0,0,0,0,0,329,327,0,0,0,327,333,328,334,334,334,329,324,335,329,327,0,0,334,336,325,324,327,324,0,0,0,0,0,0,0,0,335,0,331,0,0,331,329,327,330,329,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,333,334,336,325,0,0,324,332,330,327,145,337,96,144,96,144,338,102,339,324,143,102,340,96,340,339,339,324,324,324,324,324,324,324,341,342,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,144,142,343,344,340,342,324,345,339,337,341,332,334,336,329,335,338,328,326,331,330,333,327,325,343,344,340,342,324,345,339,337,341,332,334,336,329,335,338,328,326,331,330,333,327,325,324,96,342,345,324,347,324,145,96,96,342,324,345,339,337,341,332,334,336,329,338,328,330,333,327,325,142,142,340,143,324,343,142,79,79,79,79,347,324,142,340,340,340,343,342,324,345,339,337,341,332,334,336,329,335,328,326,331,330,333,327,325,96,96,324,142,102,142,343,344,340,342,324,324,324,324,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,142,95,96,96,142,96,344,95,96,95,96,95,96,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,324,324,324,324,143,143,143,143,340,340,143,95,96,340,342,324,332,334,336,329,335,328,326,331,330,333,327,325,143,95,79,96,340,339,95,96,79,143,346,343,344,340,342,345,339,337,341,343,344,340,342,345,339,337,341,324,347,324,347,324,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,324,324,96,346,143,95,340,96,143,340,96,143,143,96,143,79,143,143,345,107,343,324,345,337,341,142,144,145,95,79,96,102,97,344,342,339,337,341,324,342,143,142,142,324,144,144,338,145,144,337,341,343,97,324,145,96,96,324,142,96,96,142,142,79,142,79,95,96,95,96,95,96,95,96,95,96,95,79,96,95,96,95,96,96,79,144,96,95,79,142,79,96,79,79,79,96,96,96,347,340,95,79,345,337,341,324,324,324,79,96,341,79,79,79,344,341,345,343,344,340,342,324,345,339,337,341,332,334,336,329,335,338,328,326,331,330,333,327,325,96,324,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,79,145,345,343,344,340,342,324,345,339,337,341,346,332,334,336,329,335,338,328,326,331,330,333,327,325,96,324,79,143,340,343,344,340,342,345,339,337,341,107,347,340,339,96,343,344,340,342,345,339,337,341,348,0,348,348,348,348,348,348,348,348,348,348,0,348,348,348,348,349,349,0,0,349,0,0,0,0,350,349,350,349,89,350,349,350,349,89,89,89,89,89,350,349,89,89,350,349,89,350,349,89,89,89,89,89,349,350,349,89,89,89,350,350,89,89,89,89,89,350,89,89,89,350,349,350,349,350,349,350,349,89,89,89,89,89,89,0,0,351,0,0,351,351,351,0,0,100,352,353,352,351,353,352,351,353,352,353,352,353,352,150,353,353,352,353,352,351,353,352,351,351,351,351,351,353,352,353,352,353,352,351,352,353,352,150,100,0,352,353,0,352,353,352,150,150,150,0,0,353,352,353,353,352,351,353,352,351,353,352,351,353,353,352,352,353,353,352,352,354,355,356,355,357,357,358,0,358,358,358,358,358,358,358,358,358,0,358,358,358,0,0,358,358,358,359,359,0,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,0,359,359,0,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,0,359,359,359,359,359,359,359,359,359,359,359,359,359,359,0,360,360,360,360,360,360,360,0,360,360,360,0,360,360,360,360,360,360,0,0,0,0,0,361,361,362,124,362,362,362,0,0,361,124,124,361,361,361,361,361,361,361,124,125,124,125,363,361,362,363,361,362,124,363,361,362,363,361,362,361,124,125,361,361,124,125,361,361,124,363,361,362,361,363,361,361,361,361,361,362,363,361,362,361,361,361,361,124,124,124,124,361,362,124,124,125,361,361,361,363,361,362,361,361,124,125,124,363,361,125,124,361,361,124,125,361,361,361,361,361,124,125,363,361,362,361,363,361,362,363,361,362,363,361,362,361,124,124,0,0,0,0,364,365,366,367,364,365,366,367,364,365,366,364,365,366,367,367,368,90,0,369,369,369,369,369,369,0,0,370,370,369,370,370,370,0,370,370,370,370,370,370,370,370,369,368,369,368,369,368,369,368,90,90,369,368,369,368,369,368,0,90,369,368,90,369,369,369,368,90,0,90,0,90,90,90,90,0,90,0,90,90,90,0,369,368,369,368,369,368,369,368,369,90,90,90,369,90,0,371,370,371,0,369,369,369,369,369,369,0,0,370,370,369,370,371,371,371,370,370,370,370,370,370,370,370,370,370,370,371,370,371,370,371,370,371,0,370,371,370,371,370,371,370,371,370,371,0,370,371,370,371,370,371,370,371,126,0,371,126,127,371,371,371,0,0,127,126,126,127,127,126,127,127,126,126,126,126,127,127,127,126,126,127,127,126,126,126,126,127,0,0,371,0,369,369,369,369,369,369,0,0,370,370,369,370,371,371,371,370,370,370,370,370,370,370,370,370,370,91,0,91,91,0,91],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u8",15]],null,null,[[]],[[]],[[],["bool",15]],[[["pathop",4],["path",6]]],[[]],[[["pathop",4],["path",6]]],[[]],[[]],[[]],[[["isize",3]]],[[["ivector",3]]],[[["size",3]]],[[["vector",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[]],[[["isize",3]]],[[["ivector",3]]],[[["vector",6]]],[[["size",3]]],[[["point3",3]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[]],[[]],[[["option",4]]],[[["path",6]]],[[["path",6]]],[[["path",6]]],[[["matrix",3],["path",6]]],[[["placeholderstyle",3]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[["option",4]]],[[]],[[]],[[]],[[["option",4]]],[[["textshadow",3]]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["imageinfo",6]]],[[["imageinfo",6]]],[[["imageinfo",6]]],[[["imageinfo",6]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3],["scalar",6]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3],["scalar",6]]],[[["font",6],["usize",15]]],[[["font",6],["usize",15]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3],["scalar",6]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3],["scalar",6]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["font",6],["usize",15],["option",4,["rect"]],["rect",3]]],[[["yuvapixmapinfo",6]],["option",4]],[[],["u8",15]],[[],["f32",15]],[[["scalar",6],["region",6]],["option",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["scalar",6]],null,[[]],[[["f32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[["typeface",6]]],[[]],[[["canvas",3]]],[[["paint",6]]],[[["path",6],["path",6]],["bool",15]],[[["path",6]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["rect",3]],[[],["rect",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["scalar",6],["bool",15]]],[[["scalar",6],["bool",15]]],[[["scalar",6],["bool",15]]],[[["scalar",6],["arcsize",4],["pathdirection",4]]],[[["scalar",6],["arcsize",4],["pathdirection",4]]],[[["arcsize",4],["scalar",6],["pathdirection",4]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[],["bool",15]],[[],["i64",15]],[[["f32",15],["bool",15]],[["option",4,["blender"]],["blender",6]]],[[],["option",4]],[[["f32",15],["bool",15]],[["option",4,["blender"]],["blender",6]]],[[],[["dashinfo",3],["option",4,["dashinfo"]]]],[[]],[[]],[[]],[[]],[[]],[[],[["blendmode",4],["option",4,["blendmode"]]]],[[]],[[]],[[],["option",4]],[[],[["directcontext",6],["option",4,["directcontext"]]]],[[],[["option",4,["dxgi_format"]],["dxgi_format",6]]],[[],["format",4]],[[],["image",6]],[[],["image",6]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["irect",3]],[[],["rect",3]],[[]],[[]],[[],["str",15]],[[],[["format",4],["option",4,["format"]]]],[[["path",6]],[["path",6],["option",4,["path"]]]],[[],[["path",6],["option",4,["path"]]]],null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["cstr",3]],[[["usize",15]],["cstr",3]],[[["usize",15]]],[[["usize",15]]],null,[[],["u8",15]],[[],["u8",15]],null,null,null,null,[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendformat",6]],[[],["backendformat",6]],[[],["backendformat",6]],[[],["backendformat",6]],[[["bool",15]],["option",4]],[[],[["option",4,["paint"]],["paint",6]]],[[["option",4,["bbhfactory"]],["bbhfactory",6]],["canvas",3]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["blendmode",4]],[[["blendmode",4]],["blendmode",4]],[[],[["option",4,["blender"]],["blender",6]]],null,[[["blurstyle",4],["scalar",6]],["option",4]],[[],["option",4]],[[["blurstyle",4],["scalar",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["optioni32",15]],[[],["scalar",6]],null,null,null,[[],["irect",3]],[[],["irect",3]],[[],["irect",3]],[[],["rect",3]],[[],["irect",3]],[[],["irect",3]],[[],["irect",3]],[[],["rect",3]],[[],["irect",3]],[[],["rect",3]],[[],["rect",3]],[[],["rect",3]],[[],["irect",3]],[[],["rect",3]],[[],["irect",3]],[[],["paragraph",6]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["canvas",3]],[[],["canvas",3]],[[],["canvas",3]],[[],["cap",4]],null,[[],["point",3]],[[],["scalar",6]],[[],["scalar",6]],[[],["u32",15]],[[],[["option",4,["surfacecharacterization"]],["surfacecharacterization",6]]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[],["color",3]],[[],["rgb",3]],[[],["hsv",3]],[[],["colorchannelflag",3]],[[],["color4f",3]],[[],["colorspaceprimaries",3]],[[],["colorspacetransferfn",3]],[[],["xyzd50hash",3]],[[],["cubicmap",3]],[[],["textencoding",4]],[[],["colortype",4]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[],["m44",3]],[[],["ipoint",3]],[[],["point",3]],[[],["point3",3]],[[],["irect",3]],[[],["rect",3]],[[],["rsxform",3]],[[],["isize",3]],[[],["size",3]],[[],["pixelgeometry",4]],[[],["surfacepropsflags",3]],[[]],[[],["datetime",3]],[[],["fourbytetag",3]],[[],["budgeted",3]],[[],["skalphatype",4]],[[],["skyuvcolorspace",4]],[[],["skcolorchannel",4]],[[],["skencodedimageformat",4]],[[],["skfiltermode",4]],[[],["skmipmapmode",4]],[[],["skcodec_result",4]],[[],["skblendmode",4]],[[],["skblendmodecoeff",4]],[[],["skclipop",4]],[[],["skfonthinting",4]],[[],["skpaint_style",4]],[[],["skpaint_cap",4]],[[],["skpaint_join",4]],[[],["skpathfilltype",4]],[[],["skpathdirection",4]],[[],["skpathverb",4]],[[],["skcoveragemode",4]],[[],["sktilemode",4]],[[],["skblurstyle",4]],[[],["skpathop",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fontarguments",3]],[["typeface",6],["option",4,["typeface"]]]],[[["pixelgeometry",4]]],[[]],[[]],[[]],[[["colorchannelflag",3]],["ordering",4]],[[["surfacepropsflags",3]],["ordering",4]],null,[[["usize",15]],["v4",3]],[[]],[[],["color",3]],[[],["color",3]],[[],["color4f",3]],null,[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["option",4]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],null,[[],["colorinfo",6]],[[],["colorinfo",6]],null,null,[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],[["option",4,["colorspace"]],["colorspace",6]]],[[],["colorspace",6]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],null,[[],["option",4]],[[],["option",4]],[[["v4",3]]],[[["coveragemode",4]]],[[["irect",3],["region",6],["regionop",4]]],[[["region",6],["regionop",4]]],[[["irect",3],["regionop",4],["region",6]]],[[["coveragemode",4]]],[[]],[[]],[[]],[[],["patheffect",6]],[[],["option",4]],[[]],[[],["option",4]],[[["compressiontype",4]],["backendformat",6]],[[["compressiontype",4]],["backendformat",6]],[[],["rect",3]],[[],["rect",3]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["rect",3]],[[["f32",15]],["point",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["rect",3]],[[["option",4]],["usize",15]],[[["option",4]],["usize",15]],[[["f32",15]],["f32",15]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[],["bool",15]],[[]],[[],["bool",15]],[[["region",6]],["bool",15]],[[["irect",3]],["bool",15]],[[["ipoint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["irect",3]],["bool",15]],[[["ipoint",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["point",3]],["bool",15]],[[["rect",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ipoint",3]],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],null,null,[[["scalar",6],["usize",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["fonttabletag",6]],[["option",4,["data"]],["data",6]]],[[["scalar",6]],["option",4]],null,[[],["usize",15]],[[],["usize",15]],[[],["i32",15]],[[],["i32",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["textencoding",4]],["usize",15]],[[],["usize",15]],[[],["scalar",6]],[[]],[[["vector",6]],["scalar",6]],[[]],[[],["scalar",6]],[[]],null,[[]],[[]],[[]],[[],["rect",3]],[[],["rect",3]],[[],["font",6]],[[],["cstr",3]],[[],["u8",15]],[[],["fourbytetag",3]],[[],["u8",15]],null,[[],[["option",4,["textureresourceinfo"]],["textureresourceinfo",3]]],[[],[["option",4,["textureresourceinfo"]],["textureresourceinfo",3]]],[[["scalar",6]],["option",4]],null,[[],["datatype",4]],[[],["datatype",4]],null,null,[[]],[[]],[[],["decoration",3]],[[],["decoration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["color",3]],[[]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[]],[[],["ipoint",3]],[[],["point",3]],[[],["point3",3]],[[],["irect",3]],[[],["rect",3]],[[],["isize",3]],[[],["size",3]],[[]],[[]],[[]],[[],["fourbytetag",3]],[[],["skyuvcolorspace",4]],[[],["skblendmode",4]],[[],["skclipop",4]],[[],["skpaint_cap",4]],[[],["skpaint_join",4]],[[],["skpathdirection",4]],[[],["sktilemode",4]],[[],["skblurstyle",4]],[[["colortype",4],["renderable",4]],["backendformat",6]],[[],[["typeface",6],["option",4,["typeface"]]]],[[["fontstyle",3],["unichar",6]],[["typeface",6],["option",4,["typeface"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4]],[[],["colorspace",6]],[[["data",6]],[["path",6],["option",4,["path"]]]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],["colorspace",6]],[[],["option",4]],[[],[["deferreddisplaylist",6],["option",4,["deferreddisplaylist"]]]],[[],["path",6]],[[],["vertices",6]],[[],["path",6]],[[],[["deferreddisplaylist",6],["option",4,["deferreddisplaylist"]]]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],["data",6]],[[],[["stream",3,["skstreamasset"]],["skstreamasset",3]]],[[],["bool",15]],[[]],[[]],[[],["option",4]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[]],[[["scalar",6]],["option",4]],null,[[["scalar",6]],["option",4]],[[],["scalar",6]],[[],["scalar",6]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],null,[[],["scalar",6]],[[],["scalar",6]],[[["vector",6]],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[["backenddrawableinfo",6]]],[[["canvas",3],["option",4,["paint"]],["paint",6]]],[[["canvas",3],["option",4,["matrix"]],["matrix",3]]],[[["canvas",3]]],[[],["bool",15]],[[],["bool",15]],[[],["drawoptions",4]],null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["data",6]],[[["bool",15]],["data",6]],[[]],[[]],null,[[],["edging",4]],[[],["textalign",4]],[[],["str",15]],[[],["bool",15]],[[]],[[]],[[]],[[["usize",15],["datatype",4]]],[[]],null,[[["usize",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[["usize",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[["usize",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[["usize",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[]],[[["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[["i32",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[],[["option",4,["data"]],["data",6]]],[[],[["option",4,["data"]],["data",6]]],[[],[["option",4,["data"]],["data",6]]],[[],["encodedimageformat",4]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["color",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["colorchannelflag",3]],["bool",15]],[[["color4f",3]],["bool",15]],[[["colorspaceprimaries",3]],["bool",15]],[[["colorspacetransferfn",3]],["bool",15]],[[["xyzd50hash",3]],["bool",15]],[[["textencoding",4]],["bool",15]],[[["colortype",4]],["bool",15]],[[["v2",3]],["bool",15]],[[["v3",3]],["bool",15]],[[["v4",3]],["bool",15]],[[],["bool",15]],[[["ipoint",3]],["bool",15]],[[["point",3]],["bool",15]],[[["point3",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["rsxform",3]],["bool",15]],[[["isize",3]],["bool",15]],[[["size",3]],["bool",15]],[[["pixelgeometry",4]],["bool",15]],[[["surfacepropsflags",3]],["bool",15]],[[],["bool",15]],[[["datetime",3]],["bool",15]],[[["fourbytetag",3]],["bool",15]],[[["budgeted",3]],["bool",15]],[[["skalphatype",4]],["bool",15]],[[["skyuvcolorspace",4]],["bool",15]],[[["skcolorchannel",4]],["bool",15]],[[["skencodedimageformat",4]],["bool",15]],[[["skfiltermode",4]],["bool",15]],[[["skmipmapmode",4]],["bool",15]],[[["skcodec_result",4]],["bool",15]],[[["skblendmode",4]],["bool",15]],[[["skblendmodecoeff",4]],["bool",15]],[[["skclipop",4]],["bool",15]],[[["skfonthinting",4]],["bool",15]],[[["skpaint_style",4]],["bool",15]],[[["skpaint_cap",4]],["bool",15]],[[["skpaint_join",4]],["bool",15]],[[["skpathfilltype",4]],["bool",15]],[[["skpathdirection",4]],["bool",15]],[[["skpathverb",4]],["bool",15]],[[["skcoveragemode",4]],["bool",15]],[[["sktilemode",4]],["bool",15]],[[["skblurstyle",4]],["bool",15]],[[["skpathop",4]],["bool",15]],[[],["bool",15]],[[["textstyle",6]],["bool",15]],[[["i32",15]],["bool",15]],[[["scalar",6]],["bool",15]],[[["i32",15]],["bool",15]],[[["scalar",6]],["bool",15]],[[["textstyle",6]],["bool",15]],[[]],[[["option",4,["irect"]],["irect",3]],["bool",15]],[[]],[[["option",4,["irect"]],["irect",3]],["bool",15]],[[["option",4,["irect"]],["irect",3]],["bool",15]],[[["option",4,["irect"]],["irect",3]],["bool",15]],[[["u8",15]]],[[["u8",15]]],[[]],[[]],[[["option",4,["colorspace"]],["colorspace",6],["irect",3],["option",4,["irect"]]],["bool",15]],[[["option",4,["colorspace"]],["colorspace",6],["irect",3],["option",4,["irect"]]],["bool",15]],[[],["option",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["extensions",6]],[[],["extensions",6]],[[["option",4,["paint"]],["paint",6]],[["option",4,["ipoint"]],["ipoint",3]]],[[["option",4,["paint"]],["paint",6]],[["option",4,["ipoint"]],["ipoint",3]]],[[],["bool",15]],[[],[["option",4,["pixmap"]],["pixmap",6]]],[[],[["option",4,["pixmap"]],["pixmap",6]]],[[],["bool",15]],null,[[],[["option",4,["fontmgr"]],["fontmgr",6]]],[[["usize",15]],["string",3]],[[["usize",15]],["string",3]],[[],["str",15]],[[],["string",3]],[[]],[[]],[[],["pathfilltype",4]],[[],["pathfilltype",4]],[[],["pathfilltype",4]],null,[[["mapdirection",4],["matrix",3]],["irect",3]],[[],["color",3]],[[["colorspace",6],["option",4,["colorspace"]]],["color4f",3]],[[["strokerec",6],["path",6]],["option",4]],[[["path",6],["strokerec",6],["path",6]],["bool",15]],[[["path",6],["path",6],["matrix",3],["strokerec",6]],["bool",15]],[[],[["option",4,["child"]],["child",6]]],[[],[["uniform",6],["option",4,["uniform"]]]],[[["fontstyle",3]],[["typeface",6],["vec",3,["typeface"]]]],[[],[["uniform",6],["option",4,["uniform"]]]],[[],[["option",4,["drawable"]],["drawable",6]]],[[["rect",3],["option",4,["rect"]]],[["picture",6],["option",4,["picture"]]]],[[],["bool",15]],[[],["flags",3]],[[],["surfacepropsflags",3]],[[["directcontext",6]]],[[]],[[],["semaphoressubmitted",4]],[[]],[[]],[[["directcontext",6]]],[[]],[[]],[[["backendsurfaceaccess",4],["flushinfo",3]],["semaphoressubmitted",4]],[[["flushinfo",3],["directcontext",6]],["semaphoressubmitted",4]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,null,[[],["bool",15]],[[],["fontfamilies",3]],[[],["fontfamilies",3]],[[]],[[],["usize",15]],null,[[],["fontmetrics",3]],null,[[],["scalar",6]],[[],["scalar",6]],null,[[],["fontstyle",3]],[[],["fontstyle",3]],[[],["fontstyle",3]],[[],["bool",15]],[[],[["option",4,["paint"]],["paint",6]]],[[["usize",15],["scalar",6]],["option",4]],[[]],[[["blendmode",4]]],[[["typefacefontprovider",6]]],[[["orderedfontmgr",6]]],[[]],[[["directcontext",6]]],[[]],[[]],[[["rchandle",3]]],[[]],[[]],[[]],[[["u32",15]]],[[["rgb",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["color",3]]],[[]],[[["rgb",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[]],[[["ipoint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["irect",3]]],[[["isize",3]]],[[]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["alphatype",4],["recordingcontext",6],["colortype",4],["backendtexture",6],["surfaceorigin",4]],[["option",4,["image"]],["image",6]]],[[["option",4]]],[[["u8",15]],["color",3]],[[["recordingcontext",6],["backendrendertarget",6],["surfaceprops",3],["colortype",4],["option",4,["surfaceprops"]],["surfaceorigin",4]],["option",4]],[[["recordingcontext",6],["surfaceprops",3],["colortype",4],["option",4,["surfaceprops"]],["backendtexture",6],["surfaceorigin",4]],["option",4]],[[["bitmap",6]],[["option",4,["image"]],["image",6]]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["option",4]],[[],[["picture",6],["option",4,["picture"]]]],[[]],[[],[["picture",6],["option",4,["picture"]]]],[[["char",15]]],[[["colorinfo",6]]],[[["colorinfo",6]]],[[["recordingcontext",6],["data",6],["compressiontype",4]]],[[["recordingcontext",6]]],[[["data",6]],[["picture",6],["option",4,["picture"]]]],[[["yuvapixmapinfo",6]],["option",4]],[[],[["typeface",6],["option",4,["typeface"]]]],[[["data",6]],[["picture",6],["option",4,["picture"]]]],[[],[["codec",6],["option",4,["codec"]]]],[[["yuvainfo",6],["datatype",4],["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4,["image"]],["image",6]]],[[["yuvapixmapinfo",6]],["option",4]],[[["yuvainfo",6]],["option",4]],[[["imagegenerator",6]],[["option",4,["image"]],["image",6]]],[[]],[[]],[[["isize",3]],["size",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["i32",15]]],[[["i32",15]]],[[["fontstyle",3]],[["typeface",6],["option",4,["typeface"]]]],[[["yuvcolorspace",4],["directcontext",6],["surfaceorigin",4]]],[[["paint",6]]],[[["paint",6]],["option",4]],[[["bool",15],["path",6]]],[[["bool",15],["path",6]]],[[["isize",3],["option",4,["matrix"]],["matrix",3],["option",4,["paint"]],["paint",6],["bitdepth",4]],["option",4]],[[["isize",3],["option",4,["matrix"]],["matrix",3],["option",4,["paint"]],["paint",6],["bitdepth",4]],["option",4]],[[["bitdepth",4],["option",4,["paint"]],["option",4,["matrix"]],["matrix",3],["paint",6]],[["option",4,["image"]],["image",6]]],[[],["option",4]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[]],[[["font",6]],[["option",4,["textblob"]],["textblob",6]]],[[["font",6]],[["option",4,["textblob"]],["textblob",6]]],[[["font",6],["scalar",6]],[["option",4,["textblob"]],["textblob",6]]],[[["font",6],["scalar",6]],[["option",4,["textblob"]],["textblob",6]]],[[]],[[["scalar",6]]],[[["usize",15],["imageinfo",6]],[["option",4,["image"]],["image",6]]],[[],["region",6]],[[["u8",15]],["color",3]],[[["font",6]],[["option",4,["textblob"]],["textblob",6]]],[[["font",6]],[["option",4,["textblob"]],["textblob",6]]],[[],["maskfilter",6]],[[],["maskfilter",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["font",6]],[["option",4,["textblob"]],["textblob",6]]],[[["font",6]]],[[],[["skstring",3],["handle",3,["skstring"]]]],[[["font",6]],[["option",4,["textblob"]],["textblob",6]]],[[],[["path",6],["option",4,["path"]]]],[[]],[[["font",6],["textencoding",4]],[["option",4,["textblob"]],["textblob",6]]],[[["font",6],["textencoding",4]],[["option",4,["textblob"]],["textblob",6]]],[[["alphatype",4],["recordingcontext",6],["colortype",4],["backendtexture",6],["surfaceorigin",4]],[["option",4,["image"]],["image",6]]],[[]],[[["scalar",6]]],[[["drawableinfo",3]]],[[["i32",15]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["recordingcontext",6],["yuvapixmaps",6]],[["option",4,["image"]],["image",6]]],[[["yuvabackendtextures",6],["recordingcontext",6]],[["option",4,["image"]],["image",6]]],[[],["u8",15]],null,null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["backendhandleaccess",4]],[["option",4,["backendrendertarget"]],["backendrendertarget",6]]],[[["backendhandleaccess",4]],[["backendtexture",6],["option",4,["backendtexture"]]]],[[["path",6]],["bool",15]],[[["option",4,["paint"]],["paint",6]]],[[]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[["rect",3],["option",4,["rect"]],["path",6]],[["path",6],["option",4,["path"]]]],[[["option",4,["rect"]],["rect",3],["path",6],["matrix",3]],[["path",6],["option",4,["path"]]]],[[],["usize",15]],[[],["positionwithaffinity",3]],[[],[["result",4],["result",4,["image","result"]],["image",6]]],[[["usize",15]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["paint",6],["option",4,["paint"]]],[["scalar",6],["vec",3,["scalar"]]]],[[],[["scalar",6],["vec",3,["scalar"]]]],[[["paint",6],["option",4,["paint"]]],[["scalar",6],["vec",3,["scalar"]]]],[[],["bool",15]],[[],[["vec",3,["linemetrics"]],["linemetrics",3]]],[[["scalar",6]],[["option",4,["matrix"]],["matrix",3]]],[[["glyphid",6]],[["path",6],["option",4,["path"]]]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["usize",15],["imageinfo",6]],["result",4]],[[["pixmap",6],["option",4,["options"]],["options",3]],["result",4]],[[["usize",15],["option",4,["options"]],["imageinfo",6],["options",3]],["result",4]],[[["usize",15]],[["point",3],["option",4,["point"]]]],[[],["usize",15]],[[["point",3],["option",4,["point"]]]],[[],[["vec",3,["textbox"]],["textbox",3]]],[[["usize",15],["rectheightstyle",4],["rectwidthstyle",4],["range",3,["usize"]]],[["vec",3,["textbox"]],["textbox",3]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[["f32",15]],["isize",3]],[[["usize",15]],["usize",15]],[[],["irect",3]],[[],["irect",3]],[[["fonttabletag",6]],["usize",15]],[[["fonttabletag",6]],[["usize",15],["option",4,["usize"]]]],[[],["usize",15]],[[],[["option",4,["drawableinfo"]],["drawableinfo",3]]],[[]],[[["option",4],["option",4,["paint"]],["paint",6],["option",4]]],[[["u32",15]],[["usize",15],["range",3,["usize"]]]],[[["option",4,["scalar"]],["scalar",6]]],[[["yuvapixmaps",6]],["result",4]],[[],[["option",4,["framebufferinfo"]],["framebufferinfo",3]]],[[],[["textureinfo",3],["option",4,["textureinfo"]]]],[[]],null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["strokerec",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],null,null,[[],["i64",15]],[[],["bool",15]],[[],["bool",15]],[[["highcontrastconfig",3]],["option",4]],null,null,[[],["fonthinting",4]],[[],["bool",15]],null,null,[[],["directcontextid",3]],[[],["scalar",6]],null,[[],["option",4]],null,[[],[["option",4,["imagefilter"]],["imagefilter",6]]],null,[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["image",6]],[[],[["option",4,["image"]],["image",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]],["f32",15]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]],["f32",15]],[[],["option",4]],[[],["option",4]],[[],["scalar",6]],[[["paint",6],["style",4]],["scalar",6]],[[["cap",4],["join",4],["scalar",6]],["scalar",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["scalar",6],["path",6]],[["path",6],["option",4,["path"]]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[]],[[]],[[["irect",3]],["bool",15]],[[["region",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[]],[[]],[[]],[[],[["m44",3],["option",4,["m44"]]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["backendtexture",6]],["bool",15]],[[["surfacecharacterization",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["path",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["rect",3],["option",4,["rect"]]]],[[],["bool",15]],[[],["protected",4]],[[],["protected",4]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["bool",15]],[[],[["rrect",3],["option",4,["rrect"]]]],[[["backendtexture",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["supporteddatatypes",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["option",4,["recordingcontext"]],["recordingcontext",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["option",4,["recordingcontext"]],["recordingcontext",6]],["bool",15]],[[["recordingcontext",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["iter",3]],[[],["iter",3]],[[],["join",4]],[[]],[[]],[[],["rect",3]],[[]],[[]],[[],[["point",3],["option",4,["point"]]]],[[["scalar",6]]],[[],["scalar",6]],null,[[],["i32",15]],[[],["scalar",6]],null,null,[[],["usize",15]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[["scalar",6]],["scalar",6]],[[["scalar",6]],["scalar",6]],[[],["scalar",6]],[[]],[[["scalar",6],["matrix",3]],[["option",4,["patheffect"]],["patheffect",6]]],null,[[],["usize",15]],[[]],[[]],[[]],[[["tilemode",4]],["option",4]],[[],["str",15]],[[],["scalar",6]],[[["v3",3]]],[[]],null,[[["scalar",6]],["option",4]],[[["pathfilltype",4]]],[[],[["option",4,["textblob"]],["textblob",6]]],[[["pathfilltype",4]]],[[],[["option",4,["textblob"]],["textblob",6]]],[[],[["option",4,["blender"]],["blender",6]]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],[["string",3],["result",4,["runtimeeffect","string"]],["runtimeeffect",6]]],[[],[["string",3],["result",4,["runtimeeffect","string"]],["runtimeeffect",6]]],[[],[["string",3],["result",4,["runtimeeffect","string"]],["runtimeeffect",6]]],[[["bool",15],["recordingcontext",6],["imageinfo",6]],[["image",6],["option",4,["image"]]]],[[],["path",6]],[[["bool",15]],[["option",4,["shader"]],["shader",6]]],[[["matrix",3]],["path",6]],[[["f32",15]],["v4",3]],[[]],[[],[["option",4,["maskfilter"]],["maskfilter",6]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[],["fontstyleset",6]],[[],["fontstyleset",6]],[[["fontstyle",3]],[["typeface",6],["option",4,["typeface"]]]],[[["fontstyle",3]],[["typeface",6],["option",4,["typeface"]]]],[[["fontstyle",3],["unichar",6]],[["typeface",6],["option",4,["typeface"]]]],[[["fontstyle",3],["unichar",6]],[["typeface",6],["option",4,["typeface"]]]],[[["styletype",4],["textstyle",6]],["bool",15]],[[["usize",15],["fontstyle",3]],[["typeface",6],["option",4,["typeface"]]]],[[["usize",15],["fontstyle",3]],[["typeface",6],["option",4,["typeface"]]]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],null,[[["scalar",6]],[["option",4,["matrix"]],["matrix",3]]],[[],["matrix",3]],[[["matrix",3]],[["option",4,["patheffect"]],["patheffect",6]]],[[["tilemode",4],["bool",15],["scalar",6]],["option",4]],null,[[],[["option",4,["patheffect"]],["patheffect",6]]],null,[[],["scalar",6]],[[],[["usize",15],["option",4,["usize"]]]],[[],["i32",15]],[[["colortype",4]],["usize",15]],[[],["i32",15]],[[],["scalar",6]],[[["option",4,["paint"]],["paint",6]]],[[["option",4,["paint"]],["paint",6],["textencoding",4]]],[[],["option",4]],[[["pathop",4]],["patheffect",6]],null,[[]],[[],["scalar",6]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[],["mipmapped",4]],[[],["mipmapped",4]],[[],["scalar",6]],[[["blendmode",4]],["blender",6]],[[["blendmode",4]],["blender",6]],[[],["vertexmode",4]],null,[[]],[[]],[[]],[[["v2",3]]],[[["v4",3]]],[[["point3",3]]],[[["v3",3]]],[[]],[[]],[[["f32",15]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,[[]],[[]],[[],["skflattenable",3]],null,[[["color",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["colorchannelflag",3]],["bool",15]],[[["color4f",3]],["bool",15]],[[["colorspaceprimaries",3]],["bool",15]],[[["colorspacetransferfn",3]],["bool",15]],[[["xyzd50hash",3]],["bool",15]],[[["v2",3]],["bool",15]],[[["v3",3]],["bool",15]],[[["v4",3]],["bool",15]],[[["ipoint",3]],["bool",15]],[[["point",3]],["bool",15]],[[["point3",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["rsxform",3]],["bool",15]],[[["isize",3]],["bool",15]],[[["size",3]],["bool",15]],[[["surfacepropsflags",3]],["bool",15]],[[["datetime",3]],["bool",15]],[[["fourbytetag",3]],["bool",15]],[[["budgeted",3]],["bool",15]],[[["scalar",6]],["bool",15]],[[["scalar",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["surfacecharacterization",6]]],[[]],[[["colortype",4],["alphatype",4]]],[[["colortype",4],["alphatype",4]]],[[]],[[["usize",15],["imageinfo",6]],["borrows",3]],[[["font",6]],["option",4]],[[]],[[["bool",15],["path",6]]],[[["colortype",4],["alphatype",4]]],[[]],[[],["paint",6]],[[["yuvainfo",6],["option",4]],["option",4]],[[["subsampling",4],["yuvcolorspace",4],["planeconfig",4]],["option",4]],[[]],[[]],[[["surfaceorigin",4],["yuvainfo",6]],["option",4]],[[],["region",6]],[[]],[[]],[[["vec",3,["handle"]],["handle",3,["skstring"]]]],[[]],[[["bool",15],["path",6]]],[[]],[[["usize",15],["builderflags",3],["vertexmode",4]],["builder",6]],[[["usize",15],["imageinfo",6]],["borrows",3]],[[]],[[["yuvainfo",6],["surfaceorigin",4],["mipmapped",4]],["option",4]],[[["initstyle",4]]],[[]],[[["f32",15]]],[[],["paragraphcache",6]],[[["colortype",4],["alphatype",4]]],[[]],[[["surfacecharacterization",6]]],[[]],[[]],[[["paragraphstyle",6]]],[[]],[[]],[[]],[[]],[[]],[[["font",6]],["option",4]],[[]],[[]],[[["fontstyle",3]],["option",4]],[[]],[[["textblob",6]]],[[["u32",15]]],[[["f32",15]],["color4f",3]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]],["isize",3]],[[["scalar",6]],["size",3]],[[["pixelgeometry",4],["surfacepropsflags",3]],["surfaceprops",3]],[[["u32",15]]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[["str",15],["u8",15]],[["borrows",3,["bidiruniterator"]],["option",4,["borrows"]]]],[[]],[[]],[[],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[]],[[["vertexmode",4],["option",4]],["vertices",6]],[[]],[[],["option",4]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["cstr",3]],["data",6]],[[["cstr",3]],["data",6]],[[["textureresourceinfo",3]]],[[["textureresourceinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4,["directcontext"]]]],[[["dxgi_format",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",3]],[[]],[[]],[[]],[[["str",15],["font",6]],[["borrows",3,["fontruniterator"]],["fontruniterator",6]]],[[["filltype",4]]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],[["typeface",6],["option",4,["typeface"]]]],[[["usize",15],["framebufferinfo",3]]],[[["textureinfo",3],["mipmapped",4]]],[[["enum",6]]],[[],[["directcontext",6],["option",4,["directcontext"]]]],[[]],[[["str",15]],[["borrows",3,["scriptruniterator"]],["scriptruniterator",6]]],[[["str",15],["u8",15]],[["borrows",3,["bidiruniterator"]],["option",4,["borrows"]]]],[[]],[[],["option",4]],[[],["option",4]],[[["alphatype",4]],["imageinfo",6]],[[["alphatype",4]],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["option",4]],[[],[["option",4,["image"]],["image",6]]],[[],["option",4]],[[["path",6]]],[[["path",6]]],[[],["picture",6]],[[],["picture",6]],[[]],[[["imageinfo",6],["option",4,["surfaceprops"]],["surfaceprops",3]],["option",4]],[[["surfaceprops",3],["imageinfo",6],["option",4,["surfaceprops"]]],[["option",4,["borrows"]],["borrows",3,["surface"]]]],[[["compressiontype",4]],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[["cachinghint",4]],[["option",4,["image"]],["image",6]]],[[],["option",4]],[[["option",4,["surfaceprops"]],["recordingcontext",6],["surfaceprops",3],["imageinfo",6],["budgeted",3],["surfaceorigin",4]],["option",4]],[[["surfacecharacterization",6],["recordingcontext",6],["budgeted",3]],["option",4]],[[["alphatype",4]],["imageinfo",6]],[[["alphatype",4]],["imageinfo",6]],[[["str",15],["fourbytetag",3]],[["borrows",3,["scriptruniterator"]],["scriptruniterator",6]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["colorspace",6]],[[],["colorspace",6]],[[],["colorspace",6]],[[],["colorspace",6]],[[["str",15]],[["languageruniterator",6],["option",4,["languageruniterator"]]]],[[],["data",6]],[[],["data",6]],[[["usize",15]],["fontstyleset",6]],[[["usize",15]],["fontstyleset",6]],[[["usize",15]],["fontstyleset",6]],[[["usize",15]],["fontstyleset",6]],[[["data",6],["usize",15]],["data",6]],[[["data",6],["usize",15]],["data",6]],[[],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[["imageinfo",6]],[["option",4,["surface"]],["surface",6]]],[[],[["option",4,["surface"]],["surface",6]]],[[["compressiontype",4],["data",6],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["mipmapped",4],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["mipmapped",4],["budgeted",3],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["usize",15],["u8",15]],["bidiruniterator",6]],[[["font",6],["usize",15]],["fontruniterator",6]],[[],["languageruniterator",6]],[[["usize",15],["u8",15]],["scriptruniterator",6]],[[["usize",15]],[["typeface",6],["option",4,["typeface"]]]],[[["usize",15]],[["typeface",6],["option",4,["typeface"]]]],[[["usize",15]],["data",6]],[[["usize",15]],["data",6]],[[["isize",3],["option",4,["isize"]]],["imageinfo",6]],[[["isize",3],["option",4,["isize"]]],["imageinfo",6]],[[["imagelayout",4],["u32",15]]],[[["format",4]]],[[["imageinfo",3]]],[[["imageinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4,["directcontext"]]]],[[["ycbcrconversioninfo",3]]],[[["option",4,["recordingcontext"]],["recordingcontext",6],["imagefilter",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["i32",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["vector",6]],["scalar",6]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["contentchangemode",4]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["pathop",4],["path",6]],[["path",6],["option",4,["path"]]]],[[["pathop",4],["path",6]],["option",4]],[[["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[],["surfaceorigin",4]],[[],["encodedorigin",4]],[[],["surfaceorigin",4]],[[],["encodedorigin",4]],[[],["matrix",3]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[["usize",15],["pathdirection",4]]],[[],["colorfilter",6]],null,null,[[["canvas",3]]],[[],["paragraphcache",6]],[[],["paragraphcache",6]],[[["colorchannelflag",3]],[["ordering",4],["option",4,["ordering"]]]],[[["surfacepropsflags",3]],[["ordering",4],["option",4,["ordering"]]]],null,[[["style",4],["scalar",6],["path",6]],[["option",4,["patheffect"]],["patheffect",6]]],null,[[["path",6],["matrix",3]],["patheffect",6]],null,null,[[],[["option",4,["patheffect"]],["patheffect",6]]],null,null,null,[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],[[],["textstyle",6]],[[["duration",3]]],null,[[["f32",15]]],null,[[],["pixelgeometry",4]],[[],[["option",4,["pixelref"]],["pixelref",6]]],[[],[["option",4,["pixelref"]],["pixelref",6]]],[[],["ipoint",3]],[[],["ipoint",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["pixmap",6]],[[],["pixmap",6]],[[],["yuvapixmapinfo",6]],[[["usize",15]],["pixmap",6]],[[],["planeconfig",4]],[[],[["isize",3],["vec",3,["isize"]]]],[[["usize",15]],[["option",4,["backendformat"]],["backendformat",6]]],[[]],[[["usize",15]],[["option",4,["imageinfo"]],["imageinfo",6]]],[[]],[[["usize",15]]],[[]],[[["canvas",3]]],[[["canvas",3]]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[],["usize",15]],[[["bool",15]]],[[]],[[]],[[]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[]],[[]],[[["colormatrix",6]]],[[["m44",3]]],[[],[["option",4,["string"]],["string",3]]],[[["f32",15]]],[[["scalar",6]]],[[["colormatrix",6]]],[[["m44",3]]],[[]],[[["u8cpu",6]],["pmcolor",6]],[[],["pmcolor",6]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["data",6]],["bool",15]],[[]],null,[[],["surfaceprops",3]],[[]],[[]],[[["usize",15],["bool",15],["option",4,["usize"]]]],[[["textstyle",6]]],[[]],[[]],[[]],[[["supporteddatatypes",6]],[["yuvapixmapinfo",6],["option",4,["yuvapixmapinfo"]]]],[[],["bool",15]],[[],["bool",15]],[[["irect",3]],["bool",15]],[[["region",6]],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[],["u8",15]],null,null,[[["arcsize",4],["scalar",6],["pathdirection",4]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scalar",6],["tilemode",4]],["option",4]],[[["scalar",6]],["scalar",6]],[[["usize",15]],["scalar",6]],[[],["usize",15]],[[["usize",15],["i32",15],["imageinfo",6]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["usize",15],["i32",15],["imageinfo",6]],["bool",15]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["usize",15],["imageinfo",6],["cachinghint",4]],["bool",15]],[[["bitmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["usize",15],["imageinfo",6],["cachinghint",4]],["bool",15]],[[["datatype",4]],["colortype",4]],[[],[["canvas",3],["option",4,["canvas"]]]],[[],[["option",4,["recordingcontext"]],["recordingcontext",6]]],[[]],[[],["bool",15]],[[]],null,[[["typeface",6],["option",4]],["usize",15]],[[],[["option",4,["image"]],["image",6]]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["backendtexture",6],["surfaceorigin",4]],["bool",15]],[[["backendtexture",6],["surfaceorigin",4]],["bool",15]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[["bool",15],["path",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,["u32"]],["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[],[["path",6],["option",4,["path"]]]],[[],[["path",6],["option",4,["path"]]]],[[],["usize",15]],[[],["resourcecachelimits",3]],[[],["usize",15]],[[],["resourcecacheusage",3]],[[]],[[["path",6]]],[[]],[[],["i32",15]],[[],["scalar",6]],null,null,[[["scalar",6],["v3",3]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[],["irect",3]],[[],["irect",3]],[[]],[[],["rect",3]],[[],["irect",3]],[[["usize",15]],["v4",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["v4",3]]],null,[[]],[[["usize",15],["pathdirection",4]]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],null,[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[],["scalar",6]],[[["scalar",6]]],[[["scalar",6]]],[[],["scanlineorder",4]],null,null,[[["scalar",6],["bool",15]],[["path",6],["option",4,["path"]]]],[[["scalar",6],["bool",15]],[["path",6],["option",4,["path"]]]],[[],["segmentmask",3]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[["serializebehavior",4]],["data",6]],[[],["data",6]],[[["region",6]],["bool",15]],[[["bool",15]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["bool",15]]],[[["scalar",6]]],[[]],[[["u8",15]]],[[["f32",15]]],[[["alphatype",4]],["bool",15]],[[["alphatype",4]],["bool",15]],[[["bool",15]]],[[["u8",15]]],[[]],[[["backendrendertarget",6],["backendsurfacemutablestate",6]],["bool",15]],[[["backendrendertarget",6],["backendsurfacemutablestate",6]],[["backendsurfacemutablestate",6],["option",4,["backendsurfacemutablestate"]]]],[[["backendtexture",6],["backendsurfacemutablestate",6]],["bool",15]],[[["backendtexture",6],["backendsurfacemutablestate",6]],[["backendsurfacemutablestate",6],["option",4,["backendsurfacemutablestate"]]]],[[]],[[["bool",15]]],[[["blendmode",4]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["usize",15],["v4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["colormatrix",6]]],[[["m44",3]]],[[["m44",3]]],[[["resourcestateenum",6]]],[[["resourcestateenum",6]]],[[]],[[]],[[["bool",15]]],[[["drawoptions",4]]],[[]],[[["edging",4]]],[[]],[[["bool",15]]],[[["bool",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["pathfilltype",4]]],[[["pathfilltype",4]]],[[["pathfilltype",4]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[["bool",15]]],[[["bool",15]]],[[]],[[["glyphid",6],["f32",15]]],[[]],[[["bool",15]]],[[["bool",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["bool",15]]],[[["fonthinting",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["i32",15]]],[[]],[[["scalar",6]]],[[["scalar",6]],["bool",15]],[[["scalar",6]],["bool",15]],[[["scalar",6]]],[[["bool",15]]],[[]],[[["i32",15]]],[[["scalar",6]]],[[]],[[]],[[["fontmetrics",3]]],[[["backendsurfacemutablestate",6]]],[[["scalar",6]],["bool",15]],[[["paragraphstyle",6]]],[[["bool",15],["path",6]]],[[["region",6],["path",6]],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15],["scalar",6]]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[["scalar",6]]],[[["usize",15]]],[[["resourcecachelimits",3]]],[[["scalar",6],["v3",3]]],[[["scalar",6],["v3",3]]],[[["scalar",6],["v3",3]]],[[["usize",15],["v4",3]]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["bool",15]]],[[["cap",4]]],[[["join",4]]],[[["scalar",6]]],[[["cap",4],["join",4],["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["strutstyle",6]]],[[["style",4]]],[[["bool",15]]],[[]],[[["textalign",4]]],[[["textbaseline",4]]],[[["textdirection",4]]],[[["textheightbehavior",4]]],[[["textstyle",6]]],[[["scalar",6]]],[[]],[[]],[[["imagelayout",4]]],[[["imagelayout",4]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],null,[[],[["option",4,["shader"]],["shader",6]]],null,null,[[]],[[["font",6],["bool",15],["str",15],["scalar",6]]],[[["font",6],["bool",15],["str",15],["scalar",6]],["option",4]],[[["fontruniterator",6],["bidiruniterator",6],["scriptruniterator",6],["str",15],["languageruniterator",6],["scalar",6]]],[[["fontruniterator",6],["bidiruniterator",6],["scriptruniterator",6],["str",15],["languageruniterator",6],["scalar",6]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["path",6]],[["path",6],["option",4,["path"]]]],[[],["option",4]],[[]],[[],["usize",15]],[[],["scalar",6]],[[],["usize",15]],[[],["isize",3]],[[],["size",3]],[[],["usize",15]],[[],["scalar",6]],[[["usize",15]],["bool",15]],[[["backendapi",4],["imageinfo",6],["matrix",3]],[["gpudrawhandler",6],["option",4,["gpudrawhandler"]]]],[[],["path",6]],[[],["path",6]],[[]],[[]],[[]],[[],["rect",3]],[[],["str",15]],[[],["scalar",6]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],null,[[["usize",15],["imageinfo",6]],["result",4]],[[["imageinfo",6]],["result",4]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["vec",3,["glyphid"]],["glyphid",6]]],[[["cap",4],["scalar",6],["join",4]],[["option",4,["patheffect"]],["patheffect",6]]],null,[[],["cap",4]],[[],["join",4]],[[],["scalar",6]],null,null,[[],["scalar",6]],[[],["bool",15]],[[],["strutstyle",6]],[[["usize",15]]],[[],["style",4]],[[],["style",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[]],[[["size",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[]],[[["size",3]]],[[["vector",6]]],[[["point3",3]]],[[]],[[],["bool",15]],[[],["subsampling",4]],[[],["patheffect",6]],[[["datatype",4],["planeconfig",4]],["bool",15]],[[],["bool",15]],null,[[],["surfaceprops",3]],null,[[]],[[["region",6]]],[[["path",6]]],[[]],[[]],[[]],[[["tilemode",4]],["option",4]],[[]],[[]],null,[[],[["vec",3,["fonttabletag"]],["option",4,["vec"]]]],[[],["option",4]],[[],["option",4]],[[],["textalign",4]],[[],["textbaseline",4]],[[],["textdirection",4]],[[],["textheightbehavior",4]],[[],["textstyle",6]],[[["textencoding",4]],["usize",15]],[[["textencoding",4]],["usize",15]],[[["textencoding",4]],[["vec",3,["glyphid"]],["glyphid",6]]],null,[[["usize",15]],[["backendtexture",6],["option",4,["backendtexture"]]]],[[],["surfaceorigin",4]],[[],["surfaceorigin",4]],[[],["usize",15]],[[]],[[]],[[]],[[["path",6]],[["rect",3],["option",4,["rect"]]]],[[],[["rect",3],["option",4,["rect"]]]],[[],["option",4]],null,[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["option",4]],[[],["option",4]],[[],["isize",3]],[[["u8",15]],["color",3]],[[],["color",3]],[[],["isize",3]],[[],["option",4]],[[],["hsv",3]],[[],["hsv",3]],[[],["matrix",3]],[[],["skpathfilltype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rgb",3]],[[],["isize",3]],[[],[["option",4,["shader"]],["shader",6]]],[[["filtermode",4]],["shader",6]],[[],[["option",4,["shader"]],["shader",6]]],[[["filtermode",4]],["shader",6]],[[],[["option",4,["shader"]],["shader",6]]],[[],["string",3]],[[],["string",3]],[[["pathencoding",4]],["string",3]],[[]],[[]],[[],["xyzd50hash",3]],[[],["xyzd50hash",3]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["scalar",6]],null,null,null,[[["matrix",3]]],[[["applyperspectiveclip",4],["matrix",3]]],[[]],[[]],[[["scalar",6]]],[[],["region",6]],[[],["m44",3]],[[["scalar",6]],[["option",4,["patheffect"]],["patheffect",6]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["scalar",6]],["option",4]],[[]],[[["bool",15]]],[[["scalar",6],["tilemode",4]],["option",4]],null,[[],["type",4]],[[],["childtype",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["cstr",3]],[[],["cstr",3]],null,[[],["option",4]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],["typeface",6]],[[["unichar",6]],["glyphid",6]],[[["unichar",6]],["glyphid",6]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["fontid",6]],[[],[["i32",15],["option",4,["i32"]]]],[[],["bool",15]],[[],[["usize",15],["option",4,["usize"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],null,null,[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],[["option",4,["irect"]],["irect",3]]],[[],["bool",15]],[[["alphatype",4]],[["option",4,["alphatype"]],["alphatype",4]]],[[],["i32",15]],null,[[],[["option",4,["vec"]],["vec",3,["variationaxis"]]]],[[],[["option",4,["vec"]],["vec",3,["coordinate"]]]],[[],["usize",15]],null,[[],["bool",15]],[[],["bool",15]],[[],[["imageinfo",3],["option",4,["imageinfo"]]]],[[],[["imageinfo",3],["option",4,["imageinfo"]]]],[[],["bool",15]],[[],["bool",15]],null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],null,null,[[],["i64",15]],[[["u8",15]]],[[["i32",15]]],[[["alphatype",4]]],[[["alphatype",4]]],[[["alphatype",4]]],[[["alphatype",4]]],[[["colortype",4],["backendformat",6]]],[[["colortype",4],["backendformat",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["colorspace",6]],[[],["colorspace",6]],[[["colortype",4]]],[[["colortype",4]]],[[["colortype",4]]],[[["colortype",4]]],[[],[["option",4,["image"]],["image",6]]],[[]],[[]],[[],["option",4]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[],["colorspace",6]],[[],["colorspace",6]],[[["matrix",3]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[],["path",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scalar",6]],["option",4]],[[],["colorspace",6]],[[],["colorspace",6]],[[["subsampling",4]],["option",4]],[[["matrix",3]],["path",6]],[[["applyperspectiveclip",4],["matrix",3]],["path",6]],[[],["scalar",6]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["sendable",3],["result",4,["sendable"]]]],[[],[["sendable",3],["result",4,["sendable"]]]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[["bitmap",6]]],[[["pixmap",6]]],[[["vec",3]]],[[],["i32",15]],[[],["scalar",6]],null,null,null,null,null,null,null,null,null,null,[[],["i32",15]],[[],["scalar",6]],null,null,null,null,null,null,null,null,[[],["yuvcolorspace",4]],[[],["yuvcolorspace",4]],[[],["yuvcolorspace",4]],null,[[],["yuvainfo",6]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],null,null,null,null,null,[[["canvas",3],["data",6]]],[[["canvas",3],["data",6]]],[[["canvas",3],["data",6]]],[[["f32",15],["bool",15]],[["option",4,["blender"]],["blender",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4,["toplayerpixels"]],["toplayerpixels",3]]],[[]],[[["data",6]]],[[["data",6]]],[[["data",6]]],[[],["canvas",3]],[[],["canvas",3]],[[["imagefilter",6]]],[[],["isize",3]],[[]],[[]],[[["savelayerflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rect",3]]],null,[[]],[[]],[[["image",6]]],[[["matrix",3]]],[[["path",6]]],[[]],[[["region",6]]],[[]],[[]],[[],["savelayerflags",3]],[[],["glyphpositions",4]],[[],["skcanvas_pointmode",4]],[[],["skcanvas_srcrectconstraint",4]],[[]],[[]],[[]],[[]],[[["savelayerflags",3]],["ordering",4]],null,[[]],[[["matrix",3]]],[[["m44",3]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["irect"]],["irect",3]]],[[]],[[]],[[["data",6],["str",15]]],[[["scalar",6],["paint",6],["bool",15]]],[[["scalar",6],["paint",6]]],[[]],[[["matrix",3],["drawable",6],["option",4,["matrix"]]]],[[["drawable",6]]],[[["paint",6]]],[[["font",6],["paint",6]]],[[["font",6],["paint",6]]],[[["option",4,["paint"]],["paint",6]]],[[["lattice",3],["option",4,["paint"]],["filtermode",4],["paint",6]]],[[["filtermode",4],["option",4,["paint"]],["paint",6]]],[[["paint",6],["option",4]]],[[["paint",6],["option",4]]],[[["option",4,["paint"]],["paint",6]]],[[["paint",6]]],[[["paint",6]]],[[["paint",6]]],[[["paint",6]]],[[["paint",6],["option",4]]],[[["paint",6],["path",6]]],[[["option",4,["paint"]],["option",4,["matrix"]],["matrix",3],["paint",6]]],[[["paint",6]]],[[["paint",6],["pointmode",4]]],[[["paint",6]]],[[["region",6],["paint",6]]],[[["scalar",6],["paint",6]]],[[["paint",6]]],[[["scalar",6],["path",6]]],[[["font",6],["paint",6]]],[[["font",6],["paint",6],["align",4]]],[[["paint",6]]],[[["vertices",6],["option",4,["paint"]],["paint",6]]],[[]],[[]],[[]],[[["savelayerflags",3]],["bool",15]],[[["skcanvas_pointmode",4]],["bool",15]],[[["skcanvas_srcrectconstraint",4]],["bool",15]],[[["intoiterator",8]]],[[["savelayerflags",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,["surfaceprops"]],["surfaceprops",3],["bitmap",6]],["ownedcanvas",3]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["surfaceprops",3],["imageinfo",6],["option",4,["surfaceprops"]]],[["ownedcanvas",3],["option",4,["ownedcanvas"]]]],[[],[["ownedcanvas",3],["option",4,["ownedcanvas"]]]],[[["canvas",3],["bool",15]],["autorestoredcanvas",3]],[[]],[[]],[[]],[[],["imageinfo",6]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],[["rect",3],["option",4,["rect"]]]],[[],["m44",3]],[[],["matrix",3]],[[["savelayerflags",3]],["bool",15]],[[["option",4,["surfaceprops"]],["surfaceprops",3]],[["option",4,["ownedcanvas"]],["ownedcanvas",3]]],[[],["ownedcanvas",3]],[[["imageinfo",6],["option",4,["surfaceprops"]],["surfaceprops",3]],[["option",4,["surface"]],["surface",6]]],[[]],null,[[["paint",6]]],[[["savelayerflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],null,[[],[["surfaceprops",3],["option",4,["surfaceprops"]]]],[[["rect",3]],["bool",15]],[[["path",6]],["bool",15]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["bitmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[],[["option",4,["recordingcontext"]],["recordingcontext",6]]],null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["point",3],["scalar",6],["option",4,["point"]]]],null,[[],["usize",15]],[[],["usize",15]],[[["savelayerrec",3]],["usize",15]],[[["u8cpu",6]],["usize",15]],[[]],[[["bool",15]]],[[["matrix",3]]],[[["matrix",3]]],[[["m44",3]]],[[]],[[]],[[]],[[],[["option",4,["surface"]],["surface",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["bitmap",6]],["bool",15]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["skcanvas_lattice_recttype",4]],[[]],null,[[],["skcanvas_lattice_recttype",4]],[[["skcanvas_lattice_recttype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["irect",3]],[[],["options",3]],[[],["encodedorigin",4]],[[],["skcodec_selectionpolicy",4]],[[],["skcodec_zeroinitialized",4]],[[],["skcodec_skscanlineorder",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",3]],[[],["encodedimageformat",4]],[[["options",3]],["bool",15]],[[["encodedorigin",4]],["bool",15]],[[["skcodec_selectionpolicy",4]],["bool",15]],[[["skcodec_zeroinitialized",4]],["bool",15]],[[["skcodec_skscanlineorder",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[]],[[]],[[]],[[],[["codec",6],["option",4,["codec"]]]],[[],["usize",15]],[[],[["result",4],["result",4,["image","result"]],["image",6]]],[[["usize",15],["imageinfo",6]],["result",4]],[[["pixmap",6],["option",4,["options"]],["options",3]],["result",4]],[[["usize",15],["option",4,["options"]],["imageinfo",6],["options",3]],["result",4]],[[],[["usize",15],["option",4,["usize"]]]],[[["f32",15]],["isize",3]],[[["usize",15]],["usize",15]],[[["yuvapixmaps",6]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[],["imageinfo",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["options",3]],["bool",15]],[[],["i32",15]],[[],["encodedorigin",4]],[[["i32",15]],["i32",15]],null,[[["supporteddatatypes",6]],[["yuvapixmapinfo",6],["option",4,["yuvapixmapinfo"]]]],[[["result",4]],["str",15]],[[],["scanlineorder",4]],[[["usize",15]],["bool",15]],[[["usize",15],["imageinfo",6]],["result",4]],[[["imageinfo",6]],["result",4]],null,[[],["bool",15]],[[],["matrix",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],[["option",4,["irect"]],["irect",3]]],[[]],null,null,null,[[],["option",4]],[[],["color",3]],[[["colorspace",6],["option",4,["colorspace"]]],["color4f",3]],[[["option",4]]],[[]],[[["highcontrastconfig",3]],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["colorfilter",6]],[[],["option",4]],[[],["option",4]],[[["blendmode",4]],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[["f32",15]],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[],["colorfilter",6]],[[],["colorfilter",6]],[[["blendmode",4]],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[["f32",15]],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[],["colorfilter",6]],[[],["colorfilter",6]],null,[[]],[[["f32",15]]],[[["colormatrix",6]]],[[["f32",15]]],[[["colormatrix",6]]],[[["colormatrix",6]]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["matrixflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["matrixflags",3]],[[]],[[["matrixflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["matrixflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["bool",15],["path",6]]],[[["scalar",6]],[["option",4,["matrix"]],["matrix",3]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["scalar",6]],[[["matrixflags",3]],["bool",15]],[[["bool",15],["path",6]]],[[]],[[["matrixflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[["scalar",6]],["option",4]],[[]],[[["bool",15],["path",6]]],[[["scalar",6],["bool",15]],[["path",6],["option",4,["path"]]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["scalar",6]],[["option",4,["patheffect"]],["patheffect",6]]],[[["scalar",6]],[["option",4,["patheffect"]],["patheffect",6]]],[[["scalar",6]],[["option",4,["patheffect"]],["patheffect",6]]],null,[[]],[[["rect",3],["option",4,["rect"]]],[["onpage",3],["document",3,["onpage"]]]],[[]],[[]],[[],["canvas",3]],[[],["data",6]],[[],["document",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["rect",3]],[[["canvas",3],["option",4,["matrix"]],["matrix",3]]],[[["canvas",3]]],[[],["u32",15]],null,[[]],[[["backendapi",4],["imageinfo",6],["matrix",3]],[["gpudrawhandler",6],["option",4,["gpudrawhandler"]]]],null,[[["backenddrawableinfo",6]]],[[["encodedimageformat",4],["usize",15],["bitmap",6]],[["option",4,["data"]],["data",6]]],[[["pixmap",6],["usize",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],null,null,null,null,null,[[]],[[]],[[],["skfont_edging",4]],[[]],[[],["usize",15]],[[["textencoding",4]],["usize",15]],[[],["edging",4]],[[["skfont_edging",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["scalar",6]]],[[["option",4,["paint"]],["paint",6]]],[[],[["scalar",6],["vec",3,["scalar"]]]],[[["glyphid",6]],[["path",6],["option",4,["path"]]]],[[["point",3],["option",4,["point"]]]],[[]],[[["option",4],["option",4,["paint"]],["paint",6],["option",4]]],[[["option",4,["scalar"]],["scalar",6]]],[[]],[[],["fonthinting",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["option",4,["paint"]],["paint",6]]],[[["option",4,["paint"]],["paint",6],["textencoding",4]]],[[]],[[]],[[],["scalar",6]],[[["bool",15]]],[[["edging",4]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["fonthinting",4]]],[[["bool",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["usize",15]],[[],[["vec",3,["glyphid"]],["glyphid",6]]],[[["textencoding",4]],["usize",15]],[[["textencoding",4]],[["vec",3,["glyphid"]],["glyphid",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],["typeface",6]],[[["unichar",6]],["glyphid",6]],[[]],[[["scalar",6]],["option",4]],null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["variationposition",3]],["fontarguments",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["variationposition",3]],null,[[]],null,null,[[]],[[]],[[],["coordinate",3]],[[]],[[],["coordinate",3]],[[["coordinate",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["coordinate",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],null,null,null,null,null,null,null,[[]],null,null,[[]],[[]],[[["flags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["flags",3]],[[],["fontmetrics",3]],[[]],[[]],[[["flags",3]],["ordering",4]],[[]],[[],["bool",15]],[[],["flags",3]],[[],["fontmetrics",3]],null,[[]],[[]],[[["flags",3]],["bool",15]],[[["fontmetrics",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["flags",3]],["bool",15]],[[["fontmetrics",3]],["bool",15]],[[]],[[["flags",3]],[["ordering",4],["option",4,["ordering"]]]],[[]],[[["bool",15]]],[[],[["option",4,["scalar"]],["scalar",6]]],[[],[["option",4,["scalar"]],["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4,["scalar"]],["scalar",6]]],[[],[["option",4,["scalar"]],["scalar",6]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["axis",3]],[[]],null,[[],["axis",3]],[[["axis",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,[[["axis",3]],["bool",15]],[[["fourbytetag",3],["f32",15],["bool",15]]],[[["bool",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fontstyle",3]],[[],["fontstyle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["weight",3]],[[],["width",3]],[[],["fontstyle",3]],[[],["skfontstyle_slant",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["weight",3]],["bool",15]],[[["width",3]],["bool",15]],[[],["bool",15]],[[["skfontstyle_slant",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fontstyle",3]],[[["weight",3]],["bool",15]],[[["width",3]],["bool",15]],[[["width",3],["slant",4],["weight",3]]],[[],["fontstyle",3]],[[["weight",3]],[["ordering",4],["option",4,["ordering"]]]],[[["width",3]],[["ordering",4],["option",4,["ordering"]]]],[[],["slant",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["weight",3]],[[],["width",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["bool",15]],null,[[]],[[],[["directcontext",6],["option",4,["directcontext"]]]],[[],[["option",4,["dxgi_format"]],["dxgi_format",6]]],[[],["format",4]],[[],[["format",4],["option",4,["format"]]]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendformat",6]],[[],["backendformat",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[],["directcontextid",3]],[[],["resourcecachelimits",3]],[[],["resourcecacheusage",3]],[[],["grbackendapi",4]],[[],["grmipmapped",4]],[[],["grrenderable",4]],[[],["grprotected",4]],[[],["grsurfaceorigin",4]],[[],["grsemaphoressubmitted",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],[[["compressiontype",4]],["backendformat",6]],[[["compressiontype",4]],["backendformat",6]],null,null,[[],[["option",4,["textureresourceinfo"]],["textureresourceinfo",3]]],[[],[["option",4,["textureresourceinfo"]],["textureresourceinfo",3]]],[[]],[[["colortype",4],["renderable",4]],["backendformat",6]],[[],["isize",3]],[[],["isize",3]],null,null,null,null,null,null,[[["directcontextid",3]],["bool",15]],[[["resourcecachelimits",3]],["bool",15]],[[["resourcecacheusage",3]],["bool",15]],[[["grbackendapi",4]],["bool",15]],[[["grmipmapped",4]],["bool",15]],[[["grrenderable",4]],["bool",15]],[[["grprotected",4]],["bool",15]],[[["grsurfaceorigin",4]],["bool",15]],[[["grsemaphoressubmitted",4]],["bool",15]],[[],["semaphoressubmitted",4]],[[]],null,[[]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["drawableinfo",3]]],[[],[["option",4,["drawableinfo"]],["drawableinfo",3]]],null,null,[[],[["option",4,["framebufferinfo"]],["framebufferinfo",3]]],[[],[["textureinfo",3],["option",4,["textureinfo"]]]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["directcontextid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["backendtexture",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["i32",15]],null,null,[[["colortype",4]],["usize",15]],[[],["i32",15]],null,[[],["mipmapped",4]],[[],["mipmapped",4]],[[["directcontextid",3]],["bool",15]],[[["resourcecachelimits",3]],["bool",15]],[[["resourcecacheusage",3]],["bool",15]],[[]],[[]],[[["yuvainfo",6],["surfaceorigin",4],["mipmapped",4]],["option",4]],[[["surfaceorigin",4],["yuvainfo",6]],["option",4]],[[],["grdriverbugworkarounds",3]],[[],["grdriverbugworkarounds",3]],[[["textureresourceinfo",3]]],[[["textureresourceinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4,["directcontext"]]]],[[["dxgi_format",6]]],[[["enum",6]]],[[["textureinfo",3],["mipmapped",4]]],[[["usize",15],["framebufferinfo",3]]],[[],[["directcontext",6],["option",4,["directcontext"]]]],[[["imagelayout",4],["u32",15]]],[[["format",4]]],[[["imageinfo",3]]],[[["imageinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4,["directcontext"]]]],[[["ycbcrconversioninfo",3]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],null,[[["duration",3]]],[[["usize",15]],[["option",4,["backendformat"]],["backendformat",6]]],[[]],[[["data",6]],["bool",15]],[[["usize",15],["bool",15],["option",4,["usize"]]]],[[]],null,[[["option",4,["u32"]],["u32",15]]],[[]],null,[[],["usize",15]],[[],["resourcecachelimits",3]],[[],["usize",15]],[[],["resourcecacheusage",3]],null,null,[[],["usize",15]],[[["backendrendertarget",6],["backendsurfacemutablestate",6]],["bool",15]],[[["backendrendertarget",6],["backendsurfacemutablestate",6]],[["backendsurfacemutablestate",6],["option",4,["backendsurfacemutablestate"]]]],[[["backendtexture",6],["backendsurfacemutablestate",6]],["bool",15]],[[["backendtexture",6],["backendsurfacemutablestate",6]],[["backendsurfacemutablestate",6],["option",4,["backendsurfacemutablestate"]]]],[[["resourcestateenum",6]]],[[["resourcestateenum",6]]],[[["backendsurfacemutablestate",6]]],[[["usize",15]]],[[["resourcecachelimits",3]]],[[["imagelayout",4]]],[[["imagelayout",4]]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["backendtexture",6],["option",4,["backendtexture"]]]],[[],["surfaceorigin",4]],[[],["surfaceorigin",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],null,[[],[["imageinfo",3],["option",4,["imageinfo"]]]],[[],[["imageinfo",3],["option",4,["imageinfo"]]]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["yuvcolorspace",4]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["grcontextoptions_enable",4]],[[],["grcontextoptions_shadercachestrategy",4]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["grcontextoptions_enable",4]],["bool",15]],[[["grcontextoptions_shadercachestrategy",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],null,null,[[["u32",15]]],[[["u32",15]],["i32",15]],[[["u32",15]]],[[["u32",15],["d3d12_cpu_descriptor_handle",3]]],[[["u32",15]]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["i32",15]],[[],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],[[["d3d12_cpu_descriptor_handle",3]]],[[],["i32",15]],[[["u64",15],["u32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u64",15],["u32",15]],["i32",15]],[[],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],[[["u32",15]],["i32",15]],[[["usize",15],["u32",15]],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],[[["d3d12_cpu_descriptor_handle",3]]],[[["u32",15]],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],null,null,[[]],[[["u32",15]],["i32",15]],[[["u32",15]]],null,[[],["luid",3]],[[],["i32",15]],[[["u64",15],["u32",15]]],[[["u32",15]],["d3d12_heap_properties",3]],[[],["d3d12_resource_desc",3]],[[],["d3d12_command_queue_desc",3]],[[],["i32",15]],[[["u32",15]],["u32",15]],[[],["i32",15]],[[],["u64",15]],[[],["i32",15]],[[],["u32",15]],[[["u32",15]],["d3d12_resource_allocation_info",3]],[[["u32",15]]],[[],["i32",15]],null,null,null,null,[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],null,[[],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],null,[[["u32",15]]],[[["i32",15]],["i32",15]],[[["u64",15]],["i32",15]],null,null,[[["u32",15]]],[[["u32",15]]],[[["u64",15]],["i32",15]],[[["u32",15]],["i32",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["comptr",3],["i32",15],["result",4,["comptr","i32"]]]],[[],["backendcontext",3]],[[],["textureresourceinfo",3]],[[],["fenceinfo",3]],[[],["surfaceinfo",3]],[[],["comptr",3]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["idxgiadapter",3]],[[],["id3d12pageable",3]],[[],["id3d12pageable",3]],[[],["id3d12object",3]],[[]],null,[[]],[[["surfaceinfo",3]],["bool",15]],[[["comptr",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,null,[[]],[[["cp",3,["id3d12resource"]],["id3d12resource",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["comptr",3]],[[["cp",3,["id3d12resource"]],["id3d12resource",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["surfaceinfo",3]],["bool",15]],null,null,null,null,null,null,[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["comptr",3]],[[],["guid",3]],[[],["guid",3]],[[],["guid",3]],[[],["guid",3]],null,[[["d3d12_resource_states",6]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["backendstate",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["textureinfo",3]],[[],["framebufferinfo",3]],[[],["surfaceinfo",3]],[[],["backendstate",3]],[[],["grglstandard",4]],[[],["grglformat",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["backendstate",3]],["ordering",4]],[[]],[[],["bool",15]],[[],["textureinfo",3]],[[],["framebufferinfo",3]],[[]],[[]],[[]],[[],["bool",15]],[[["framebufferinfo",3]],["bool",15]],[[["surfaceinfo",3]],["bool",15]],[[["backendstate",3]],["bool",15]],[[["grglstandard",4]],["bool",15]],[[["grglformat",4]],["bool",15]],[[["intoiterator",8]]],[[],["extensions",6]],[[],["extensions",6]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["grglformat",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["uint",6]]],[[["intoiterator",8]]],[[["enum",6]]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["framebufferinfo",3]],["bool",15]],[[["surfaceinfo",3]],["bool",15]],[[["backendstate",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[]],[[["backendstate",3]],[["ordering",4],["option",4,["ordering"]]]],null,[[],["bool",15]],[[]],[[]],null,[[["bool",15]]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["extensionflags",3]],[[],["featureflags",3]],[[],["alloc",3]],[[],["allocflag",3]],[[],["ycbcrconversioninfo",3]],[[],["imageinfo",3]],[[],["getprocof",4]],[[],["drawableinfo",3]],[[],["surfaceinfo",3]],[[],["version",3]],[[],["vkimagelayout",4]],[[],["vkformat",4]],[[],["vkimagetiling",4]],[[],["vksharingmode",4]],[[],["vkfilter",4]],[[],["vkextent2d",3]],[[],["vkoffset2d",3]],[[],["vkrect2d",3]],[[],["vksamplerycbcrmodelconversion",4]],[[],["vksamplerycbcrrange",4]],[[],["vkchromalocation",4]],[[],["vkphysicaldevicefeatures2",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["extensionflags",3]],["ordering",4]],[[["featureflags",3]],["ordering",4]],[[["allocflag",3]],["ordering",4]],[[["version",3]],["ordering",4]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["extensionflags",3]],["bool",15]],[[["featureflags",3]],["bool",15]],[[],["bool",15]],[[["allocflag",3]],["bool",15]],[[],["bool",15]],[[["surfaceinfo",3]],["bool",15]],[[["version",3]],["bool",15]],[[["vkimagelayout",4]],["bool",15]],[[["vkformat",4]],["bool",15]],[[["vkimagetiling",4]],["bool",15]],[[["vksharingmode",4]],["bool",15]],[[["vkfilter",4]],["bool",15]],[[["vksamplerycbcrmodelconversion",4]],["bool",15]],[[["vksamplerycbcrrange",4]],["bool",15]],[[["vkchromalocation",4]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["devicesize",6],["devicememory",6],["allocflag",3]],["alloc",3]],[[["imageinfo",3],["imagelayout",4]]],[[["u32",15],["imageinfo",3],["imagelayout",4]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[],["usize",15]],null,[[],["usize",15]],[[],["cstr",3]],[[["extensionflags",3]],["bool",15]],[[["featureflags",3]],["bool",15]],[[["allocflag",3]],["bool",15]],[[["surfaceinfo",3]],["bool",15]],[[["version",3]],["bool",15]],[[["device",6],["instance",6],["physicaldevice",6]],["backendcontext",3]],[[["chromalocation",4],["samplerycbcrrange",4],["filter",4],["bool32",6],["u64",15],["samplerycbcrmodelconversion",4],["formatfeatureflags",6]],["ycbcrconversioninfo",3]],[[["image",6],["imagetiling",4],["alloc",3],["imagelayout",4],["format",4],["u32",15]]],[[["usize",15]]],[[["device",6],["instance",6],["physicaldevice",6]],["backendcontext",3]],[[["u64",15],["samplerycbcrrange",4],["bool32",6],["format",4],["chromalocation",4],["filter",4],["samplerycbcrmodelconversion",4],["formatfeatureflags",6]],["ycbcrconversioninfo",3]],[[]],[[]],[[]],null,null,[[["extensionflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[["featureflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[["allocflag",3]],[["ordering",4],["option",4,["ordering"]]]],[[["version",3]],[["ordering",4],["option",4,["ordering"]]]],[[],["usize",15]],null,null,[[]],[[]],[[]],null,null,null,[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[["protected",4]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["flags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[]],[[["flags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["tilemode",4]],[["option",4,["shader"]],["shader",6]]],[[["flags",3]],["bool",15]],[[]],[[["flags",3]],[["ordering",4],["option",4,["ordering"]]]],[[["scalar",6],["tilemode",4]],[["option",4,["shader"]],["shader",6]]],[[]],[[["bool",15]]],[[]],[[]],[[["tilemode",4]],[["option",4,["shader"]],["shader",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["scalar",6],["tilemode",4]],[["option",4,["shader"]],["shader",6]]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,[[]],[[],["i32",15]],[[],["i32",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4,["usize"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["usize",15],["option",4,["usize"]]],[["usize",15],["option",4,["usize"]]]],[[["usize",15]],["usize",15]],null,null,null,null,null,[[]],[[]],[[],["skhighcontrastconfig_invertstyle",4]],[[]],[[["skhighcontrastconfig_invertstyle",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["highcontrastconfig",3]],[[]],null,[[]],[[["highcontrastconfig",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[]],[[]],null,[[],["bool",15]],[[["highcontrastconfig",3]],["bool",15]],[[["highcontrastconfig",3]],[["option",4,["colorfilter"]],["colorfilter",6]]],[[["invertstyle",4],["scalar",6],["bool",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["alphatype",4]],null,[[["bool",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["irect",3]],null,[[]],[[],["cubicresampler",3]],[[],["skimage_compressiontype",4]],[[],["skimage_bitdepth",4]],[[],["skimage_cachinghint",4]],[[]],[[]],[[]],[[]],[[],["colorspace",6]],[[],["colortype",4]],[[]],[[],["isize",3]],[[["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[["i32",15],["encodedimageformat",4]],[["option",4,["data"]],["data",6]]],[[],[["option",4,["data"]],["data",6]]],[[["cubicresampler",3]],["bool",15]],[[["skimage_compressiontype",4]],["bool",15]],[[["skimage_bitdepth",4]],["bool",15]],[[["skimage_cachinghint",4]],["bool",15]],[[["directcontext",6]]],[[["directcontext",6]]],[[["flushinfo",3],["directcontext",6]],["semaphoressubmitted",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["alphatype",4],["recordingcontext",6],["colortype",4],["backendtexture",6],["surfaceorigin",4]],[["option",4,["image"]],["image",6]]],[[["bitmap",6]],[["option",4,["image"]],["image",6]]],[[["recordingcontext",6],["data",6],["compressiontype",4]]],[[],[["option",4,["image"]],["image",6]]],[[["imagegenerator",6]],[["option",4,["image"]],["image",6]]],[[["yuvcolorspace",4],["directcontext",6],["surfaceorigin",4]]],[[["bitdepth",4],["option",4,["paint"]],["option",4,["matrix"]],["matrix",3],["paint",6]],[["option",4,["image"]],["image",6]]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["usize",15],["imageinfo",6]],[["option",4,["image"]],["image",6]]],[[["alphatype",4],["recordingcontext",6],["colortype",4],["backendtexture",6],["surfaceorigin",4]],[["option",4,["image"]],["image",6]]],[[["recordingcontext",6],["yuvapixmaps",6]],[["option",4,["image"]],["image",6]]],[[["yuvabackendtextures",6],["recordingcontext",6]],[["option",4,["image"]],["image",6]]],[[],["bool",15]],[[]],[[]],[[]],[[],["i32",15]],[[],["imageinfo",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["recordingcontext",6]],["bool",15]],[[]],[[["cubicresampler",3]],["bool",15]],[[],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[["compressiontype",4]],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[["cachinghint",4]],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[],[["option",4,["image"]],["image",6]]],[[["compressiontype",4],["data",6],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["mipmapped",4],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["mipmapped",4],["budgeted",3],["directcontext",6]],[["option",4,["image"]],["image",6]]],[[["option",4,["recordingcontext"]],["recordingcontext",6],["imagefilter",6]],["option",4]],[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],[[["usize",15],["imageinfo",6],["cachinghint",4]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["usize",15],["imageinfo",6],["cachinghint",4]],["bool",15]],[[],[["option",4,["image"]],["image",6]]],[[["pixmap",6]],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["option",4,["shader"]],["shader",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[]],[[],["i32",15]],[[],[["option",4,["image"]],["image",6]]],[[]],null,null,null,null,[[["scalar",6],["region",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[],["skimagefilter_mapdirection",4]],[[]],[[],["option",4]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],["option",4]],[[],["rect",3]],[[],["usize",15]],[[],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["skimagefilter_mapdirection",4]],["bool",15]],[[],["option",4]],[[["mapdirection",4],["matrix",3]],["irect",3]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["paint",6]],["option",4]],[[],["option",4]],[[["usize",15]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[["usize",15]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[]],[[["scalar",6]],["option",4]],[[["tilemode",4],["bool",15],["scalar",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[],["option",4]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["matrix",3]],[["option",4,["imagefilter"]],["imagefilter",6]]],null,null,null,null,null,null,[[["scalar",6],["region",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6],["bool",15]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["croprect",3]],[[],["arithmeticfpinputs",3]],[[],["skimagefilters_dither",4]],[[]],[[]],[[]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],null,[[["croprect",3]],["bool",15]],[[["arithmeticfpinputs",3]],["bool",15]],[[["skimagefilters_dither",4]],["bool",15]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["irect",3]]],[[["irect",3]]],[[["option",4,["croprect"]],["croprect",3]]],[[["croprect",3]]],[[["rect",3]]],[[["rect",3]]],[[]],[[]],[[]],[[]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[]],[[]],[[]],[[]],null,[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["bool",15],["scalar",6],["tilemode",4]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["matrix",3]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["croprect",3]],["bool",15]],[[["arithmeticfpinputs",3]],["bool",15]],[[["f32",15],["bool",15]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["paint",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["rect",3],["option",4,["rect"]]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["dither",4]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[["scalar",6]],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["scalar",6],["matrix",3]],[["option",4,["patheffect"]],["patheffect",6]]],[[],["colorfilter",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["typemask",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[],["typemask",3]],[[],["matrix",3]],[[],["member",4]],[[],["affinemember",4]],[[],["skapplyperspectiveclip",4]],[[],["skmatrix_scaletofit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typemask",3]],["ordering",4]],[[]],[[["matrix",3]],["matrix",3]],[[],["bool",15]],[[["option",4,["matrix"]],["matrix",3]],[["option",4,["size"]],["size",3]]],[[]],[[]],[[]],[[]],[[]],[[["typemask",3]],["bool",15]],[[],["bool",15]],[[["member",4]],["bool",15]],[[["affinemember",4]],["bool",15]],[[["skapplyperspectiveclip",4]],["bool",15]],[[["skmatrix_scaletofit",4]],["bool",15]],[[["intoiterator",8]]],[[["scalar",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],[["option",4,["matrix"]],["matrix",3]]],[[["scaletofit",4]],["option",4]],[[]],[[],["typemask",3]],[[],["bool",15]],[[]],[[]],[[]],[[],["matrix",3]],[[["member",4]]],[[["affinemember",4]]],[[["usize",15]]],[[["member",4]]],[[["affinemember",4]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[],[["option",4,["matrix"]],["matrix",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["point",3]],[[],["point",3]],[[]],[[]],[[["scalar",6]],[["option",4,["scalar"]],["scalar",6]]],[[]],[[],[["rect",3],["option",4,["rect"]]]],[[]],[[["applyperspectiveclip",4]]],[[],["vector",6]],[[]],[[]],[[["scalar",6]],["point",3]],[[],["scalar",6]],[[]],[[],["scalar",6]],[[["matrix",3]]],[[["typemask",3]],["bool",15]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[["typemask",3]],[["ordering",4],["option",4,["ordering"]]]],[[],["scalar",6]],[[],["scalar",6]],[[["matrix",3]]],[[],["bool",15]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["scalar",6]],[[],["bool",15]],[[],["option",4]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[["bool",15]]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[],["bool",15]],[[["scaletofit",4]],["bool",15]],[[["scalar",6]]],[[["rsxform",3]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["matrix",3]],[["option",4,["patheffect"]],["patheffect",6]]],[[],[["option",4,["patheffect"]],["patheffect",6]]],[[["pathop",4]],["patheffect",6]],null,null,null,null,null,null,null,[[],["colorfilter",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["f32",15]],[[],[["blendmode",4],["option",4,["blendmode"]]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],["blendmode",4]],[[["blendmode",4]],["blendmode",4]],[[],[["option",4,["blender"]],["blender",6]]],[[],["color",3]],[[],["color4f",3]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[["rect",3],["option",4,["rect"]],["path",6]],[["path",6],["option",4,["path"]]]],[[["option",4,["rect"]],["rect",3],["path",6],["matrix",3]],[["path",6],["option",4,["path"]]]],[[],[["option",4,["imagefilter"]],["imagefilter",6]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4,["maskfilter"]],["maskfilter",6]]],[[],["paint",6]],[[],["bool",15]],[[],[["option",4,["patheffect"]],["patheffect",6]]],[[]],[[["u8",15]]],[[["f32",15]]],[[["bool",15]]],[[["u8",15]]],[[["blendmode",4]]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[["cap",4]]],[[["join",4]]],[[["scalar",6]]],[[["scalar",6]]],[[["style",4]]],[[],[["option",4,["shader"]],["shader",6]]],[[],["cap",4]],[[],["join",4]],[[],["scalar",6]],[[],["scalar",6]],[[],["style",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["scalar",6]]],[[["scalar",6]]],[[["option",4]]],[[["path",6]]],[[["matrix",3],["path",6]]],[[["bool",15]]],[[["option",4]]],[[]],[[["option",4]]],[[]],[[],["usize",15]],[[["scalar",6],["bool",15]]],[[["arcsize",4],["scalar",6],["pathdirection",4]]],[[["scalar",6]]],[[],[["path",6],["option",4,["path"]]]],[[]],[[]],[[["pathsegmentmask",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[["scalar",6]]],[[],["pathsegmentmask",3]],[[],["skpath_arcsize",4]],[[],["skpath_addpathmode",4]],[[],["skpath_verb",4]],[[]],[[]],[[]],[[]],[[]],[[["pathsegmentmask",3]],["ordering",4]],[[]],[[],["rect",3]],[[["scalar",6]]],[[],[["option",4,["scalar"]],["scalar",6]]],[[],["scalar",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["scalar",6],["usize",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["data",6]],[["path",6],["option",4,["path"]]]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["data",6]],[[["bool",15]],["data",6]],[[]],[[]],[[["pathsegmentmask",3]],["bool",15]],[[["skpath_arcsize",4]],["bool",15]],[[["skpath_addpathmode",4]],["bool",15]],[[["skpath_verb",4]],["bool",15]],[[["intoiterator",8]]],[[],["pathfilltype",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["skpathverb",4]],["skpath_verb",4]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["font",6]]],[[],[["path",6],["option",4,["path"]]]],[[],["u32",15]],[[["usize",15]],[["point",3],["option",4,["point"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["scalar",6],["path",6]],[["path",6],["option",4,["path"]]]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["path",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["bool",15]],["bool",15]],[[],[["rect",3],["option",4,["rect"]]]],[[["bool",15]],["bool",15]],[[],["option",4]],[[],[["rrect",3],["option",4,["rrect"]]]],[[],["bool",15]],[[],["bool",15]],[[],[["point",3],["option",4,["point"]]]],[[]],[[]],[[],["path",6]],[[["matrix",3]],["path",6]],[[]],[[["pathsegmentmask",3]],["bool",15]],[[["bool",15],["path",6]],["iter",3]],[[["path",6]],["rawiter",3]],[[]],[[["filltype",4]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["pathop",4],["path",6]],["option",4]],[[]],[[["usize",15],["pathdirection",4]]],[[["pathsegmentmask",3]],[["ordering",4],["option",4,["ordering"]]]],[[],["verb",4]],[[],["usize",15]],[[["bool",15]]],[[]],[[["arcsize",4],["scalar",6],["pathdirection",4]]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["path",6]]],[[]],[[]],[[["usize",15],["pathdirection",4]]],[[],["segmentmask",3]],[[],["data",6]],[[["bool",15]]],[[["pathfilltype",4]]],[[["bool",15]]],[[]],[[["bool",15],["path",6]],["iter",3]],[[["path",6]],["rawiter",3]],[[]],[[],["option",4]],[[]],[[]],[[["path",6]]],[[]],[[],[["rect",3],["option",4,["rect"]]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["pathencoding",4]],["string",3]],[[]],[[]],[[["matrix",3]]],[[["applyperspectiveclip",4],["matrix",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["path",6]],[[["matrix",3]],["path",6]],[[["applyperspectiveclip",4],["matrix",3]],["path",6]],null,null,null,null,null,[[]],[[]],[[],["skpath1dpatheffect_style",4]],[[]],[[["skpath1dpatheffect_style",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["style",4],["scalar",6],["path",6]],[["option",4,["patheffect"]],["patheffect",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["path",6],["matrix",3]],["patheffect",6]],null,null,[[],[["dashinfo",3],["option",4,["dashinfo"]]]],[[]],[[]],[[],["dashinfo",3]],[[]],[[],["patheffect",6]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["dashinfo",3]],["bool",15]],[[["strokerec",6],["path",6]],["option",4]],[[["path",6],["strokerec",6],["path",6]],["bool",15]],[[["path",6],["path",6],["matrix",3],["strokerec",6]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,[[]],[[["scalar",6],["matrix",3]],[["option",4,["patheffect"]],["patheffect",6]]],[[["matrix",3]],[["option",4,["patheffect"]],["patheffect",6]]],[[],[["option",4,["patheffect"]],["patheffect",6]]],[[["pathop",4]],["patheffect",6]],[[["dashinfo",3]],["bool",15]],[[],["bool",15]],[[["style",4],["scalar",6],["path",6]],[["option",4,["patheffect"]],["patheffect",6]]],[[["path",6],["matrix",3]],["patheffect",6]],null,[[["cap",4],["scalar",6],["join",4]],[["option",4,["patheffect"]],["patheffect",6]]],[[],["patheffect",6]],[[]],[[["scalar",6]],[["option",4,["patheffect"]],["patheffect",6]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[["matrixflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["matrixflags",3]],[[]],[[["matrixflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["matrixflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["bool",15],["path",6]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["scalar",6]],[[["scalar",6]],[["option",4,["matrix"]],["matrix",3]]],[[["matrixflags",3]],["bool",15]],[[["bool",15],["path",6]]],[[],["bool",15]],[[]],[[["matrixflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[["scalar",6]],["option",4]],[[]],[[["scalar",6],["bool",15]],[["path",6],["option",4,["path"]]]],[[["bool",15]]],[[["bool",15],["path",6]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[["structureelementnode",3]]],[[["f32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[],["attributelist",6]],[[],["attributelist",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["skpdf_documentstructuretype",4]],[[]],null,null,[[]],[[],["metadata",3]],[[]],null,[[["skpdf_documentstructuretype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["str",15]],null,[[]],[[["option",4,["metadata"]],["metadata",3]],["document",3]],[[],["i32",15]],null,null,null,[[]],[[["vec",3,["structureelementnode"]],["structureelementnode",3]]],[[]],[[["i32",15]]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[["usize",15],["scalar",6]],[["option",4,["shader"]],["shader",6]]],[[["usize",15],["scalar",6]],[["option",4,["shader"]],["shader",6]]],null,[[["option",4,["bbhfactory"]],["bbhfactory",6]],["canvas",3]],[[],[["option",4,["drawable"]],["drawable",6]]],[[["rect",3],["option",4,["rect"]]],[["picture",6],["option",4,["picture"]]]],[[]],[[],[["canvas",3],["option",4,["canvas"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["irect",3]],[[],["iterator",3]],[[],["cliperator",3]],[[],["spanerator",3]],[[],["skregion_op",4]],[[]],[[]],[[]],[[]],[[["regionop",4]]],[[],["usize",15]],[[["ipoint",3]],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[["skregion_op",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[],["region",6]],[[["path",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["region",6]],[[["region",6]],["iterator",3]],[[["region",6]],["cliperator",3]],[[["region",6],["i32",15]],["spanerator",3]],[[],["iterator",3]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[],["usize",15]],[[],["irect",3]],[[],["irect",3]],[[]],[[]],[[["region",6]],["iterator",3]],[[]],[[]],[[],["bool",15]],[[],[["region",6],["option",4,["region"]]]],[[["region",6]],["bool",15]],[[],["bool",15]],[[["region",6],["path",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[["region",6]]],[[]],[[]],[[]],[[]],[[]],[[],["region",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["rrect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["rrect",3]],[[],["skrrect_type",4]],[[],["skrrect_corner",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["bool",15]],["string",3]],[[],["bool",15]],[[["skrrect_type",4]],["bool",15]],[[["skrrect_corner",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["type",4]],[[]],[[]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[["corner",4]],["vector",6]],[[],["usize",15]],[[],["rect",3]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[["scalar",6]]],[[],["vector",6]],[[]],[[]],[[]],[[["matrix",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["options",3]],[[],["childptr",4]],[[],["skruntimeeffect_childtype",4]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[["options",3]],["bool",15]],[[["skruntimeeffect_childtype",4]],["bool",15]],[[],[["option",4,["child"]],["child",6]]],[[],[["uniform",6],["option",4,["uniform"]]]],[[],[["uniform",6],["option",4,["uniform"]]]],[[],["flags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[["blender",6]]],[[["colorfilter",6]]],[[["shader",6]]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["option",4,["blender"]],["blender",6]]],[[],[["option",4,["colorfilter"]],["colorfilter",6]]],[[],[["string",3],["result",4,["runtimeeffect","string"]],["runtimeeffect",6]]],[[],[["string",3],["result",4,["runtimeeffect","string"]],["runtimeeffect",6]]],[[],[["string",3],["result",4,["runtimeeffect","string"]],["runtimeeffect",6]]],[[["bool",15],["recordingcontext",6],["imageinfo",6]],[["image",6],["option",4,["image"]]]],[[["bool",15]],[["option",4,["shader"]],["shader",6]]],[[],["str",15]],[[],["str",15]],[[["options",3]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["str",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["childtype",4]],[[],["childtype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["usize",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["flags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[],["skruntimeeffect_uniform_type",4]],[[]],[[]],[[["flags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[["flags",3]],["bool",15]],[[["skruntimeeffect_uniform_type",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["flags",3]],["bool",15]],[[]],[[["flags",3]],[["ordering",4],["option",4,["ordering"]]]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["filteroptions",3]],[[],["samplingoptions",3]],[[]],[[]],null,[[]],[[["filteroptions",3]],["bool",15]],[[["samplingoptions",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["filteroptions",3]]],[[["cubicresampler",3]]],[[["filtermode",4]]],[[]],[[]],[[]],[[]],[[]],null,null,[[["filteroptions",3]],["bool",15]],[[["samplingoptions",3]],["bool",15]],[[["filtermode",4],["mipmapmode",4]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["gradienttype",4]],[[],["gradientinfo",3]],[[],["skshader_gradienttype",4]],[[]],[[]],[[]],[[],["usize",15]],null,null,[[["gradienttype",4]],["bool",15]],[[["gradientinfo",3]],["bool",15]],[[["skshader_gradienttype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["usize",15],["scalar",6]],["option",4]],[[]],[[]],[[]],null,[[]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["tilemode",4]],["option",4]],[[["gradienttype",4]],["bool",15]],[[["gradientinfo",3]],["bool",15]],[[["scalar",6],["tilemode",4]],["option",4]],null,[[["tilemode",4]],["option",4]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["scalar",6]],["option",4]],[[["scalar",6],["tilemode",4]],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["matrix",3]]],null,null,null,null,null,null,[[],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[],["maskfilter",6]],[[],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[],["shader",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["skshaper_runhandler",3]],[[],["skshaper_runhandler",3]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["skshaper_feature",3]],[[]],[[]],[[["runinfo",3]]],[[]],[[]],[[],["font",6]],[[],["cstr",3]],[[],["u8",15]],[[],["fourbytetag",3]],null,[[],["usize",15]],[[],["point",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],null,[[]],[[]],[[],[["option",4,["textblob"]],["textblob",6]]],[[]],[[["str",15]],["textblobbuilderrunhandler",3]],[[["str",15],["u8",15]],[["borrows",3,["bidiruniterator"]],["option",4,["borrows"]]]],[[],["option",4]],[[["str",15],["font",6]],[["borrows",3,["fontruniterator"]],["fontruniterator",6]]],[[["str",15]],[["borrows",3,["scriptruniterator"]],["scriptruniterator",6]]],[[["str",15],["u8",15]],[["borrows",3,["bidiruniterator"]],["option",4,["borrows"]]]],[[]],[[["str",15],["fourbytetag",3]],[["borrows",3,["scriptruniterator"]],["scriptruniterator",6]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],[["languageruniterator",6],["option",4,["languageruniterator"]]]],[[["usize",15],["u8",15]],["bidiruniterator",6]],[[["font",6],["usize",15]],["fontruniterator",6]],[[],["languageruniterator",6]],[[["usize",15],["u8",15]],["scriptruniterator",6]],[[]],[[]],[[["runinfo",3]],["buffer",3]],null,[[["runinfo",3]]],[[["font",6],["bool",15],["str",15],["scalar",6]]],[[["font",6],["bool",15],["str",15],["scalar",6]],["option",4]],[[["fontruniterator",6],["bidiruniterator",6],["scriptruniterator",6],["str",15],["languageruniterator",6],["scalar",6]]],[[["fontruniterator",6],["bidiruniterator",6],["scriptruniterator",6],["str",15],["languageruniterator",6],["scalar",6]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],null,[[]],[[["runinfo",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],null,null,[[]],[[]],[[]],null,null,null,[[["runinfo",3]],["buffer",3]],[[["runinfo",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["patheffect",6]],[[["cap",4],["scalar",6],["join",4]],[["option",4,["patheffect"]],["patheffect",6]]],null,null,null,null,null,null,null,null,null,[[["paint",6]]],[[["path",6],["path",6]],["bool",15]],[[["path",6]],["bool",15]],[[]],[[]],[[]],[[]],[[],["cap",4]],[[],["skstrokerec_initstyle",4]],[[],["skstrokerec_style",4]],[[]],[[]],[[["skstrokerec_initstyle",4]],["bool",15]],[[["skstrokerec_style",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["paint",6]]],[[["strokerec",6]],["bool",15]],[[]],[[]],[[],["scalar",6]],[[["paint",6],["style",4]],["scalar",6]],[[["cap",4],["join",4],["scalar",6]],["scalar",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["join",4]],[[],["scalar",6]],[[],["bool",15]],[[["initstyle",4]]],[[]],[[]],[[],["scalar",6]],[[]],[[]],[[["scalar",6]]],[[["cap",4],["join",4],["scalar",6]]],[[["scalar",6]]],[[],["style",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["scalar",6]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["canvas",3]],[[],[["option",4,["surfacecharacterization"]],["surfacecharacterization",6]]],[[],["sksurface_contentchangemode",4]],[[],["sksurface_backendhandleaccess",4]],[[],["sksurface_backendsurfaceaccess",4]],[[]],[[]],[[]],[[["canvas",3],["option",4,["paint"]],["paint",6]]],[[],["bool",15]],[[],["bool",15]],[[["sksurface_contentchangemode",4]],["bool",15]],[[["sksurface_backendhandleaccess",4]],["bool",15]],[[["sksurface_backendsurfaceaccess",4]],["bool",15]],[[]],[[]],[[]],[[["backendsurfaceaccess",4],["flushinfo",3]],["semaphoressubmitted",4]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["recordingcontext",6],["backendrendertarget",6],["surfaceprops",3],["colortype",4],["option",4,["surfaceprops"]],["surfaceorigin",4]],["option",4]],[[["recordingcontext",6],["surfaceprops",3],["colortype",4],["option",4,["surfaceprops"]],["backendtexture",6],["surfaceorigin",4]],["option",4]],[[],["u32",15]],[[["backendhandleaccess",4]],[["option",4,["backendrendertarget"]],["backendrendertarget",6]]],[[["backendhandleaccess",4]],[["backendtexture",6],["option",4,["backendtexture"]]]],[[]],[[]],[[]],[[],["i32",15]],[[],["imageinfo",6]],[[],["image",6]],[[],[["option",4,["image"]],["image",6]]],[[]],[[]],[[]],[[["surfacecharacterization",6]],["bool",15]],[[],["option",4]],[[["imageinfo",6],["option",4,["surfaceprops"]],["surfaceprops",3]],["option",4]],[[["surfaceprops",3],["imageinfo",6],["option",4,["surfaceprops"]]],[["option",4,["borrows"]],["borrows",3,["surface"]]]],[[],["option",4]],[[["option",4,["surfaceprops"]],["recordingcontext",6],["surfaceprops",3],["imageinfo",6],["budgeted",3],["surfaceorigin",4]],["option",4]],[[["surfacecharacterization",6],["recordingcontext",6],["budgeted",3]],["option",4]],[[["imageinfo",6]],[["option",4,["surface"]],["surface",6]]],[[],[["option",4,["surface"]],["surface",6]]],[[["contentchangemode",4]]],[[],[["borrows",3,["pixmap"]],["option",4,["borrows"]]]],[[],["surfaceprops",3]],[[["usize",15],["imageinfo",6]],["bool",15]],[[["bitmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[],[["option",4,["recordingcontext"]],["recordingcontext",6]]],[[["backendtexture",6],["surfaceorigin",4]],["bool",15]],[[["backendtexture",6],["surfaceorigin",4]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["i32",15]],[[["bitmap",6]]],[[["pixmap",6]]],null,null,null,null,null,null,[[]],[[]],[[]],[[["flags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[]],[[["flags",3]],["ordering",4]],[[]],[[],["bool",15]],[[],["flags",3]],[[]],[[]],[[]],[[]],[[]],[[],["data",6]],[[["flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["flags",3]],["bool",15]],[[],["canvas",3]],[[]],[[["flags",3]],[["ordering",4],["option",4,["ordering"]]]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["option",4]],["colorfilter",6]],[[],["colorfilter",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["textrange",6]]],[[["i32",15]]],[[["placeholderstyle",3]]],[[["textshadow",3]]],[[]],null,[[],["str",15]],null,[[]],[[],["scalar",6]],[[["typeface",6]]],null,[[],[["option",4,["paint"]],["paint",6]]],null,null,null,[[]],[[]],[[["textdecoration",3]]],[[]],[[],["u32",15]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["paragraph",6]],[[]],[[],["textbox",3]],[[],["stylemetrics",3]],[[],["linemetrics",3]],[[],["textshadow",3]],[[],["textdecoration",3]],[[],["decoration",3]],[[],["placeholderstyle",3]],[[],["block",3]],[[],["placeholder",3]],[[],["skia_textlayout_affinity",4]],[[],["skia_textlayout_rectheightstyle",4]],[[],["skia_textlayout_rectwidthstyle",4]],[[],["skia_textlayout_textalign",4]],[[],["skia_textlayout_textdirection",4]],[[],["skia_textlayout_positionwithaffinity",3]],[[],["skia_textlayout_textbaseline",4]],[[],["skia_textlayout_textheightbehavior",4]],[[],["skia_textlayout_drawoptions",4]],[[],["skia_textlayout_textdecorationstyle",4]],[[],["skia_textlayout_textdecorationmode",4]],[[],["skia_textlayout_styletype",4]],[[],["skia_textlayout_placeholderalignment",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["textdecoration",3]],["ordering",4]],[[],["color",3]],null,null,[[]],[[],["bool",15]],[[],["bool",15]],[[],["i32",15]],[[],["decoration",3]],[[],["decoration",3]],[[]],[[]],[[],["decoration",3]],[[],["placeholderstyle",3]],[[]],[[]],[[],["skia_textlayout_affinity",4]],[[],["skia_textlayout_rectheightstyle",4]],[[],["skia_textlayout_rectwidthstyle",4]],[[],["skia_textlayout_textalign",4]],[[],["skia_textlayout_positionwithaffinity",3]],[[],["skia_textlayout_textbaseline",4]],[[],["skia_textlayout_textdecorationstyle",4]],[[],["skia_textlayout_textdecorationmode",4]],[[],["skia_textlayout_styletype",4]],[[],["skia_textlayout_placeholderalignment",4]],[[],[["typeface",6],["option",4,["typeface"]]]],[[["fontstyle",3],["unichar",6]],[["typeface",6],["option",4,["typeface"]]]],null,[[],["bool",15]],[[]],null,[[]],[[],["drawoptions",4]],[[],["textalign",4]],[[],["str",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],null,null,null,[[["textbox",3]],["bool",15]],[[],["bool",15]],[[["textdecoration",3]],["bool",15]],[[["decoration",3]],["bool",15]],[[],["bool",15]],[[["block",3]],["bool",15]],[[["placeholder",3]],["bool",15]],[[["skia_textlayout_affinity",4]],["bool",15]],[[["skia_textlayout_rectheightstyle",4]],["bool",15]],[[["skia_textlayout_rectwidthstyle",4]],["bool",15]],[[["skia_textlayout_textalign",4]],["bool",15]],[[["skia_textlayout_textdirection",4]],["bool",15]],[[["skia_textlayout_textbaseline",4]],["bool",15]],[[["skia_textlayout_textheightbehavior",4]],["bool",15]],[[["skia_textlayout_drawoptions",4]],["bool",15]],[[["skia_textlayout_textdecorationstyle",4]],["bool",15]],[[["skia_textlayout_textdecorationmode",4]],["bool",15]],[[["skia_textlayout_styletype",4]],["bool",15]],[[["skia_textlayout_placeholderalignment",4]],["bool",15]],[[["textstyle",6]],["bool",15]],[[["textstyle",6]],["bool",15]],[[["intoiterator",8]]],[[],[["option",4,["fontmgr"]],["fontmgr",6]]],[[],["str",15]],[[["fontstyle",3]],[["typeface",6],["vec",3,["typeface"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],["bool",15]],[[],["fontfamilies",3]],[[],["fontfamilies",3]],[[]],[[],["usize",15]],[[],["fontmetrics",3]],null,[[],["scalar",6]],[[],["scalar",6]],[[],["fontstyle",3]],[[],["fontstyle",3]],[[],["bool",15]],[[],[["option",4,["paint"]],["paint",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],["positionwithaffinity",3]],[[],[["vec",3,["linemetrics"]],["linemetrics",3]]],[[],[["vec",3,["textbox"]],["textbox",3]]],[[["usize",15],["rectheightstyle",4],["rectwidthstyle",4],["range",3,["usize"]]],[["vec",3,["textbox"]],["textbox",3]]],[[["usize",15],["range",3,["usize"]]],["vec",3]],[[["usize",15],["range",3,["usize"]]],["usize",15]],[[["u32",15]],[["usize",15],["range",3,["usize"]]]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["scalar",6]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["scalar",6]]],[[],["scalar",6]],null,[[],["scalar",6]],[[],["usize",15]],null,[[],["str",15]],[[],["scalar",6]],[[]],[[["styletype",4],["textstyle",6]],["bool",15]],[[],["scalar",6]],[[],[["usize",15],["option",4,["usize"]]]],[[],["scalar",6]],[[],["scalar",6]],null,[[],["str",15]],[[["textbox",3]],["bool",15]],[[["textdecoration",3]],["bool",15]],[[["decoration",3]],["bool",15]],[[["block",3]],["bool",15]],[[["placeholder",3]],["bool",15]],[[]],[[["paragraphstyle",6]]],[[],["paragraphcache",6]],[[]],[[]],[[]],[[]],[[]],[[["textstyle",6]]],[[["f64",15]]],[[["placeholderalignment",4],["textbaseline",4],["scalar",6]]],[[["textrange",6],["textstyle",6]]],[[["usize",15],["placeholderstyle",3],["textstyle",6],["blockrange",6],["range",3,["usize"]],["textrange",6]]],[[]],null,[[["canvas",3]]],[[],["paragraphcache",6]],[[],["paragraphcache",6]],[[["textdecoration",3]],[["ordering",4],["option",4,["ordering"]]]],[[],["textstyle",6]],[[]],null,[[]],[[["textstyle",6]]],null,null,null,[[["typeface",6],["option",4]],["usize",15]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[["drawoptions",4]]],[[]],[[]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[["bool",15]]],[[]],[[["bool",15]]],[[["bool",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["bool",15]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[["paragraphstyle",6]]],[[]],[[["bool",15]]],[[["strutstyle",6]]],[[]],[[["textalign",4]]],[[["textbaseline",4]]],[[["textdirection",4]]],[[["textheightbehavior",4]]],[[["textstyle",6]]],[[]],[[["scalar",6]]],[[]],[[["usize",15]]],null,[[],["bool",15]],[[],["strutstyle",6]],null,null,null,[[]],[[]],[[]],[[],["textalign",4]],[[],["textbaseline",4]],null,[[],["textdirection",4]],[[],["textheightbehavior",4]],[[],["textstyle",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["bool",15]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["typeface",6],["option",4,["typeface"]]]],[[]],[[],["bool",15]],[[],[["usize",15],["option",4,["usize"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["usize",15]],null,null,[[],["scalar",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["sktrimpatheffect_mode",4]],[[]],[[["sktrimpatheffect_mode",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["scalar",6]],[["option",4,["patheffect"]],["patheffect",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["localizedstring",3]],[[],["sktypeface_serializebehavior",4]],[[]],[[]],[[["fontarguments",3]],[["typeface",6],["option",4,["typeface"]]]],[[["fonttabletag",6]],[["option",4,["data"]],["data",6]]],[[],["usize",15]],[[],["usize",15]],[[],[["typeface",6],["option",4,["typeface"]]]],[[["localizedstring",3]],["bool",15]],[[["sktypeface_serializebehavior",4]],["bool",15]],[[],["bool",15]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],["fontstyle",3]],[[]],[[]],[[],[["typeface",6],["option",4,["typeface"]]]],[[["fontstyle",3]],[["typeface",6],["option",4,["typeface"]]]],[[],["bool",15]],[[["fonttabletag",6]],["usize",15]],[[["fonttabletag",6]],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["localizedstring",3]],["bool",15]],[[["fontstyle",3]],["option",4]],[[]],[[],[["option",4,["string"]],["string",3]]],[[["serializebehavior",4]],["data",6]],[[],["usize",15]],null,[[],[["vec",3,["fonttabletag"]],["option",4,["vec"]]]],[[["textencoding",4]],["usize",15]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["unichar",6]],["glyphid",6]],[[]],[[],["fontid",6]],[[],[["i32",15],["option",4,["i32"]]]],[[],[["option",4,["vec"]],["vec",3,["variationaxis"]]]],[[],[["option",4,["vec"]],["vec",3,["coordinate"]]]],null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["patch3d",3]],[[],["camera3d",3]],[[]],[[]],[[]],[[]],[[],[["typeface",6],["option",4,["typeface"]]]],[[],["scalar",6]],[[["patch3d",3]],["bool",15]],[[["camera3d",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["path",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["patch3d",3]],["bool",15]],[[["camera3d",3]],["bool",15]],[[]],[[]],[[],["ownedcanvas",3]],null,null,null,[[["patch3d",3]],["matrix",3]],[[]],[[]],[[["fontstyle",3]]],[[["glyphid",6],["f32",15]]],[[["fontmetrics",3]]],null,null,[[]],[[]],[[["m44",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["skparsepath_pathencoding",4]],[[]],[[],["skparsepath_pathencoding",4]],[[["skparsepath_pathencoding",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[],[["path",6],["option",4,["path"]]]],[[]],[[]],[[]],[[["path",6]],["string",3]],[[["pathencoding",4],["path",6]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[["shadowflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["shadowflags",3]],[[]],[[["shadowflags",3]],["ordering",4]],[[]],[[]],[[],["bool",15]],[[]],[[["canvas",3],["scalar",6],["path",6]]],[[]],[[["shadowflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["u32",15],["path",6],["matrix",3],["scalar",6]],[["rect",3],["option",4,["rect"]]]],[[["shadowflags",3]],["bool",15]],[[]],[[["shadowflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[],["sktextutils_align",4]],[[]],[[["canvas",3],["font",6],["paint",6],["align",4]]],[[["sktextutils_align",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["font",6]],["path",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["usize",15]],[[]],[[]],[[["builderflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["bone",3]],[[],["builderflags",3]],[[],["skvertices_vertexmode",4]],[[]],[[]],[[]],[[["builderflags",3]],["ordering",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["vertices",6]],[[]],[[]],[[]],[[["bone",3]],["bool",15]],[[["builderflags",3]],["bool",15]],[[["skvertices_vertexmode",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["vertexmode",4]],[[["bone",3]],["bool",15]],[[["builderflags",3]],["bool",15]],[[["usize",15],["builderflags",3],["vertexmode",4]],["builder",6]],[[["vertexmode",4],["option",4]],["vertices",6]],[[]],[[["builderflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[]],[[]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["u32",15]],[[],["usize",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["subsampling",4]],[[],["skyuvainfo_siting",4]],[[]],[[]],[[["option",4]],["usize",15]],[[],["isize",3]],[[["subsampling",4]],["bool",15]],[[["skyuvainfo_siting",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["planeconfig",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[["subsampling",4],["yuvcolorspace",4],["planeconfig",4]],["option",4]],[[["usize",15],["planeconfig",4]],[["usize",15],["option",4,["usize"]]]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[["planeconfig",4]],["usize",15]],[[],["usize",15]],[[],["encodedorigin",4]],[[],["matrix",3]],[[],["planeconfig",4]],[[["subsampling",4],["encodedorigin",4],["planeconfig",4]],[["isize",3],["vec",3,["isize"]]]],[[],[["isize",3],["vec",3,["isize"]]]],[[["subsampling",4],["usize",15],["planeconfig",4]]],[[["usize",15]]],[[]],[[],["subsampling",4]],[[["subsampling",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["i32",15]],[[],["option",4]],[[["subsampling",4]],["option",4]],[[]],[[],["yuvcolorspace",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["skyuvainfo_planeconfig",4]],[[],["skyuvapixmapinfo_datatype",4]],[[]],[[]],[[["usize",15],["datatype",4]],["colortype",4]],[[["skyuvainfo_planeconfig",4]],["bool",15]],[[["skyuvapixmapinfo_datatype",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["colortype",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["yuvapixmapinfo",6]],["option",4]],[[["option",4]],["usize",15]],[[],["datatype",4]],[[],["datatype",4]],[[["yuvapixmapinfo",6]],["option",4]],[[["yuvainfo",6],["datatype",4],["option",4]],["option",4]],[[["yuvapixmapinfo",6]],["option",4]],[[["yuvainfo",6]],["option",4]],[[],["option",4]],[[["supporteddatatypes",6]],["bool",15]],[[["yuvainfo",6],["option",4]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["yuvapixmapinfo",6]],[[["usize",15]],["pixmap",6]],[[["usize",15]],[["option",4,["imageinfo"]],["imageinfo",6]]],[[]],[[]],[[["datatype",4]],["colortype",4]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[],["yuvcolorspace",4]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15],["datatype",4]],["colortype",4]],[[["usize",15],["datatype",4]]],[[["recordingcontext",6]]],[[["colortype",4]]],[[["datatype",4],["planeconfig",4]],["bool",15]]],"p":[[3,"XYZD50Hash"],[4,"ColorChannel"],[4,"ColorType"],[3,"ColorChannelFlag"],[4,"EncodedImageFormat"],[4,"PixelGeometry"],[3,"Color"],[4,"YUVColorSpace"],[4,"PaintJoin"],[4,"EncodedOrigin"],[4,"PaintCap"],[4,"PathDirection"],[4,"TileMode"],[4,"BlendMode"],[4,"PathVerb"],[4,"BlendModeCoeff"],[4,"CodecResult"],[3,"Handle"],[3,"SurfacePropsFlags"],[4,"ClipOp"],[4,"CoverageMode"],[4,"PathOp"],[4,"PathFillType"],[4,"PaintStyle"],[4,"FontHinting"],[4,"TextEncoding"],[8,"Scalar"],[4,"BlurStyle"],[4,"FilterMode"],[4,"MipmapMode"],[4,"AlphaType"],[3,"RCHandle"],[3,"Budgeted"],[3,"FourByteTag"],[3,"Color4f"],[3,"ColorSpaceTransferFn"],[6,"OpBuilder"],[3,"V2"],[3,"V3"],[3,"V4"],[3,"IVector"],[3,"Point"],[3,"Point3"],[6,"PathBuilder"],[3,"RefHandle"],[6,"Pixmap"],[3,"IRect"],[6,"Bitmap"],[6,"TextBlobBuilder"],[6,"ColorInfo"],[6,"ImageInfo"],[6,"Picture"],[6,"MaskFilter"],[8,"Scalars"],[3,"ISize"],[6,"Blender"],[6,"Data"],[3,"Rect"],[3,"FontMetrics"],[6,"DataTable"],[3,"RGB"],[3,"CubicResampler"],[6,"SurfaceCharacterization"],[3,"TextBlobRun"],[3,"Borrows"],[3,"Sendable"],[3,"HSV"],[3,"ColorSpacePrimaries"],[3,"CubicMap"],[3,"Iter"],[3,"M44"],[3,"RSXform"],[3,"Size"],[3,"SurfaceProps"],[3,"DateTime"],[6,"TextBlob"],[8,"ConditionallySend"],[6,"DeferredDisplayListRecorder"],[6,"ParagraphStyle"],[8,"Contains"],[6,"Region"],[3,"HighContrastConfig"],[6,"FontStyleSet"],[6,"FontMgr"],[3,"SamplingOptions"],[6,"Font"],[6,"PathMeasure"],[6,"Shader"],[6,"Typeface"],[6,"YUVAInfo"],[6,"SupportedDataTypes"],[6,"AttributeList"],[6,"ColorMatrix"],[6,"BackendSurfaceMutableState"],[6,"StrutStyle"],[6,"TextStyle"],[6,"TypefaceFontProvider"],[6,"Shaper"],[6,"View3D"],[6,"OrderedFontMgr"],[6,"DirectContext"],[6,"TypefaceFontStyleSet"],[8,"Flattenable"],[6,"ColorSpace"],[6,"PixelRef"],[6,"ImageGenerator"],[6,"FontFeature"],[6,"Codec"],[6,"ColorFilter"],[6,"ContourMeasure"],[6,"ContourMeasureIter"],[6,"DeferredDisplayList"],[6,"Drawable"],[6,"GPUDrawHandler"],[6,"Image"],[6,"ImageFilter"],[6,"Paint"],[6,"Path"],[6,"PathEffect"],[6,"PictureRecorder"],[6,"StrokeRec"],[6,"Surface"],[6,"LocalizedStringsIter"],[6,"Vertices"],[6,"Builder"],[6,"YUVAPixmapInfo"],[6,"YUVAPixmaps"],[6,"Uniform"],[6,"Child"],[6,"RuntimeEffect"],[6,"BackendDrawableInfo"],[6,"BackendFormat"],[6,"BackendTexture"],[6,"BackendRenderTarget"],[6,"Alloc"],[6,"MemoryAllocator"],[6,"Extensions"],[6,"Interface"],[6,"RecordingContext"],[6,"YUVABackendTextureInfo"],[6,"YUVABackendTextures"],[6,"FontCollection"],[6,"Paragraph"],[6,"ParagraphBuilder"],[6,"ParagraphCache"],[6,"FontRunIterator"],[6,"BiDiRunIterator"],[6,"ScriptRunIterator"],[6,"LanguageRunIterator"],[6,"CustomTypefaceBuilder"],[6,"Buffer"],[6,"Image"],[6,"Instance"],[6,"PhysicalDevice"],[6,"Device"],[6,"Queue"],[6,"CommandBuffer"],[6,"DeviceMemory"],[6,"RenderPass"],[8,"Pixel"],[3,"FilterOptions"],[6,"scalar"],[8,"NativeFlattenable"],[8,"QuickReject"],[8,"RoundOut"],[3,"SaveLayerFlags"],[4,"SrcRectConstraint"],[4,"PointMode"],[4,"GlyphPositions"],[3,"Canvas"],[3,"OwnedCanvas"],[3,"SaveLayerRec"],[4,"AutoCanvasRestore"],[3,"TopLayerPixels"],[3,"AutoRestoredCanvas"],[3,"Lattice"],[8,"SetMatrix"],[13,"Points"],[13,"RSXforms"],[4,"RectType"],[4,"ScanlineOrder"],[4,"ZeroInitialized"],[4,"SelectionPolicy"],[3,"Options"],[3,"MatrixFlags"],[3,"Document"],[3,"OnPage"],[3,"Open"],[4,"Edging"],[3,"FontArguments"],[3,"VariationPosition"],[3,"Coordinate"],[3,"Flags"],[3,"Axis"],[3,"Weight"],[3,"Width"],[4,"Slant"],[3,"FontStyle"],[4,"SurfaceOrigin"],[4,"BackendAPI"],[4,"MipMapped"],[4,"Renderable"],[4,"Protected"],[4,"SemaphoresSubmitted"],[3,"DriverBugWorkarounds"],[3,"DirectContextId"],[3,"ResourceCacheLimits"],[3,"ResourceCacheUsage"],[3,"FlushInfo"],[4,"ShaderCacheStrategy"],[4,"Enable"],[3,"ContextOptions"],[3,"ID3D12CommandQueue"],[3,"ID3D12Device"],[3,"ID3D12Resource"],[3,"IDXGIAdapter1"],[3,"BackendContext"],[3,"TextureResourceInfo"],[3,"cp"],[3,"FenceInfo"],[3,"SurfaceInfo"],[4,"Format"],[3,"BackendState"],[4,"Standard"],[3,"TextureInfo"],[3,"FramebufferInfo"],[3,"SurfaceInfo"],[4,"Format"],[4,"ImageLayout"],[4,"SharingMode"],[4,"ChromaLocation"],[4,"Filter"],[4,"ImageTiling"],[3,"FeatureFlags"],[4,"GetProcOf"],[3,"ExtensionFlags"],[4,"SamplerYcbcrRange"],[3,"AllocFlag"],[4,"SamplerYcbcrModelConversion"],[3,"PhysicalDeviceFeatures"],[3,"PhysicalDeviceFeatures2"],[3,"ImageInfo"],[3,"Alloc"],[3,"BackendContext"],[3,"YcbcrConversionInfo"],[3,"DrawableInfo"],[3,"SurfaceInfo"],[3,"NullHandle"],[3,"Version"],[3,"Extent2D"],[3,"Offset2D"],[3,"Rect2D"],[13,"Instance"],[13,"Device"],[4,"GradientShaderColors"],[3,"Flags"],[13,"Colors"],[13,"ColorsInSpace"],[4,"InvertStyle"],[4,"CachingHint"],[4,"CompressionType"],[4,"BitDepth"],[4,"MapDirection"],[3,"CropRect"],[4,"Dither"],[3,"ArithmeticFPInputs"],[3,"TypeMask"],[4,"ScaleToFit"],[4,"ApplyPerspectiveClip"],[4,"Member"],[4,"AffineMember"],[3,"Matrix"],[4,"AddPathMode"],[3,"SegmentMask"],[4,"Verb"],[4,"ArcSize"],[3,"Iter"],[3,"RawIter"],[4,"Style"],[3,"DashInfo"],[3,"MatrixFlags"],[4,"DocumentStructureType"],[3,"StructureElementNode"],[3,"Metadata"],[4,"RegionOp"],[3,"Iterator"],[3,"Cliperator"],[3,"Spanerator"],[8,"Combine"],[8,"Intersects"],[4,"Type"],[4,"Corner"],[3,"RRect"],[4,"ChildPtr"],[4,"ChildType"],[3,"Options"],[13,"Shader"],[13,"ColorFilter"],[13,"Blender"],[3,"Flags"],[4,"Type"],[4,"GradientType"],[4,"GradientTypeInternal"],[3,"GradientInfo"],[13,"Linear"],[13,"Radial"],[13,"Conical"],[13,"Sweep"],[8,"AsRunHandler"],[8,"AsNativeRunHandler"],[3,"TextBlobBuilderRunHandler"],[8,"RunIterator"],[8,"RunHandler"],[3,"Feature"],[3,"RunInfo"],[3,"Buffer"],[4,"InitStyle"],[4,"Style"],[4,"ContentChangeMode"],[4,"BackendHandleAccess"],[4,"BackendSurfaceAccess"],[3,"Flags"],[3,"Canvas"],[3,"TextDecoration"],[4,"PlaceholderAlignment"],[4,"TextHeightBehavior"],[4,"StyleType"],[4,"TextBaseline"],[4,"TextAlign"],[4,"TextDecorationStyle"],[4,"DrawOptions"],[4,"Affinity"],[4,"TextDecorationMode"],[4,"RectHeightStyle"],[4,"TextDirection"],[4,"RectWidthStyle"],[3,"Block"],[3,"PositionWithAffinity"],[3,"PlaceholderStyle"],[3,"LineMetrics"],[3,"Placeholder"],[3,"TextShadow"],[3,"TextBox"],[3,"StyleMetrics"],[3,"Decoration"],[3,"FontFamilies"],[8,"RangeExtensions"],[4,"Mode"],[4,"SerializeBehavior"],[3,"LocalizedString"],[4,"TypefaceGlyph"],[3,"Camera3D"],[3,"Patch3D"],[13,"Path"],[13,"PathAndPaint"],[13,"Picture"],[13,"Image"],[4,"PathEncoding"],[3,"ShadowFlags"],[4,"Align"],[3,"BuilderFlags"],[4,"VertexMode"],[3,"Bone"],[8,"PointerWrapper"],[8,"ValueWrapper"],[8,"NativeTransmutableWrapper"],[8,"RefWrapper"],[4,"Siting"],[4,"Subsampling"],[4,"PlaneConfig"],[4,"DataType"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};