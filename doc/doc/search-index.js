var searchIndex = JSON.parse('{\
"skia_safe":{"doc":"","t":[12,13,13,13,18,13,13,13,13,4,4,13,6,6,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,6,4,4,4,3,13,13,3,13,13,13,18,3,13,13,4,13,6,4,13,3,13,6,3,13,4,3,13,6,6,6,6,3,3,4,8,13,8,6,6,13,4,13,3,3,13,18,18,13,13,13,6,6,3,13,18,18,6,6,13,13,13,13,3,6,13,13,13,13,13,17,4,4,13,13,13,13,13,13,13,13,4,3,4,8,6,3,4,3,6,3,6,3,13,13,13,18,18,18,18,18,6,13,13,18,18,13,3,3,13,13,3,13,13,13,13,3,3,13,13,3,3,13,6,6,6,6,13,13,13,13,13,13,13,13,13,13,13,13,3,13,18,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,13,13,13,13,13,3,18,18,18,18,18,18,18,17,6,3,3,18,13,4,13,13,13,13,13,18,18,18,8,13,13,18,13,13,13,13,13,18,18,13,6,13,13,13,3,13,6,13,6,4,4,4,6,6,4,6,4,6,4,3,4,6,6,8,4,6,6,13,3,3,13,13,8,13,13,13,13,13,3,18,18,18,3,18,13,13,13,18,13,13,13,13,13,13,13,3,3,18,13,18,13,13,3,3,6,13,13,13,13,13,13,13,8,6,13,13,6,3,13,8,8,13,3,6,6,3,13,13,13,13,13,13,13,13,13,13,13,6,13,6,6,3,3,18,6,6,6,3,4,4,13,13,6,18,13,13,13,6,13,13,13,13,13,13,13,3,3,3,6,6,3,6,13,13,18,13,13,3,13,13,18,18,6,6,6,4,18,18,18,13,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,0,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,0,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,0,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,0,0,11,11,12,0,11,11,0,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,0,11,0,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,0,11,0,11,0,0,11,0,0,0,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,12,11,11,11,12,0,11,6,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,5,5,11,0,11,5,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,0,11,11,11,11,0,0,12,12,12,5,5,5,4,3,3,18,13,18,3,13,3,18,4,13,13,3,3,8,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,4,13,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,13,13,13,6,13,18,4,13,13,13,13,13,13,13,18,13,13,13,3,13,13,4,13,13,4,4,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,0,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,11,11,11,11,11,11,11,11,11,11,5,17,17,17,17,17,17,17,17,17,17,17,17,6,6,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,11,0,11,11,6,11,5,5,13,13,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,18,3,3,18,18,18,18,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,3,12,12,12,12,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,3,18,13,18,18,18,18,13,18,18,18,4,18,18,18,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,6,6,6,6,6,13,6,13,13,6,3,3,3,18,13,4,4,13,13,13,13,13,13,13,18,4,6,4,3,3,4,4,13,13,6,6,13,13,13,13,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,0,11,11,11,11,11,11,11,11,11,13,13,3,13,4,13,4,13,13,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,6,11,11,11,6,11,11,11,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,13,13,18,3,13,13,13,13,13,6,6,18,4,3,13,13,6,13,13,13,18,18,18,18,13,18,18,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,18,13,13,4,18,3,6,13,18,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,18,13,18,13,18,13,13,13,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,18,18,18,18,18,18,18,3,6,6,13,13,13,18,13,4,6,13,13,13,13,13,13,18,13,18,13,13,18,6,13,6,6,3,13,13,13,13,13,18,18,18,18,18,18,18,18,13,13,13,13,13,13,13,18,3,3,3,4,6,4,6,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,13,18,8,4,6,6,13,18,13,18,6,3,4,4,6,6,13,18,18,18,18,18,13,13,18,13,13,13,13,13,13,13,13,13,18,13,18,17,18,3,13,3,13,13,13,13,13,13,13,13,13,13,6,3,3,17,6,13,18,13,18,13,18,13,18,13,18,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,3,6,13,18,13,13,4,4,4,13,13,13,13,3,13,13,18,13,18,13,18,13,18,3,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,3,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,5,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,4,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,12,0,11,11,11,12,11,11,5,11,11,11,11,11,11,11,13,13,4,13,5,13,13,13,4,18,4,4,3,13,18,13,13,6,18,13,13,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,18,13,13,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,5,5,5,5,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,5,5,5,5,11,11,11,5,5,5,5,5,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,4,4,13,13,13,17,18,3,4,13,18,13,13,13,18,4,13,13,13,13,13,13,13,13,13,18,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,8,8,3,18,18,18,8,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,17,17,17,17,5,13,13,4,13,4,13,6,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,4,13,18,18,13,13,13,13,4,13,13,13,4,13,13,3,18,13,13,18,13,6,18,13,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,13,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,3,6,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,12,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,4,3,4,13,13,13,13,6,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,5,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,11,11,11,11,11,3,8,13,13,8,3,18,6,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,18,13,13,13,13,3,13,18,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,18,3,13,13,13,13,13,13,13,13,13,13,13,18,18,18,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,3,13,13,4,4,13,13,13,6,3,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,13,13,13,13,3,4,4,18,13,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,6,3,6,6,8,16,8,6,6,3,10,11,10,11,10,10,11,11,11,11,11,11,10,10,10,10,11,11,11,11,12,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,10,11,11,11,11,12,12,11,11,11,11,11,11,11,12,5,3,8,3,12,10,12,11,11,11,11,12,10,10,10,11,11,12,11,11,12,12,11,11,11,12,12,12,10,10,11,11,11,11,11,11,12,5,5,13,13,13,13,4,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,18,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,17,13,4,13,13,13,13,13,13,3,6,6,13,13,13,3,13,13,13,13,13,13,13,13,4,17,17,17,17,17,13,13,6,3,6,13,13,13,13,13,13,13,18,13,13,13,3,6,13,13,13,18,13,18,6,6,6,6,3,4,3,3,13,8,13,4,4,13,13,13,13,13,13,6,3,4,4,4,3,6,3,4,4,4,4,6,6,3,6,13,13,13,13,6,6,18,13,13,13,11,11,11,11,12,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,12,12,12,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,10,12,12,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,13,13,6,6,13,3,6,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,13,3,13,13,13,4,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,11,11,5,12,12,0,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,12,12,13,13,6,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,3,4,4,3,6,6,6,3,13,13,13,13,13,13,18,18,18,18,13,13,13,13,13,13,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,18,4,13,13,13,13,13,13,4,4,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,5,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,18,18,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,18,4,13,18,18,13,13,13,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,5,11,11,5,11],"n":["0","A","A16Float","A16UNorm","ALPHA","ARGB4444","ASTC","AVIF","Alpha8","AlphaType","AutoCanvasRestore","B","BBHFactory","BBoxHierarchy","BGR101010x","BGRA1010102","BGRA8888","BGRH","BGRV","BLACK","BLUE","BLUE","BMP","BT2020","BT2020_10bit_Full","BT2020_10bit_Limited","BT2020_12bit_Full","BT2020_12bit_Limited","BT2020_8bit_Full","BT2020_8bit_Limited","Bevel","Bitmap","BlendMode","BlendModeCoeff","BlurStyle","Borrows","BottomLeft","BottomRight","Budgeted","Butt","CCW","CW","CYAN","Canvas","Clamp","Clear","ClipOp","Close","Codec","CodecResult","CoeffCount","Color","Color","Color3f","Color4f","ColorBurn","ColorChannel","ColorChannelFlag","ColorDodge","ColorFilter","ColorInfo","ColorMatrix","ColorSpace","ColorSpacePrimaries","ColorSpaceTransferFn","ColorType","ConditionallySend","Conic","Contains","ContourMeasure","ContourMeasureIter","CouldNotRewind","CoverageMode","Cubic","CubicMap","CubicResampler","DA","DARK_GRAY","DATA_TYPE_CNT","DC","DNG","Darken","Data","DataTable","DateTime","Decal","Default","Default","DeferredDisplayList","DeferredDisplayListRecorder","Difference","Difference","Difference","Difference","Document","Drawable","Dst","DstATop","DstIn","DstOut","DstOver","EMPTY_IRECT","EncodedImageFormat","EncodedOrigin","ErrorInInput","EvenOdd","Exclusion","ExtraEnumNeedInternallyPleaseIgnoreWillGoAway2","ExtraEnumNeedInternallyPleaseIgnoreWillGoAway3","ExtraEnumNeedInternallyPleaseIgnoreWillGoAway4","ExtraEnumNeedInternallyPleaseIgnoreWillGoAway5","Fill","FilterMode","FilterOptions","FilterQuality","Flattenable","Font","FontArguments","FontHinting","FontMetrics","FontMgr","FontStyle","FontStyleSet","FourByteTag","Full","G","GIF","GRAY","GRAY","GRAY_ALPHA","GREEN","GREEN","GlyphId","GlyphId","Gray8","HALF","HALF","HEIF","HSV","Handle","HardLight","High","HighContrastConfig","Hue","ICO","IDA","IDC","IPoint","IRect","ISA","ISC","ISize","IVector","Identity","Image","ImageFilter","ImageGenerator","ImageInfo","IncompleteInput","Inner","InternalError","Intersect","Intersect","Intersect","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","InverseEvenOdd","InverseWinding","Iter","JPEG","JPEG","JPEG_Full","KTX","LIGHT_GRAY","Last","Last","Last","Last","Last","Last","LastCoeffMode","LastEnum","LastEnum","LastEnum","LastEnum","LastMode","LastSeparableMode","LastTileMode","LeftBottom","LeftTop","Lighten","Line","Linear","Linear","Low","Luminosity","M44","MAGENTA","MAX_CUSTOM_ATTRIBUTES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_POINTS","MILESTONE","MaskFilter","Matrix","Matrix44","Max_EnumValue","Medium","MipmapMode","Mirror","Miter","Modulate","Move","Multiply","NEARLY_ZERO","NEARLY_ZERO","NO","NativeFlattenable","Nearest","Nearest","No","None","None","None","Normal","Normal","ONE","ONE","One","OpBuilder","Opaque","Outer","Overlay","OwnedCanvas","PKM","PMColor","PNG","Paint","PaintCap","PaintJoin","PaintStyle","Path","PathBuilder","PathDirection","PathEffect","PathFillType","PathMeasure","PathOp","PathSegmentMask","PathVerb","Picture","PictureRecorder","Pixel","PixelGeometry","PixelRef","Pixmap","Plus","Point","Point3","Premul","Quad","QuickReject","R","R16G16B16A16UNorm","R16G16Float","R16G16UNorm","R8G8UNorm","RCHandle","RED","RED","RG","RGB","RGB","RGB101010x","RGB565","RGB888x","RGBA","RGBA1010102","RGBA8888","RGBAF16","RGBAF16Norm","RGBAF32","RGBH","RGBV","RRect","RSXform","Rec601","Rec601_Limited","Rec709","Rec709_Full","Rec709_Limited","Rect","RefHandle","Region","Repeat","ReverseDifference","ReverseDifference","RightBottom","RightTop","Round","Round","RoundOut","RuntimeEffect","SA","SC","SamplingMode","SamplingOptions","Saturation","Scalar","Scalars","Screen","Sendable","Shader","Shaper","Size","Slight","SoftLight","Solid","Square","Src","SrcATop","SrcIn","SrcOut","SrcOver","Stroke","StrokeAndFill","StrokeRec","Success","Surface","SurfaceCharacterization","SurfaceProps","SurfacePropsFlags","TRANSPARENT","TextBlob","TextBlobBuilder","TextBlobIter","TextBlobRun","TextEncoding","TileMode","TopLeft","TopRight","Typeface","USE_DEVICE_INDEPENDENT_FONTS","UTF16","UTF32","UTF8","Unichar","Unimplemented","Union","Union","Unknown","Unknown","Unknown","Unpremul","V2","V3","V4","Vector","Vector3","Vector4","Vertices","WBMP","WEBP","WHITE","Winding","XOR","XYZD50Hash","Xor","Xor","YELLOW","YES","YUVAInfo","YUVAPixmapInfo","YUVAPixmaps","YUVColorSpace","Yes","ZERO","ZERO","Zero","a","a","a","a","abandon","abandon","abandoned","add","add","add","add","add","add","add","add","add","add","add","add_arc","add_arc","add_arc","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_circle","add_circle","add_circle","add_font_feature","add_oval","add_oval","add_oval","add_path","add_path","add_path","add_path_matrix","add_placeholder","add_poly","add_polygon","add_polygon","add_rect","add_rect","add_rect","add_round_rect","add_rrect","add_rrect","add_rrect","add_shadow","add_text","addr","addr","addr_at","addr_at","adjust","alias","all","all","all","alloc_n32_pixels","alloc_n32_pixels","alloc_pixels","alloc_pixels","alloc_pixels_flags","alloc_pixels_flags","alloc_pixels_info","alloc_pixels_info","alloc_run","alloc_run","alloc_run_pos","alloc_run_pos","alloc_run_pos_h","alloc_run_pos_h","alloc_run_rsxform","alloc_run_rsxform","alloc_run_text","alloc_run_text","alloc_run_text_pos","alloc_run_text_pos","alloc_run_text_pos_h","alloc_run_text_pos_h","alloc_run_text_rsxform","alloc_run_text_rsxform","allocate","alpha","alpha_f","alpha_threshold","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alphabetic_baseline","annotate","append_float","append_float_array","append_int","append_string","append_string_array","append_typeface","apply_bones","apply_to_canvas","apply_to_paint","apply_to_path","apply_to_path_inplace","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_op_count","approximate_op_count","approximate_op_count_nested","approximate_op_count_nested","approximate_size","arc_to","arc_to","arc_to","arc_to_radius","arc_to_radius","arc_to_rotated","arc_to_tangent","arc_to_tangent","arc_to_tangent","are_finite","area","arithmetic","as_a_dash","as_array","as_array","as_array","as_array","as_array_mut","as_bytes","as_bytes","as_coeff","as_direct_context","as_dxgi_format","as_gl_format","as_image","as_image","as_image_filter","as_image_filter","as_image_filter","as_mut_array","as_mut_array","as_mut_array","as_points","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_scalars","as_slice","as_slice","as_slice","as_str","as_vk_format","as_winding","as_winding","ascent","at","at","at_end","at_size","at_size","at_str","at_str","at_t","at_t","avg_char_width","b","b","b","b","b","b","backend","backend","backend","backend","backend","backend_format","backend_format","backend_format","backend_format","backend_texture","background","begin_recording","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blend_mode","blur","blur","blur","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom","bottom","bottom","bottom","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","build","bytes","bytes","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","c","c","c","cache_max_resource_bytes","cache_max_resource_bytes","can_compute_fast_bounds","can_send","can_send","canvas","canvas","canvas","canvas","cap","cap_height","center","center_x","center_y","channel_mask","characterize","check_async_work_completion","children","circle","clear_caches","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_arguments","close","close","close","cmp","cmp","codec","col","col_major","color","color","color4f","color_filter","color_filter","color_filter","color_filter_node","color_filters","color_info","color_info","color_matrix","color_matrix_filter","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type_supported_as_image","color_type_supported_as_surface","colors","colors","colors","cols","combine","combine","combine","combine","combine","compose","compose","compose","compose","composed","compressed_backend_format","compressed_backend_format","compute_bounds","compute_bounds","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_fast_bounds","compute_fast_bounds","compute_from_t","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_min_byte_size","compute_min_byte_size","compute_offset","compute_offset","compute_region_complexity","compute_tight_bounds","compute_total_bytes","compute_total_bytes","compute_y_from_x","concat","conic_to","conic_to","conic_to","conservatively_contains_rect","consume","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains_no_empty_check","contains_point","contains_rect","contains_region","contour_measure","contrast","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","copy_range","copy_range","copy_table_data","corner_path","corner_path_effect","count","count","count","count","count","count","count_families","count_families","count_glyphs","count_inputs","count_points","count_str","count_tables","count_text","count_verbs","cross","cross","cross","cross","cross_product","cross_product","cubic","cubic_to","cubic_to","cubic_to","cull_rect","cull_rect","current_font","current_language","current_level","current_script","d","d","d3d_texture_resource_info","d3d_texture_resource_info","dash","dash_path_effect","data_type","data_type","day","day_of_week","decode","decode_to_raster","decoration","decoration_mut","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_backend_format","default_fallback","default_fallback_char","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","descent","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detach","detach","detach","detach","detach","detach","detach_as_data","detach_as_stream","did_exceed_max_lines","dilate","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","disable_font_fallback","discrete","discrete_path_effect","displacement_map_effect","distance","distance_to_origin","distant_lit_diffuse_lighting","distant_lit_specular_lighting","div","div","div","div_assign","div_assign","div_assign","document","dot","dot","dot","dot","dot_product","dot_product","dot_with_normal","draw","draw","draw","draw_at","draw_display_list","draw_display_list_with_offset","draw_options","drawable","draws_nothing","draws_nothing","drop","drop","drop","dump","dump","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","dump_hex","duration","e","edging","effective_align","elem_count","ellipsis","ellipsized","empty","empty","empty","enable_data_type","enable_font_fallback","encode","encode","encode","encode","encode","encode","encode_to_data","encode_to_data_with_quality","encoded_data","encoded_data","encoded_data","encoded_format","end_of_current_run","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equals","equals","equals","equals","equals","equals_by_fonts","erase","erase","erase","erase","erase_4f","erase_4f","erase_argb","erase_argb","erase_color","erase_color","erase_with_colorspace","erase_with_colorspace","erode","extend","extend","extensions","extensions_mut","extract_alpha","extract_alpha","extract_subset","extract_subset","extract_subset","extract_subset","f","fallback_manager","family_name","family_name","family_name","family_name","family_names","family_names","fill_type","fill_type","fill_type","filter","filter_bounds","filter_color","filter_color4f","filter_path","filter_path_inplace","find_child","find_input","find_typefaces","find_uniform","finish_recording_as_drawable","finish_recording_as_picture","fits_in_bytes","flags","flags","flush","flush","flush","flush_and_submit","flush_and_submit","flush_and_submit","flush_submit_and_sync_cpu","flush_submit_and_sync_cpu","flush_with_access_info","flush_with_info","flush_with_info","flush_with_mutable_state","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","font_arguments","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_parameters","font_size","font_size","font_style","font_style","font_style","font_style","force_strut_height","foreground","fractal_perlin_noise","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adopted_texture","from_argb","from_argb","from_backend_render_target","from_backend_texture","from_bitmap","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bounds","from_bytes","from_bytes","from_bytes","from_chars","from_color_info","from_color_info","from_compressed","from_context","from_data","from_data","from_data","from_data","from_data","from_data_type","from_encoded","from_encoded","from_encoded","from_external_memory","from_external_pixmaps","from_generator","from_irect","from_isize","from_isize","from_iter","from_iter","from_iwh","from_ltrb","from_name","from_nv12_textures_copy","from_paint","from_paint","from_path","from_path","from_picture","from_picture","from_picture","from_picture","from_pixmap_cross_context","from_point_and_size","from_pos_text","from_pos_text","from_pos_text_h","from_pos_text_h","from_pt_size","from_radians","from_raster_data","from_rect","from_rgb","from_rsxform","from_rsxform","from_shader","from_shader","from_size","from_size","from_slice","from_slice","from_slices","from_slices","from_str","from_str","from_str","from_str","from_svg","from_table","from_text","from_text","from_texture","from_typeface","from_typeface_with_params","from_vk","from_wh","from_wh","from_xywh","from_xywh","from_yuva_pixmaps","from_yuva_textures","g","g","g","g","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","get_addr","get_addr","get_alpha_f","get_alpha_f","get_alpha_f","get_alpha_f","get_backend_render_target","get_backend_texture","get_boundary_path","get_bounds","get_col_major","get_color","get_color","get_color","get_color","get_fill_path","get_frame_count","get_glyph_position_at_coordinate","get_image","get_input","get_intercepts","get_intercepts","get_kerning_pair_adjustments","get_line_metrics","get_matrix","get_path","get_pixels","get_pixels","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_point","get_points","get_pos","get_rects_for_placeholders","get_rects_for_range","get_repetition_count","get_row_major","get_row_major","get_scaled_dimensions","get_scanlines","get_subset","get_subset","get_table_data","get_table_size","get_verbs","get_vk_drawable_info","get_widths","get_widths_bounds","get_word_boundary","get_x_pos","get_yuva_planes","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","glyph_indices","gpu","gradient_shader","graphics","grayscale","h","has","has_alpha","has_bones","has_colors","has_equal_effect","has_extension","has_indices","has_mip_maps","has_mipmaps","has_mipmaps","has_tex_coords","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height_64","height_override","high_contrast","high_contrast_config","high_contrast_filter","hinting","hinting_is_on","hour","icu","id","ideographic_baseline","image","image","image_filter","image_filter","image_filters","image_info","image_info","image_info","image_info","image_snapshot","image_snapshot_with_bounds","inc_reserve","inc_reserve","inc_reserve","incremental_decode","index","index","index","index","index","index","index_count","index_mut","indices","indices","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","info","info","info","info","info","info","info","init_pixmaps_from_single_allocation","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","input","input_size","inputs","inputs","insert","insert","inset","inset","install_pixels","install_pixels","interpolate","intersect","intersect","intersect2","intersect_no_empty_check_","intersects","intersects","intersects","intersects","intersects","intersects","intersects2","intersects_rect","intersects_region","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_image_filter","into_image_filter","into_iter","into_iter","into_iter","into_iter","into_vec","invert","invert_style","is_a_image","is_all","is_all","is_alpha_only","is_alpha_unchanged","is_always_opaque","is_anti_alias","is_array","is_baseline_snap","is_bgr","is_bold","is_closed","is_closed","is_compatible","is_compatible","is_complex","is_convex","is_cubic_degenerate","is_dither","is_embedded_bitmaps","is_embolden","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty_64","is_even_odd","is_fill_style","is_finite","is_finite","is_finite","is_finite","is_finite","is_fixed_pitch","is_force_auto_hinting","is_framebuffer_only","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_h","is_hairline_style","is_immutable","is_immutable","is_immutable","is_immutable","is_initialized","is_interpolatable","is_inverse","is_inverse_fill_type","is_italic","is_last_contour_closed","is_lazy_generated","is_line","is_line_degenerate","is_linear","is_linear_metrics","is_mip_mapped","is_mip_mapped","is_null","is_null","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_oval","is_placeholder","is_protected","is_protected","is_protected","is_protected","is_quad_degenerate","is_ready_to_draw","is_ready_to_draw","is_rect","is_rect","is_rgb","is_rrect","is_same_texture","is_sorted","is_src_over","is_srgb","is_srgb","is_subpixel","is_supported","is_texture_backed","is_textureable","is_textureable","is_use_device_independent_fonts","is_v","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_volatile","is_volatile","is_volatile","is_zero","is_zero","is_zero","is_zero","iset","iter","iter","iter","iter","join","join","join","join2","join_non_empty_arg","join_possibly_empty_rect","last_pt","layout","leading","leading","left","left","left","left","len","length","length","length","length","length","length","length_squared","length_squared","length_xy","length_xyz","letter_spacing","line","line_2d","line_2d_path_effect","line_number","line_to","line_to","line_to","linear_gradient","locale","longest_line","look_at","luma","luma_color_filter","magnifier","make","make","make","make","make_color_filter","make_image","make_scale","make_shader","make_transform","map","mark_dirty","marker","mask_filter","match_face_style","match_face_style","match_family","match_family","match_family_style","match_family_style","match_family_style_character","match_family_style_character","match_one_attribute","match_style","match_style","matches_color_type","matches_color_type","matches_color_type","matrix","matrix","matrix","matrix","matrix44","matrix_convolution","matrix_path_effect","matrix_translate","max_char_width","max_intrinsic_width","max_lines","max_render_target_size","max_surface_sample_count_for_color_type","max_texture_size","max_width","measure_str","measure_text","merge","merge","merge_path_effect","metrics","min_intrinsic_width","min_row_bytes","min_row_bytes","minute","mipmap","mipmap","mipmapped","miter","mode","month","move_to","move_to","move_to","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","n32","name","name","name","name","named_transfer_fn","nan","native_deserialize","native_flattenable","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","nearly_equal","nearly_equal","nearly_zero","nearly_zero","need_to_apply","neg","neg","neg","neg","neg","neg","negate","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_a8","new_a8","new_bidi_run_iterator","new_bytes","new_bytes","new_color_space","new_color_space_with_context","new_copy","new_copy","new_copy","new_core_text","new_cross_context_from_pixmap","new_cstr","new_cstr","new_d3d","new_d3d","new_d3d","new_dxgi","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_family_name_iterator","new_fill","new_font_mgr_run_iterator","new_from","new_from_data","new_from_data","new_gl","new_gl","new_gl","new_gl","new_hairline","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_identity","new_lighting","new_load_with","new_n32","new_n32","new_n32_premul","new_n32_premul","new_native","new_non_texture_image","new_null","new_path","new_path","new_placeholder","new_placeholder","new_primitive","new_raster","new_raster_direct","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_raster_n32_premul","new_render_target","new_render_target_with_characterization","new_s32","new_s32","new_script_run_iterator","new_shape_dont_wrap_or_reorder","new_shape_then_wrap","new_shaper_driven_wrapper","new_srgb","new_srgb","new_srgb_linear","new_srgb_linear","new_std_language_run_iterator","new_str","new_str","new_styleset","new_styleset","new_subset","new_subset","new_subset","new_subset_with_context","new_surface","new_surface_with_dimensions","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","new_typeface","new_typeface","new_uninitialized","new_uninitialized","new_unknown","new_unknown","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_ycbcr","new_with_filter","next","next","next","next","next_contour","next_scanline","normalize","normalize","normalize","normalize","normalize_perspective","normalize_vector","normalized","not","not","nothing_to_draw","notify_added_to_cache","notify_added_to_cache","notify_content_will_change","notify_drawing_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","num_channels_in_plane","num_planes","num_planes","num_planes","num_planes","num_planes","offset","offset","offset","offset","offset","offset","offset","offset","offset_points","offset_to","offset_to","oomed","op","op","op_rect","op_rect_region","op_region","op_region_rect","origin","origin","origin","origin","origin_matrix","outbound_scanline","outset","outset","oval","oval_with_start_index","overdraw","overdraw_color_filter","paint","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","partial_cmp","path","path_1d","path_1d_path_effect","path_2d","path_2d_path_effect","path_effect","path_effect","path_measure","path_types","pdf","peek_pixels","peek_pixels","peek_pixels","peek_pixels","peek_style","perform_deferred_cleanup","perlin_noise_shader","perspective","picture_recorder","pixel_geometry","pixel_ref","pixel_ref","pixel_ref_origin","pixel_ref_origin","pixels","pixels","pixels","pixels","pixels","pixels","pixmap","pixmap","pixmaps_info","plane","plane_config","plane_dimensions","plane_format","plane_formats","plane_info","plane_infos","plane_subsampling_factors","planes","playback","playback","point_lit_diffuse_lighting","point_lit_specular_lighting","points","polygon","polyline_to","polyline_to","pop","pos_tan","pos_tan","positions","positions","post_concat","post_concat","post_script_name","post_translate","post_translate","pre_concat","pre_concat","pre_concat_16","pre_multiply_argb","pre_multiply_color","pre_scale","pre_translate","precompile_shader","print_statistics","private","props","purge_caches","purge_harf_buzz_cache","purge_unlocked_resources","push_style","quad_to","quad_to","quad_to","query_yuva_info","quick_contains","quick_reject","quick_reject","quick_reject","quick_reject_rect","quick_reject_region","r","r","r","r_arc_to_rotated","r_conic_to","r_conic_to","r_conic_to","r_cubic_to","r_cubic_to","r_cubic_to","r_line_to","r_line_to","r_line_to","r_move_to","r_quad_to","r_quad_to","r_quad_to","radial_gradient","radians_to_degrees","rc","read_from_memory","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","recommended_rgba_color_type","recording_canvas","recording_context","rect","rect_stays_rect","region","register_typeface","reinterpret_color_space","release","release_resources_and_abandon","remove","remove","remove","replace_backend_texture","replace_backend_texture_with_mode","res_scale","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset_font_features","reset_gl_texture_bindings","reset_shadows","resized","resized","resolve","resolve","resource_cache_limit","resource_cache_limits","resource_cache_purgeable_bytes","resource_cache_usage","restore","reverse_add_path","rewind","right","right","right","right","rotate","rotate_x","rotate_y","rotate_z","round","round_in","round_out","round_out","round_out","row","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_iter","row_major","rows","rrect","rrect","rrect_with_start_index","runtime_effect","s","sample_count","sample_count","sample_count","sampling","sampling_options","save","scalar","scale","scale","scale","scale_pixels","scale_pixels","scale_pixels","scale_x","scaled","scaled","scanline_order","scos","second","segment","segment","segment_masks","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set_44","set_abs","set_alpha","set_alpha_f","set_alpha_type","set_alpha_type","set_anti_alias","set_argb","set_asset_font_manager","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_background_color","set_baseline_snap","set_blend_mode","set_bounds","set_bounds2","set_bounds_check","set_bounds_no_check","set_col","set_col_major","set_color","set_color","set_color4f","set_color_filter","set_color_space","set_color_space","set_concat","set_concat","set_concat_16","set_d3d_resource_state","set_d3d_resource_state","set_default_font_manager","set_default_font_manager_and_family_names","set_dither","set_draw_options","set_dynamic_font_manager","set_edging","set_ellipsis","set_embedded_bitmaps","set_embolden","set_empty","set_empty","set_empty","set_empty","set_empty","set_fill_style","set_fill_type","set_fill_type","set_fill_type","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_font_style","set_force_auto_hinting","set_force_strut_height","set_foreground_color","set_glyph","set_hairline_style","set_height","set_height","set_height","set_height_override","set_hinting","set_identity","set_identity","set_identity","set_image_filter","set_immutable","set_immutable","set_immutable","set_immutable","set_info","set_info","set_irect","set_is_volatile","set_is_volatile","set_is_volatile","set_iwh","set_key_frame","set_last_pt","set_leading","set_length","set_length_xy","set_letter_spacing","set_linear_metrics","set_locale","set_ltrb","set_ltrb","set_mask_filter","set_max_lines","set_metrics","set_mirror","set_mutable_stat","set_normalize","set_paragraph_style","set_path","set_path","set_path_effect","set_pixel_ref","set_pixel_ref","set_placeholder","set_rc","set_rect","set_rects","set_region","set_repeat_count","set_res_scale","set_reset","set_resource_cache_limit","set_resource_cache_limits","set_rotate","set_rotate_unit","set_rotate_unit_sin_cos","set_row","set_row_major","set_row_major","set_saturation","set_scale","set_scale","set_scale_x","set_shader","set_size","set_skew_x","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_params","set_stroke_style","set_stroke_width","set_strut_enabled","set_strut_style","set_style","set_subpixel","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_translate","set_typeface","set_typeface","set_vulkan_image_layout","set_vulkan_image_layout","set_wh","set_wh","set_word_spacing","set_xywh","set_xywh","shader","shader","shader_mask_filter","shaders","shadows","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","shaper","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shrink_to_fit","simplify","simplify","siting_xy","size","size","size","size","size","size_in_bytes","skew_x","skip_scanlines","snap_gpu_draw_handler","snapshot","snapshot","sort","sort","sorted","sorted","source","spacing","spot_lit_diffuse_lighting","spot_lit_specular_lighting","ssin","start_incremental_decode","start_scanline_decode","stencil_bits","store_vk_pipeline_cache_data","str_to_glyphs","str_to_glyphs_vec","stroke","stroke_and_fill_path_effect","stroke_cap","stroke_join","stroke_miter","stroke_path_effect","stroke_rec","stroke_width","strut_enabled","strut_style","style","style","style","style","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","submit","subsampling","sum","supported","supports_distance_field_text","surface","surface_props","svg","swap","swap","swap","swap","swap_rb","swap_rb_inplace","sweep_gradient","table_color_filter","table_tags","test_surface_props_layout","tex_coords","tex_coords","text_align","text_baseline","text_direction","text_height_behavior","text_style","text_to_glyphs","text_to_glyphs_vec","textlayout","texture","texture_origin","texture_origin","texture_size","textures","textures_are_cacheable","textures_are_cacheable","tight_bounds","tight_bounds","tile","time_to_t","time_to_values","time_zone_minutes","to_a_color_filter","to_a_color_matrix","to_a_color_mode","to_ceil","to_color","to_color","to_floor","to_font_data","to_hsv","to_hsv","to_m33","to_matrix44","to_non_inverse","to_opaque","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","to_quad","to_quad","to_rgb","to_round","to_shader","to_shader","to_shader","to_shader","to_shader","to_string","to_svg","to_texture_2d","to_tri_strip","to_xyzd50_hash","to_xyzd50_hash","toggle","toggle","toggle_inverse_fill_type","toggle_inverse_fill_type","toggle_inverse_fill_type","top","top","top","top","top","transform","transform_with_perspective_clip","translate","translate","translate","translated","transpose","trim","trim_path_effect","try_alloc_n32_pixels","try_alloc_n32_pixels","try_alloc_pixels","try_alloc_pixels","try_alloc_pixels_flags","try_alloc_pixels_flags","try_alloc_pixels_info","try_alloc_pixels_info","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbulence_perlin_noise","turn_hinting_off","turn_on","two_point_conical_gradient","tx","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","typeface","typeface","typeface","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyph","unichar_to_glyphs","unichars_to_glyphs","uniform_size","uniforms","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","units_per_em","unlimited_lines","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","update_bounds_cache","use_cubic","uses_glfbo0","uses_glfbo0","utils","v","valid_row_bytes","valid_row_bytes","valid_subset","validate","validate_alpha_type","value","variation_design_parameters","variation_design_position","varyings","vertex_count","vertices","vk_rt_supports_input_attachment","vk_rt_supports_input_attachment","vulkan_image_info","vulkan_image_info","vulkan_secondary_cb_compatible","vulkan_secondary_cb_compatible","w","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width_64","with_a","with_adjustment","with_alpha_type","with_alpha_type","with_alpha_type","with_alpha_type","with_backend_format","with_backend_format","with_color_filter","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_spin","with_color_spin","with_color_type","with_color_type","with_color_type","with_color_type","with_default_mipmaps","with_dimensions","with_dimensions","with_dimensions","with_fbo0","with_fbo0","with_inset","with_inset","with_linear_gamma","with_linear_gamma","with_local_matrix","with_local_matrix","with_matrix","with_matrix","with_offset","with_offset","with_offset","with_offset_to","with_offset_to","with_outset","with_outset","with_size","with_srgb_gamma","with_srgb_gamma","with_subsampling","with_transform","with_transform_with_perspective_clip","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap_mut","wrap_ref","wrap_send","wrap_send","wrapper","writable_addr","writable_addr","writable_addr_at","writable_addr_at","write","write_pixels_from_bitmap","write_pixels_from_pixmap","write_to_memory","x","x","x","x","x","x","x","x","x","x_height","x_max","x_min","y","y","y","y","y","y","y","y","y","year","yuv_color_space","yuv_color_space","yuv_color_space","yuva_info","yuva_info","yuva_info","yuva_info","yuva_info","yuva_pixmap_info","yuva_pixmaps","z","z","z","link_to_destination","named_destination","rect_with_url","AutoCanvasRestore","AutoRestoredCanvas","Canvas","F16_COLOR_TYPE","Fast","INIT_WITH_PREVIOUS","Lattice","Lines","OwnedCanvas","PRESERVE_LCD_TEXT","PointMode","Points","Polygon","SaveLayerFlags","SaveLayerRec","SetMatrix","SrcRectConstraint","Strict","TopLayerPixels","access_top_layer_pixels","all","annotate_link_to_destination","annotate_named_destination","annotate_rect_with_url","as_mut","as_mut","backdrop","base_layer_size","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","clear","clip_irect","clip_mask","clip_matrix","clip_path","clip_rect","clip_region","clip_rrect","clip_shader","clone","clone","clone","clone_into","clone_into","clone_into","cmp","colors","concat","concat_44","contains","default","default","deref","deref","deref_mut","deref_mut","device_clip_bounds","discard","draw_annotation","draw_arc","draw_circle","draw_color","draw_drawable","draw_drawable_at","draw_drrect","draw_image","draw_image_lattice","draw_image_nine","draw_image_rect","draw_image_rect_with_sampling_options","draw_image_with_sampling_options","draw_irect","draw_line","draw_oval","draw_paint","draw_patch","draw_path","draw_picture","draw_point","draw_points","draw_rect","draw_region","draw_round_rect","draw_rrect","draw_shadow","draw_str","draw_str_align","draw_text_blob","draw_vertices","drop","drop","empty","eq","eq","eq","extend","flags","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bitmap","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raster_direct","from_raster_direct_n32","guard","hash","hash","hash","image_info","info","inner","inner_mut","insert","intersects","into","into","into","into","into","into","into","into","into","is_all","is_clip_empty","is_clip_rect","is_empty","lattice","local_clip_bounds","local_to_device","local_to_device_as_3x3","ne","new","new_null","new_surface","not","origin","paint","partial_cmp","peek_pixels","pixels","props","quick_reject","quick_reject","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","rect_types","remove","reset_matrix","restore","restore","restore_to_count","rotate","row_bytes","save","save_count","save_layer","save_layer_alpha","scale","set","set_matrix","set_matrix","set_matrix","skew","sub","sub_assign","surface","to_owned","to_owned","to_owned","toggle","total_matrix","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","wrap","write_pixels","write_pixels_from_bitmap","x_divs","y_divs","Default","FixedColor","Lattice","RectType","Transparent","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone_into","colors","default","eq","fmt","fmt","from","from","hash","into","into","rect_types","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x_divs","y_divs","BottomLeft","BottomRight","BottomUp","Codec","CouldNotRewind","DEFAULT","EncodedOrigin","ErrorInInput","IncompleteInput","InternalError","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","LAST","LeftBottom","LeftTop","No","Options","PreferAnimation","PreferStillImage","Result","RightBottom","RightTop","ScanlineOrder","SelectionPolicy","Success","TopDown","TopLeft","TopRight","Unimplemented","Yes","ZeroInitialized","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","dimensions","encoded_format","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","frame_index","from","from","from","from","from","from_data","get_frame_count","get_image","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_repetition_count","get_scaled_dimensions","get_scanlines","get_yuva_planes","hash","hash","hash","hash","incremental_decode","info","inner","inner_mut","into","into","into","into","into","ne","next_scanline","origin","outbound_scanline","prior_frame","query_yuva_info","result_to_string","scanline_order","skip_scanlines","start_incremental_decode","start_scanline_decode","subset","swaps_width_height","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","valid_subset","wrap","zero_initialized","ColorFilter","color_filters","composed","filter_color","filter_color4f","from_argb","from_table","high_contrast","is_alpha_unchanged","luma","new_lighting","overdraw","to_a_color_matrix","to_a_color_mode","blend","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","blend","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","ColorMatrix","get_row_major","new","post_concat","post_translate","pre_concat","set_concat","set_identity","set_row_major","set_saturation","set_scale","new_lighting","BLACK","BLUE","CYAN","DARK_GREY","GREEN","GREY","LIGHT_GREY","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","ContourMeasure","ContourMeasureIter","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","contains","default","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","get_matrix","hash","insert","intersects","into","is_all","is_closed","is_empty","length","ne","new","not","partial_cmp","pos_tan","remove","reset","segment","set","sub","sub_assign","to_owned","toggle","try_from","try_into","type_id","new","new","new","Document","abort","begin_page","borrow","borrow_mut","canvas","close","end_page","fmt","from","into","page","pages","state","try_from","try_into","type_id","OnPage","Open","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Drawable","GPUDrawHandler","bounds","draw","draw_at","generation_id","gpu_draw_handler","notify_drawing_changed","snap_gpu_draw_handler","GPUDrawHandler","draw","bitmap","pixmap","Alias","AntiAlias","Edging","Font","SubpixelAntiAlias","borrow","borrow_mut","clone","clone_into","count_str","count_text","edging","eq","fmt","from","from_typeface","from_typeface_with_params","get_bounds","get_path","get_pos","get_widths","get_widths_bounds","get_x_pos","hash","hinting","into","is_baseline_snap","is_embedded_bitmaps","is_embolden","is_force_auto_hinting","is_linear_metrics","is_subpixel","measure_str","measure_text","metrics","new","scale_x","set_baseline_snap","set_edging","set_embedded_bitmaps","set_embolden","set_force_auto_hinting","set_hinting","set_linear_metrics","set_scale_x","set_size","set_skew_x","set_subpixel","set_typeface","size","skew_x","spacing","str_to_glyphs","str_to_glyphs_vec","text_to_glyphs","text_to_glyphs_vec","to_owned","try_from","try_into","type_id","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyphs","with_size","FontArguments","VariationPosition","borrow","borrow","borrow_mut","borrow_mut","collection_index","coordinates","default","drop","fmt","fmt","from","from","inner","inner_mut","into","into","new","set_collection_index","set_variation_design_position","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","variation_design_position","variation_position","wrap","Coordinate","axis","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","inner","inner_mut","into","ne","to_owned","try_from","try_into","type_id","unwrap","value","wrap","BOUNDS_INVALID","Flags","FontMetrics","STRIKEOUT_POSITION_IS_VALID","STRIKEOUT_THICKNESS_IS_VALID","UNDERLINE_POSITION_IS_VALID","UNDERLINE_THICKNESS_IS_VALID","all","ascent","avg_char_width","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","bottom","cap_height","clone","clone","clone_into","clone_into","cmp","contains","default","default","descent","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bounds","hash","inner","inner_mut","insert","intersects","into","into","is_all","is_empty","leading","max_char_width","ne","ne","not","partial_cmp","remove","set","strikeout_position","strikeout_thickness","sub","sub_assign","to_owned","to_owned","toggle","top","try_from","try_from","try_into","try_into","type_id","type_id","underline_position","underline_thickness","unwrap","wrap","x_height","x_max","x_min","VariationAxis","def","max","min","tag","variation","Axis","borrow","borrow_mut","clone","clone_into","def","default","eq","fmt","from","inner","inner_mut","into","is_hidden","max","min","ne","new","set_hidden","tag","to_owned","try_from","try_into","type_id","unwrap","wrap","BLACK","BOLD","CONDENSED","EXPANDED","EXTRA_BLACK","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","FontStyle","INVISIBLE","Italic","LIGHT","MEDIUM","NORMAL","NORMAL","Oblique","SEMI_BOLD","SEMI_CONDENSED","SEMI_EXPANDED","Slant","THIN","ULTRA_CONDENSED","ULTRA_EXPANDED","Upright","Weight","Width","bold","bold_italic","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","italic","ne","ne","new","normal","partial_cmp","partial_cmp","slant","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","weight","width","wrap","wrap","wrap","BackendAPI","BackendDrawableInfo","BackendFormat","BackendRenderTarget","BackendSurfaceMutableState","BackendTexture","BottomLeft","Context","Dawn","Direct3D","DirectContext","DirectContextId","DriverBugWorkarounds","FlushInfo","MAX_PLANES","Metal","MipMapped","Mipmapped","Mock","No","No","No","No","No","OpenGL","OpenGL_GrBackend","Protected","RecordingContext","Renderable","ResourceCacheLimits","ResourceCacheUsage","SemaphoresSubmitted","SurfaceOrigin","TopLeft","Vulkan","YUVABackendTextureInfo","YUVABackendTextures","Yes","Yes","Yes","Yes","Yes","abandon","abandoned","add_and_true_to_loop_condition","applyOverrides","as_direct_context","as_dxgi_format","as_gl_format","as_vk_format","backend","backend","backend","backend","backend","backend_format","backend_format","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_mask","check_async_work_completion","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_type_supported_as_image","color_type_supported_as_surface","compressed_backend_format","compressed_backend_format","context_options","d3d","d3d_texture_resource_info","d3d_texture_resource_info","default","default_backend_format","dimensions","dimensions","disable_blend_equation_advanced","disable_discard_framebuffer","disable_dual_source_blending_support","disable_texture_storage","disallow_large_instanced_draw","emulate_abs_int_function","eq","eq","eq","eq","eq","eq","eq","eq","eq","flush","flush_and_submit","flush_on_framebuffer_change","flush_submit_and_sync_cpu","flush_with_info","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_update_scissor_state_when_binding_fbo0","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from_vk","get_vk_drawable_info","gl","gl_clear_broken","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","has_mip_maps","has_mipmaps","hash","hash","hash","hash","hash","hash","height","height","id","inner","inner","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","is_framebuffer_only","is_protected","is_protected","is_same_texture","is_valid","is_valid","is_valid","is_valid","max_fragment_uniform_vectors_32","max_msaa_sample_count_4","max_render_target_size","max_resource_bytes","max_resources","max_surface_sample_count_for_color_type","max_texture_size","max_texture_size_limit_4096","mipmapped","ne","ne","ne","new","new","new","new","new","new1","new_d3d","new_d3d","new_d3d","new_dxgi","new_gl","new_gl","new_gl","new_gl","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_ycbcr","num_planes","num_planes","oomed","pack_parameters_workaround_with_pack_buffer","perform_deferred_cleanup","plane_format","plane_formats","precompile_shader","purge_unlocked_resources","release_resources_and_abandon","remove_pow_with_constant_exponent","reset","reset_gl_texture_bindings","resource_bytes","resource_cache_limit","resource_cache_limits","resource_cache_purgeable_bytes","resource_cache_usage","resource_count","rewrite_do_while_loops","sample_count","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_d3d_resource_state","set_d3d_resource_state","set_mutable_stat","set_resource_cache_limit","set_resource_cache_limits","set_vulkan_image_layout","set_vulkan_image_layout","stencil_bits","store_vk_pipeline_cache_data","submit","supports_distance_field_text","texture","texture_origin","texture_origin","textures","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_texture_2d","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbind_attachments_on_bound_render_fbo_delete","unfold_short_circuit_as_ternary_operation","unwrap","unwrap","vk","vulkan_image_info","vulkan_image_info","width","width","wrap","wrap","yuv_color_space","yuva_info","yuva_info","BackendBinary","BackendSource","ContextOptions","Default","Enable","No","ShaderCacheStrategy","SkSL","Yes","allow_multiple_glyph_cache_textures","allow_path_mask_caching","avoid_stencil_buffers","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_map_threshold","clone","clone","clone_into","clone_into","default","disable_coverage_counting_paths","disable_distance_field_paths","disable_driver_correctness_workarounds","disable_gpu_yuv_conversion","do_manual_mipmapping","driver_bug_workarounds","enable_experimental_hardware_tessellation","eq","eq","fmt","fmt","fmt","from","from","from","glyph_cache_texture_maximum_bytes","glyphs_as_paths_font_size","hash","hash","inner","inner_mut","internal_multisample_count","into","into","into","max_cached_vulkan_secondary_command_buffers","max_texture_size_override","min_distance_field_font_size","new","prefer_external_images_over_es3","reduce_ops_task_splitting","runtime_program_cache_size","shader_cache_strategy","sharpen_mipmapped_textures","skip_gl_error_checks","suppress_mipmap_support","suppress_prints","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","use_draw_instead_of_clear","wrap","Alloc","BackendContext","BeginEvent","CheckFeatureSupport","CopyDescriptors","CopyDescriptorsSimple","CopyTileMappings","CreateCommandAllocator","CreateCommandList","CreateCommandQueue","CreateCommandSignature","CreateCommittedResource","CreateComputePipelineState","CreateConstantBufferView","CreateDepthStencilView","CreateDescriptorHeap","CreateFence","CreateGraphicsPipelineState","CreateHeap","CreatePlacedResource","CreateQueryHeap","CreateRenderTargetView","CreateReservedResource","CreateRootSignature","CreateSampler","CreateShaderResourceView","CreateSharedHandle","CreateUnorderedAccessView","D3D12_RESOURCE_STATES","DXGI_FORMAT","EndEvent","Evict","ExecuteCommandLists","FenceInfo","GetAdapterLuid","GetClockCalibration","GetCopyableFootprints","GetCustomHeapProperties","GetDesc","GetDesc","GetDesc1","GetDescriptorHandleIncrementSize","GetDeviceRemovedReason","GetGPUVirtualAddress","GetHeapProperties","GetNodeCount","GetResourceAllocationInfo","GetResourceTiling","GetTimestampFrequency","ID3D12CommandQueue","ID3D12Device","ID3D12Resource","IDXGIAdapter1","MakeResident","Map","MemoryAllocator","OpenSharedHandle","OpenSharedHandleByName","ReadFromSubresource","ResourceStateEnum","SetMarker","SetStablePowerState","Signal","TextureResourceInfo","Unmap","UpdateTileMappings","Wait","WriteToSubresource","adapter","alloc","as_raw","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cp","deref","deref","deref","deref","deref","device","drop","eq","fence","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from_raw","from_resource","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into_raw","level_count","lpVtbl","lpVtbl","lpVtbl","lpVtbl","memory_allocator","protected","protected_context","queue","resource","resource_state","safe_com_add_ref","safe_com_release","sample_count","sample_quality_pattern","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","up","uuidof","uuidof","uuidof","uuidof","value","with_state","wrap","wrap","wrap","ALPHA8","BGRA8","BLEND","BackendState","COMPRESSED_ETC1_RGB8","COMPRESSED_RGB8_BC1","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_BC1","DEPTH24_STENCIL8","Enum","Extensions","FIXED_FUNCTION","Format","FramebufferInfo","GL","GLES","Interface","LUMINANCE16F","LUMINANCE8","LUMINANCE8_ALPHA8","Last","LastColorFormat","MISC","MSAA_ENABLE","None","PIXEL_STORE","PROGRAM","R16","R16F","R8","RENDER_TARGET","RG16","RG16F","RG8","RGB10_A2","RGB565","RGB8","RGBA16","RGBA16F","RGBA4","RGBA8","SRGB8_ALPHA8","STENCIL","STENCIL_INDEX16","STENCIL_INDEX8","Standard","TEXTURE_BINDING","TextureInfo","UInt","Unknown","VERTEX","VIEW","WebGL","add","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","empty","eq","eq","eq","eq","eq","extend","extensions","extensions_mut","fboid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_fboid","from_iter","from_target_and_id","has","has_extension","hash","hash","hash","id","inner","inner","inner_mut","inner_mut","insert","intersects","into","into","into","into","into","is_all","is_empty","is_initialized","ne","ne","new_load_with","new_native","not","partial_cmp","remove","remove","reset","set","sub","sub_assign","target","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","validate","wrap","wrap","A1R5G5B5_UNORM_PACK16","A2B10G10R10_SINT_PACK32","A2B10G10R10_SNORM_PACK32","A2B10G10R10_SSCALED_PACK32","A2B10G10R10_UINT_PACK32","A2B10G10R10_UNORM_PACK32","A2B10G10R10_USCALED_PACK32","A2R10G10B10_SINT_PACK32","A2R10G10B10_SNORM_PACK32","A2R10G10B10_SSCALED_PACK32","A2R10G10B10_UINT_PACK32","A2R10G10B10_UNORM_PACK32","A2R10G10B10_USCALED_PACK32","A8B8G8R8_SINT_PACK32","A8B8G8R8_SNORM_PACK32","A8B8G8R8_SRGB_PACK32","A8B8G8R8_SSCALED_PACK32","A8B8G8R8_UINT_PACK32","A8B8G8R8_UNORM_PACK32","A8B8G8R8_USCALED_PACK32","ASTC_10x10_SRGB_BLOCK","ASTC_10x10_UNORM_BLOCK","ASTC_10x5_SRGB_BLOCK","ASTC_10x5_UNORM_BLOCK","ASTC_10x6_SRGB_BLOCK","ASTC_10x6_UNORM_BLOCK","ASTC_10x8_SRGB_BLOCK","ASTC_10x8_UNORM_BLOCK","ASTC_12x10_SRGB_BLOCK","ASTC_12x10_UNORM_BLOCK","ASTC_12x12_SRGB_BLOCK","ASTC_12x12_UNORM_BLOCK","ASTC_4x4_SRGB_BLOCK","ASTC_4x4_UNORM_BLOCK","ASTC_5x4_SRGB_BLOCK","ASTC_5x4_UNORM_BLOCK","ASTC_5x5_SRGB_BLOCK","ASTC_5x5_UNORM_BLOCK","ASTC_6x5_SRGB_BLOCK","ASTC_6x5_UNORM_BLOCK","ASTC_6x6_SRGB_BLOCK","ASTC_6x6_UNORM_BLOCK","ASTC_8x5_SRGB_BLOCK","ASTC_8x5_UNORM_BLOCK","ASTC_8x6_SRGB_BLOCK","ASTC_8x6_UNORM_BLOCK","ASTC_8x8_SRGB_BLOCK","ASTC_8x8_UNORM_BLOCK","Alloc","AllocFlag","B10G11R11_UFLOAT_PACK32","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR","B16G16R16G16_422_UNORM","B16G16R16G16_422_UNORM_KHR","B4G4R4A4_UNORM_PACK16","B5G5R5A1_UNORM_PACK16","B5G6R5_UNORM_PACK16","B8G8R8A8_SINT","B8G8R8A8_SNORM","B8G8R8A8_SRGB","B8G8R8A8_SSCALED","B8G8R8A8_UINT","B8G8R8A8_UNORM","B8G8R8A8_USCALED","B8G8R8G8_422_UNORM","B8G8R8G8_422_UNORM_KHR","B8G8R8_SINT","B8G8R8_SNORM","B8G8R8_SRGB","B8G8R8_SSCALED","B8G8R8_UINT","B8G8R8_UNORM","B8G8R8_USCALED","BC1_RGBA_SRGB_BLOCK","BC1_RGBA_UNORM_BLOCK","BC1_RGB_SRGB_BLOCK","BC1_RGB_UNORM_BLOCK","BC2_SRGB_BLOCK","BC2_UNORM_BLOCK","BC3_SRGB_BLOCK","BC3_UNORM_BLOCK","BC4_SNORM_BLOCK","BC4_UNORM_BLOCK","BC5_SNORM_BLOCK","BC5_UNORM_BLOCK","BC6H_SFLOAT_BLOCK","BC6H_UFLOAT_BLOCK","BC7_SRGB_BLOCK","BC7_UNORM_BLOCK","BEGIN_RANGE","BEGIN_RANGE","BEGIN_RANGE","BEGIN_RANGE","BEGIN_RANGE","BEGIN_RANGE","BEGIN_RANGE","BEGIN_RANGE","BackendContext","Bool32","Buffer","COLOR_ATTACHMENT_OPTIMAL","CONCURRENT","COSITED_EVEN","COSITED_EVEN_KHR","CUBIC_IMG","ChromaLocation","CommandBuffer","D16_UNORM","D16_UNORM_S8_UINT","D24_UNORM_S8_UINT","D32_SFLOAT","D32_SFLOAT_S8_UINT","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR","DEPTH_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_STENCIL_READ_ONLY_OPTIMAL","DUAL_SRC_BLEND","Device","Device","DeviceMemory","DeviceSize","DrawableInfo","E5B9G9R9_UFLOAT_PACK32","EAC_R11G11_SNORM_BLOCK","EAC_R11G11_UNORM_BLOCK","EAC_R11_SNORM_BLOCK","EAC_R11_UNORM_BLOCK","END_RANGE","END_RANGE","END_RANGE","END_RANGE","END_RANGE","END_RANGE","END_RANGE","END_RANGE","ETC2_R8G8B8A1_SRGB_BLOCK","ETC2_R8G8B8A1_UNORM_BLOCK","ETC2_R8G8B8A8_SRGB_BLOCK","ETC2_R8G8B8A8_UNORM_BLOCK","ETC2_R8G8B8_SRGB_BLOCK","ETC2_R8G8B8_UNORM_BLOCK","EXCLUSIVE","EXT_DEBUG_REPORT","ExtensionFlags","Extent2D","FeatureFlags","Filter","Flags","Format","FormatFeatureFlags","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR","G16B16G16R16_422_UNORM","G16B16G16R16_422_UNORM_KHR","G16_B16R16_2PLANE_420_UNORM","G16_B16R16_2PLANE_420_UNORM_KHR","G16_B16R16_2PLANE_422_UNORM","G16_B16R16_2PLANE_422_UNORM_KHR","G16_B16_R16_3PLANE_420_UNORM","G16_B16_R16_3PLANE_420_UNORM_KHR","G16_B16_R16_3PLANE_422_UNORM","G16_B16_R16_3PLANE_422_UNORM_KHR","G16_B16_R16_3PLANE_444_UNORM","G16_B16_R16_3PLANE_444_UNORM_KHR","G8B8G8R8_422_UNORM","G8B8G8R8_422_UNORM_KHR","G8_B8R8_2PLANE_420_UNORM","G8_B8R8_2PLANE_420_UNORM_KHR","G8_B8R8_2PLANE_422_UNORM","G8_B8R8_2PLANE_422_UNORM_KHR","G8_B8_R8_3PLANE_420_UNORM","G8_B8_R8_3PLANE_420_UNORM_KHR","G8_B8_R8_3PLANE_422_UNORM","G8_B8_R8_3PLANE_422_UNORM_KHR","G8_B8_R8_3PLANE_444_UNORM","G8_B8_R8_3PLANE_444_UNORM_KHR","GENERAL","GEOMETRY_SHADER","GetProc","GetProcOf","GetProcResult","GraphicsBackendMemory","ITU_FULL","ITU_FULL_KHR","ITU_NARROW","ITU_NARROW_KHR","Image","ImageInfo","ImageLayout","ImageTiling","ImageUsageFlags","Instance","Instance","KHR_ANDROID_SURFACE","KHR_SURFACE","KHR_SWAPCHAIN","KHR_WIN32_SURFACE","KHR_XCB_SURFACE","LINEAR","LINEAR","MAPPABLE","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MIDPOINT","MIDPOINT_KHR","NEAREST","NONCOHERENT","NULL_HANDLE","NV_GLSL_SHADER","NullHandle","OPTIMAL","Offset2D","PREINITIALIZED","PRESENT_SRC_KHR","PVRTC1_2BPP_SRGB_BLOCK_IMG","PVRTC1_2BPP_UNORM_BLOCK_IMG","PVRTC1_4BPP_SRGB_BLOCK_IMG","PVRTC1_4BPP_UNORM_BLOCK_IMG","PVRTC2_2BPP_SRGB_BLOCK_IMG","PVRTC2_2BPP_UNORM_BLOCK_IMG","PVRTC2_4BPP_SRGB_BLOCK_IMG","PVRTC2_4BPP_UNORM_BLOCK_IMG","PhysicalDevice","PhysicalDeviceFeatures","PhysicalDeviceFeatures2","QUEUE_FAMILY_IGNORED","Queue","R10X6G10X6B10X6A10X6_UNORM_4PACK16","R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR","R10X6G10X6_UNORM_2PACK16","R10X6G10X6_UNORM_2PACK16_KHR","R10X6_UNORM_PACK16","R10X6_UNORM_PACK16_KHR","R12X4G12X4B12X4A12X4_UNORM_4PACK16","R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR","R12X4G12X4_UNORM_2PACK16","R12X4G12X4_UNORM_2PACK16_KHR","R12X4_UNORM_PACK16","R12X4_UNORM_PACK16_KHR","R16G16B16A16_SFLOAT","R16G16B16A16_SINT","R16G16B16A16_SNORM","R16G16B16A16_SSCALED","R16G16B16A16_UINT","R16G16B16A16_UNORM","R16G16B16A16_USCALED","R16G16B16_SFLOAT","R16G16B16_SINT","R16G16B16_SNORM","R16G16B16_SSCALED","R16G16B16_UINT","R16G16B16_UNORM","R16G16B16_USCALED","R16G16_SFLOAT","R16G16_SINT","R16G16_SNORM","R16G16_SSCALED","R16G16_UINT","R16G16_UNORM","R16G16_USCALED","R16_SFLOAT","R16_SINT","R16_SNORM","R16_SSCALED","R16_UINT","R16_UNORM","R16_USCALED","R32G32B32A32_SFLOAT","R32G32B32A32_SINT","R32G32B32A32_UINT","R32G32B32_SFLOAT","R32G32B32_SINT","R32G32B32_UINT","R32G32_SFLOAT","R32G32_SINT","R32G32_UINT","R32_SFLOAT","R32_SINT","R32_UINT","R4G4B4A4_UNORM_PACK16","R4G4_UNORM_PACK8","R5G5B5A1_UNORM_PACK16","R5G6B5_UNORM_PACK16","R64G64B64A64_SFLOAT","R64G64B64A64_SINT","R64G64B64A64_UINT","R64G64B64_SFLOAT","R64G64B64_SINT","R64G64B64_UINT","R64G64_SFLOAT","R64G64_SINT","R64G64_UINT","R64_SFLOAT","R64_SINT","R64_UINT","R8G8B8A8_SINT","R8G8B8A8_SNORM","R8G8B8A8_SRGB","R8G8B8A8_SSCALED","R8G8B8A8_UINT","R8G8B8A8_UNORM","R8G8B8A8_USCALED","R8G8B8_SINT","R8G8B8_SNORM","R8G8B8_SRGB","R8G8B8_SSCALED","R8G8B8_UINT","R8G8B8_UNORM","R8G8B8_USCALED","R8G8_SINT","R8G8_SNORM","R8G8_SRGB","R8G8_SSCALED","R8G8_UINT","R8G8_UNORM","R8G8_USCALED","R8_SINT","R8_SNORM","R8_SRGB","R8_SSCALED","R8_UINT","R8_UNORM","R8_USCALED","RANGE_SIZE","RANGE_SIZE","RANGE_SIZE","RANGE_SIZE","RANGE_SIZE","RANGE_SIZE","RANGE_SIZE","RANGE_SIZE","RGB_IDENTITY","RGB_IDENTITY_KHR","Rect2D","RenderPass","S8_UINT","SAMPLE_RATE_SHADING","SHADER_READ_ONLY_OPTIMAL","SHARED_PRESENT_KHR","SamplerYcbcrModelConversion","SamplerYcbcrRange","SharingMode","TRANSFER_DST_OPTIMAL","TRANSFER_SRC_OPTIMAL","UNDEFINED","UNDEFINED","Version","X8_D24_UNORM_PACK32","YCBCR_2020","YCBCR_2020_KHR","YCBCR_601","YCBCR_601_KHR","YCBCR_709","YCBCR_709_KHR","YCBCR_IDENTITY","YCBCR_IDENTITY_KHR","YcbcrConversionInfo","_bindgen_opaque_blob","_bindgen_opaque_blob","all","all","all","alloc","backend_memory","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chroma_filter","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","color_attachment_index","compatible_render_pass","contains","contains","contains","current_queue_family","default","default","default","default","deref","draw_bounds","drop","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extent","external_format","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_explicit_reconstruction","format","format","format","format_features","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_device_memory","from_info","from_info_with_queue_index","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","image","image","image_usage_flags","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","insert","insert","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_valid","layout","level_count","major","memory","minor","name","ne","ne","ne","ne","new","new","new","new","new_with_extensions","new_with_format","not","not","not","offset","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","patch","protected","remove","remove","remove","sample_count","secondary_command_buffer","set","set","set","set_max_api_version","set_protected_context","sharing_mode","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","tiling","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","width","wrap","wrap","wrap","wrap","wrap","wrap","x","x_chroma_offset","y","y_chroma_offset","ycbcr_conversion_info","ycbcr_model","ycbcr_range","Colors","ColorsInSpace","Flags","GradientShaderColors","INTERPOLATE_COLORS_IN_PREMUL","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","contains","default","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","is_all","is_empty","is_empty","len","linear","ne","not","partial_cmp","radial","remove","set","sub","sub_assign","sweep","to_owned","toggle","try_from","try_from","try_into","try_into","two_point_conical","type_id","type_id","allow_jit","font_cache_count_limit","font_cache_count_used","font_cache_limit","font_cache_used","init","purge_all_caches","purge_font_cache","purge_resource_cache","resource_cache_single_allocation_byte_limit","resource_cache_total_bytes_limit","resource_cache_total_bytes_used","set_flags","set_font_cache_count_limit","set_font_cache_limit","set_resource_cache_single_allocation_byte_limit","set_resource_cache_total_bytes_limit","InvertBrightness","InvertLightness","InvertStyle","Last","NoInvert","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id","HighContrastConfig","borrow","borrow_mut","clone","clone_into","contrast","default","eq","fmt","from","grayscale","high_contrast_config","inner","inner_mut","into","invert_style","is_valid","ne","new","new","to_owned","try_from","try_into","type_id","unwrap","wrap","InvertBrightness","InvertLightness","InvertStyle","NoInvert","init","Allow","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BitDepth","COUNT","CachingHint","CompressionType","CubicResampler","Disallow","ETC1","ETC2_RGB8_UNORM","F16","Image","Last","None","U8","alpha_type","b","backend_texture","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","c","catmull_rom","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color_space","color_type","decode_to_raster","dimensions","encode_to_data","encode_to_data_with_quality","encoded_data","eq","eq","eq","eq","flush","flush_and_submit","flush_with_info","fmt","fmt","fmt","fmt","from","from","from","from","from_adopted_texture","from_bitmap","from_compressed","from_encoded","from_generator","from_nv12_textures_copy","from_picture","from_pixmap_cross_context","from_raster_data","from_texture","from_yuva_pixmaps","from_yuva_textures","has_mipmaps","hash","hash","hash","height","image_info","inner","inner_mut","into","into","into","into","is_alpha_only","is_lazy_generated","is_opaque","is_texture_backed","is_valid","mitchell","ne","new_color_space","new_color_space_with_context","new_cross_context_from_pixmap","new_non_texture_image","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_subset","new_subset_with_context","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_with_filter","peek_pixels","read_pixels","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","reinterpret_color_space","scale_pixels","texture_size","to_owned","to_owned","to_owned","to_owned","to_shader","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_id","unwrap","width","with_default_mipmaps","wrap","Forward","ImageFilter","MapDirection","Reverse","alpha_threshold","arithmetic","blur","borrow","borrow_mut","can_compute_fast_bounds","clone","clone_into","color_filter","color_filter_node","compose","compute_fast_bounds","count_inputs","dilate","displacement_map_effect","distant_lit_diffuse_lighting","distant_lit_specular_lighting","eq","erode","filter_bounds","fmt","from","from_paint","from_picture","get_input","hash","input","inputs","into","magnifier","matrix_convolution","merge","offset","point_lit_diffuse_lighting","point_lit_specular_lighting","spot_lit_diffuse_lighting","spot_lit_specular_lighting","tile","to_a_color_filter","to_owned","try_from","try_into","type_id","with_local_matrix","ArithmeticFPInputs","CropRect","Dither","NO_CROP_RECT","No","Yes","alpha_threshold","arithmetic","blend","blur","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_filter","compose","default","dilate","displacement_map","distant_lit_diffuse","distant_lit_specular","drop_shadow","drop_shadow_only","enforce_pm_color","eq","eq","eq","erode","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","image","inner","inner_mut","into","into","into","k","magnifier","matrix_convolution","matrix_transform","merge","ne","ne","new","offset","paint","picture","point_lit_diffuse","point_lit_specular","rect","shader","shader_with_dither","spot_lit_diffuse","spot_lit_specular","tile","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","wrap","new","new","AFFINE","AffineMember","ApplyPerspectiveClip","Center","End","Fill","IDENTITY","IDENTITY","Matrix","Member","No","PERSPECTIVE","Persp0","Persp1","Persp2","SCALE","ScaleToFit","ScaleX","ScaleX","ScaleY","ScaleY","SkewX","SkewX","SkewY","SkewY","Start","TRANSLATE","TransX","TransX","TransY","TransY","TypeMask","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cheap_equal_to","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","concat","contains","decompose_scale","default","dirty_matrix_type_cache","dump","empty","eq","eq","eq","eq","eq","eq","extend","fixed_step_in_x","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_affine","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_poly_to_poly","from_rect_to_rect","get_9","get_type","has_perspective","hash","hash","hash","i","index","index","index","index_mut","index_mut","index_mut","inner","inner_mut","insert","intersects","into","into","into","into","into","into","invalid_matrix","invert","is_all","is_empty","is_finite","is_fixed_step_in_x","is_identity","is_scale_translate","is_similarity","is_translate","map_homogeneous_points","map_homogeneous_points_2d","map_origin","map_point","map_points","map_points_inplace","map_radius","map_rect","map_rect_scale_translate","map_rect_to_quad","map_rect_with_perspective_clip","map_vector","map_vectors","map_vectors_inplace","map_xy","max_scale","min_max_scales","min_scale","mul","ne","new_all","new_identity","new_scale","new_trans","normalize_perspective","not","partial_cmp","persp_x","persp_y","post_concat","post_idiv","post_rotate","post_scale","post_skew","post_translate","pre_concat","pre_rotate","pre_scale","pre_skew","pre_translate","preserves_axis_alignment","preserves_right_angles","rc","rect_stays_rect","rect_to_rect","remove","reset","rotate_deg","rotate_deg_pivot","rotate_rad","scale","scale_x","scale_y","set","set_9","set_affine","set_affine_identity","set_all","set_concat","set_identity","set_persp_x","set_persp_y","set_poly_to_poly","set_rect_to_rect","set_rotate","set_rsxform","set_scale","set_scale_translate","set_scale_x","set_scale_y","set_sin_cos","set_skew","set_skew_x","set_skew_y","set_translate","set_translate_x","set_translate_y","skew","skew_x","skew_y","sub","sub_assign","to_affine","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","translate","translate_x","translate_y","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","wrap","AFFINE","COLUMNS","IDENTITY","Map2","MapScalars","Matrix44","PERSPECTIVE","ROWS","SCALE","SetPrePostScale","TRANSLATE","TypeMask","Vector4","all","as_col_major","as_row_major","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains","default","default","determinant","dump","empty","eq","eq","eq","equals","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get","get_type","has_perspective","hash","inner","inner","inner_mut","inner_mut","insert","intersects","into","into","into","invert","is_all","is_empty","is_identity","is_scale","is_scale_translate","is_translate","map2","map2","map2","map_scalars","map_scalars","map_scalars","map_scalars","mul","mul","ne","ne","new","new_identity","new_nan","not","partial_cmp","post_concat","post_scale","post_scale","post_scale","post_translate","pre_concat","pre_scale","pre_scale","pre_scale","pre_translate","preserves_2d_axis_alignment","remove","reset","set","set","set","set_3x3","set_3x3_row_major","set_4x4","set_col_major","set_concat","set_identity","set_rotate_about","set_rotate_about_unit","set_rotate_degrees_about","set_row_major","set_scale","set_scale","set_scale","set_translate","sub","sub_assign","to_owned","to_owned","to_owned","toggle","transpose","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","unwrap","wrap","wrap","new","new_translate","new","DOT22","HLG","LINEAR","PQ","REC2020","SRGB","NUM_COLORS","new","Bevel","Butt","Cap","Fill","Join","Miter","Paint","Round","Round","Square","Stroke","StrokeAndFill","Style","alpha","alpha_f","as_image_filter","blend_mode","color","color4f","color_filter","get_fill_path","image_filter","is_anti_alias","is_dither","is_src_over","mask_filter","new","nothing_to_draw","path_effect","reset","set_alpha","set_alpha_f","set_anti_alias","set_argb","set_blend_mode","set_color","set_color4f","set_color_filter","set_dither","set_image_filter","set_mask_filter","set_path_effect","set_shader","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_width","set_style","shader","stroke_cap","stroke_join","stroke_miter","stroke_width","style","AddPathMode","Append","ArcSize","CCW","CONIC","CUBIC","CW","Close","Conic","Cubic","Direction","Done","EvenOdd","Extend","FillType","InverseEvenOdd","InverseWinding","Iter","LINE","Large","Line","MAX_POINTS","Move","Path","QUAD","Quad","RawIter","SegmentMask","Small","Verb","Winding","add_arc","add_circle","add_oval","add_path","add_path_matrix","add_poly","add_rect","add_round_rect","add_rrect","all","approximate_bytes_used","arc_to","arc_to_rotated","arc_to_tangent","as_winding","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","circle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","cmp","compute_tight_bounds","conic_to","conic_weight","conic_weight","conservatively_contains_rect","contains","contains","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","count_points","count_verbs","cubic_to","default","default","deserialize","drop","drop","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","empty","eq","eq","eq","eq","extend","fill_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_str","from_svg","generation_id","get_point","get_points","get_verbs","hash","hash","hash","hash","inc_reserve","insert","interpolate","intersects","into","into","into","into","into","into","into_iter","into_iter","is_all","is_close_line","is_closed_contour","is_convex","is_cubic_degenerate","is_empty","is_empty","is_finite","is_interpolatable","is_inverse_fill_type","is_last_contour_closed","is_line","is_line_degenerate","is_oval","is_quad_degenerate","is_rect","is_rrect","is_valid","is_volatile","last_pt","line","line_to","make_scale","make_transform","move_to","ne","new","new","new","new_from","next","next","not","offset","op","oval","oval_with_start_index","partial_cmp","peek","points","polygon","quad_to","r_arc_to_rotated","r_conic_to","r_cubic_to","r_line_to","r_move_to","r_quad_to","rect","remove","reset","reverse_add_path","rewind","rrect","rrect_with_start_index","segment_masks","serialize","set","set_fill_type","set_is_volatile","set_last_pt","set_path","set_path","shrink_to_fit","simplify","sub","sub_assign","swap","tight_bounds","to_owned","to_owned","to_owned","to_owned","to_svg","toggle","toggle_inverse_fill_type","transform","transform_with_perspective_clip","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_bounds_cache","with_offset","with_transform","with_transform_with_perspective_clip","LastEnum","Morph","Rotate","Style","Translate","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","new","DashInfo","PathEffect","PointData","as_a_dash","as_points","borrow","borrow","borrow_mut","borrow_mut","clip_rect","clone","clone_into","compose","compute_fast_bounds","corner_path","dash","default","discrete","drop","eq","filter_path","filter_path_inplace","first","flags","fmt","fmt","from","from","inner","inner_mut","intervals","into","into","last","line_2d","matrix","matrix_translate","merge","ne","path","path_1d","path_2d","phase","point_data","points","size","stroke","sum","to_owned","trim","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","wrap","CIRCLES","PointFlags","USE_CLIP","USE_PATH","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","is_all","is_empty","ne","not","partial_cmp","remove","set","sub","sub_assign","to_owned","toggle","try_from","try_into","type_id","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","PathMeasure","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","contains","default","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","hash","insert","intersects","into","is_all","is_closed","is_empty","length","matrix","ne","new","next_contour","not","partial_cmp","pos_tan","remove","segment","set","set_path","sub","sub_assign","to_owned","toggle","try_from","try_into","type_id","CCW","CW","Close","Conic","Cubic","EvenOdd","InverseEvenOdd","InverseWinding","Line","Move","PathDirection","PathFillType","PathSegmentMask","PathVerb","Quad","Winding","Annot","Art","AttributeList","BibEntry","BlockQuote","Caption","Code","Div","Document","DocumentStructureType","Figure","Form","Formula","H","H1","H2","H3","H4","H5","H6","Index","L","LBody","LI","Lbl","Link","Metadata","NonStruct","Note","P","Part","Private","Quote","RB","RP","RT","Reference","Ruby","Sect","Span","StructureElementNode","TBody","TD","TFoot","TH","THead","TOC","TOCI","TR","Table","WP","WT","Warichu","alt","append_child","append_float","append_float_array","append_int","append_string","append_string_array","attributes","attributes_mut","author","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","child_vector","clone","clone_into","creation","creator","default","default","drop","encoding_quality","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","keywords","lang","modified","new","new_document","node_id","pdfa","producer","raster_dpi","set_alt","set_child_vector","set_lang","set_node_id","set_type_string","subject","title","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_string","fractal_noise","turbulence","PictureRecorder","begin_recording","finish_recording_as_drawable","finish_recording_as_picture","new","recording_canvas","Cliperator","Combine","Difference","Intersect","Intersects","Iterator","LastOp","Region","RegionOp","Replace","ReverseDifference","Spanerator","Union","XOR","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine","compute_region_complexity","contains_point","contains_rect","contains_region","difference","difference","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_rect","get_boundary_path","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","intersect","intersect","intersects","intersects_rect","intersects_region","into","into","into","into","into_iter","into_iter","into_iter","is_complex","is_done","is_done","is_empty","is_rect","new","new","new","new","new_empty","next","next","next","next","next","op_rect","op_rect_region","op_region","op_region_rect","quick_contains","quick_reject_rect","quick_reject_region","read_from_memory","rect","rect","replace","replace","reset","reverse_difference","reverse_difference","rewind","rgn","set","set_empty","set_path","set_rect","set_rects","set_region","swap","to_owned","to_owned","to_owned","to_owned","translate","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","unwrap","unwrap","unwrap","wrap","wrap","wrap","write_to_memory","xor","xor","Complex","Corner","Empty","LastType","LowerLeft","LowerRight","NinePatch","Oval","RRect","Rect","SIZE_IN_MEMORY","Simple","Type","UpperLeft","UpperRight","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","contains","default","dump","dump_hex","dump_to_string","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_type","hash","hash","height","inner","inner_mut","inset","into","into","into","is_complex","is_empty","is_nine_patch","is_oval","is_rect","is_simple","is_valid","new","new_empty","new_nine_patch","new_oval","new_rect","new_rect_radii","new_rect_xy","offset","outset","radii","read_from_memory","rect","set_empty","set_nine_patch","set_oval","set_rect","set_rect_radii","set_rect_xy","simple_radii","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","width","with_inset","with_offset","with_outset","wrap","write_to_memory","Options","RuntimeEffect","Uniform","Variable","Varying","borrow","borrow_mut","children","clone","clone_into","count","default","eq","find_child","find_input","find_uniform","flags","fmt","force_no_inline","from","inner","inner_mut","input_size","inputs","into","is_array","make_color_filter","make_image","make_shader","marker","name","name","ne","new","new_with_options","offset","size_in_bytes","source","to_owned","try_from","try_into","ty","type_id","uniform","uniform_size","uniforms","unwrap","varyings","width","wrap","ARRAY","Flags","Float","Float2","Float2x2","Float3","Float3x3","Float4","Float4x4","Int","Int2","Int3","Int4","MARKER","MARKER_NORMALS","SRGB_UNPREMUL","Type","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","contains","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersects","into","into","is_all","is_empty","ne","not","partial_cmp","remove","set","sub","sub_assign","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","AsMipmapLinear","AsMipmapNearest","CubicResampler","FilterMode","FilterOptions","Linear","Linear","MediumBehavior","MipmapMode","Nearest","Nearest","None","SamplingMode","SamplingOptions","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone_into","clone_into","clone_into","cubic","default","eq","eq","eq","filter","fmt","fmt","fmt","from","from","from","from","from","from","from","from_filter_quality","hash","hash","inner","inner","inner_mut","inner_mut","into","into","into","mipmap","mipmap","ne","ne","new","sampling","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","unwrap","use_cubic","wrap","wrap","Color","Color","Conical","Conical","GradientInfo","GradientType","GradientTypeInternal","Last","Linear","Linear","None","Radial","Radial","Shader","Sweep","Sweep","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_count","color_offsets","colors","eq","eq","eq","fmt","fmt","fmt","fractal_perlin_noise","from","from","from","gradient_flags","hash","image","into","into","into","is_a_image","is_opaque","linear_gradient","ne","ne","radial_gradient","shaders","sweep_gradient","tile_mode","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","turbulence_perlin_noise","two_point_conical_gradient","type_id","type_id","type_id","with_color_filter","with_local_matrix","blend","color","color_in_space","empty","lerp","lerp2","new","blend","color","color_in_space","empty","lerp","lerp2","AsNativeRunHandler","AsRunHandler","BiDiRunIterator","Feature","FontRunIterator","LanguageRunIterator","RunHandler","RunHandler","RunIterator","ScriptRunIterator","Shaper","TextBlobBuilderRunHandler","as_native_run_handler","as_native_run_handler","as_run_handler","as_run_handler","at_end","begin_line","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit_line","commit_run_buffer","commit_run_info","consume","current_font","current_language","current_level","current_script","end","end_of_current_run","end_point","fmt","fmt","from","from","icu","into","into","make_blob","new","new","new_bidi_run_iterator","new_core_text","new_font_mgr_run_iterator","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_primitive","new_script_run_iterator","new_shape_dont_wrap_or_reorder","new_shape_then_wrap","new_shaper_driven_wrapper","new_std_language_run_iterator","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","purge_caches","purge_harf_buzz_cache","run_buffer","run_handler","run_info","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","start","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","init","Buffer","RunHandler","RunInfo","advance","begin_line","bidi_level","borrow","borrow","borrow_mut","borrow_mut","clusters","commit_line","commit_run_buffer","commit_run_info","fmt","fmt","font","from","from","glyph_count","glyphs","into","into","new","offsets","point","positions","run_buffer","run_info","try_from","try_from","try_into","try_into","type_id","type_id","utf8_range","new","new","Fill","Fill","Hairline","Hairline","InitStyle","Stroke","StrokeAndFill","StrokeRec","Style","apply_to_paint","apply_to_path","apply_to_path_inplace","borrow","borrow","borrow_mut","borrow_mut","cap","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_paint","has_equal_effect","hash","hash","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","into","into","is_fill_style","is_hairline_style","join","miter","need_to_apply","new","new_fill","new_hairline","res_scale","set_fill_style","set_hairline_style","set_res_scale","set_stroke_params","set_stroke_style","style","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","BackendHandleAccess","BackendSurfaceAccess","ContentChangeMode","Discard","DiscardWrite","FlushRead","FlushWrite","NoAccess","Present","Retain","Surface","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canvas","characterize","clone","clone","clone","clone_into","clone_into","clone_into","draw","draw_display_list","draw_display_list_with_offset","eq","eq","eq","flush","flush_and_submit","flush_submit_and_sync_cpu","flush_with_access_info","flush_with_mutable_state","fmt","fmt","fmt","from","from","from","from_backend_render_target","from_backend_texture","generation_id","get_backend_render_target","get_backend_texture","hash","hash","hash","height","image_info","image_snapshot","image_snapshot_with_bounds","into","into","into","is_compatible","new_null","new_raster","new_raster_direct","new_raster_n32_premul","new_render_target","new_render_target_with_characterization","new_surface","new_surface_with_dimensions","notify_content_will_change","peek_pixels","props","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","replace_backend_texture","replace_backend_texture_with_mode","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","write_pixels_from_bitmap","write_pixels_from_pixmap","canvas","CONVERT_TEXT_TO_PATHS","Canvas","Flags","NO_PRETTY_XML","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","contains","default","deref","deref_mut","drop","empty","end","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","is_all","is_empty","ne","new","not","partial_cmp","remove","set","sub","sub_assign","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","from_argb","from_table","ALL","ALL_TEXT_DECORATIONS","AboveBaseline","Affinity","All","AllAttributes","Alphabetic","Background","Baseline","BelowBaseline","Block","BlockIndex","BlockRange","Bottom","Center","Dashed","Decoration","Decorations","Direct","DisableAll","DisableFirstAscent","DisableLastDescent","Dotted","Double","Downstream","DrawOptions","EMPTY_BLOCK","EMPTY_BLOCKS","EMPTY_INDEX","EMPTY_RANGE","EMPTY_TEXT","End","Font","FontCollection","FontFamilies","FontFeature","Foreground","Gaps","Ideographic","IncludeLineSpacingBottom","IncludeLineSpacingMiddle","IncludeLineSpacingTop","Justify","LINE_THROUGH","LTR","Left","LetterSpacing","LineMetrics","LineMetricsVector","Max","Max","Middle","NO_DECORATION","None","OVERLINE","Paragraph","ParagraphBuilder","ParagraphCache","ParagraphStyle","Placeholder","PlaceholderAlignment","PlaceholderStyle","PositionWithAffinity","RTL","RangeExtensions","Record","RectHeightStyle","RectWidthStyle","Replay","Right","Shadow","Solid","Start","Strut","StrutStyle","StyleMetrics","StyleType","TextAlign","TextBaseline","TextBox","TextBoxes","TextDecoration","TextDecorationMode","TextDecorationStyle","TextDirection","TextHeightBehavior","TextIndex","TextRange","TextShadow","TextStyle","Through","Tight","Tight","Top","TypefaceFontProvider","TypefaceFontStyleSet","UNDERLINE","Upstream","Wavy","WordSpacing","abandon","add","add_placeholder","add_text","affinity","alias","alignment","all","alphabetic_baseline","append_typeface","as_slice","as_slice","ascent","baseline","baseline","baseline_offset","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","blocks_before","blur_radius","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clear_caches","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color","color","contains","contains","count","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_fallback","default_fallback_char","descent","did_exceed_max_lines","direct","disable_font_fallback","draw_options","effective_align","ellipsis","ellipsized","empty","empty","enable_font_fallback","end_excluding_whitespaces","end_including_newline","end_index","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","fallback_manager","family_name","find_typefaces","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_fallback_enabled","font_families","font_managers_count","font_metrics","font_size","font_style","force_strut_height","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_glyph_position_at_coordinate","get_line_metrics","get_rects_for_placeholders","get_rects_for_range","get_style_metrics","get_style_metrics_count","get_word_boundary","hard_break","has_shadow","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","hinting_is_on","ideographic_baseline","index","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","iter","iter","iter","layout","leading","left","line_number","line_number","longest_line","mark_dirty","max_intrinsic_width","max_lines","max_width","min_intrinsic_width","mode","name","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","not","offset","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","peek_style","pop","position","print_statistics","push_style","range","range","rect","register_typeface","remove","reset","set","set_asset_font_manager","set_default_font_manager","set_default_font_manager_and_family_names","set_draw_options","set_dynamic_font_manager","set_ellipsis","set_font_families","set_font_size","set_font_style","set_force_strut_height","set_height","set_height","set_leading","set_max_lines","set_paragraph_style","set_strut_enabled","set_strut_style","set_test_font_manager","set_text_align","set_text_direction","set_text_height_behavior","set_text_style","shift","start_index","strut_enabled","strut_style","style","style","style","sub","sub_assign","text_align","text_before","text_direction","text_height_behavior","text_style","text_style","text_style","thickness_multiplier","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn_hinting_off","turn_on","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlimited_lines","unscaled_ascent","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","value","width","width","width","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","Inverted","Mode","Normal","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","DoIncludeData","DontIncludeData","FontId","FontTableTag","IncludeDataIfLocal","LocalizedString","LocalizedStringsIter","SerializeBehavior","Typeface","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone","clone_into","clone_into","clone_with_arguments","copy_table_data","count_glyphs","count_tables","deserialize","eq","eq","equal","family_name","fmt","fmt","font_style","from","from","from_data","from_name","get_kerning_pair_adjustments","get_table_data","get_table_size","hash","into","into","is_bold","is_fixed_pitch","is_italic","language","ne","new","new_family_name_iterator","post_script_name","serialize","string","table_tags","to_font_data","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unichar_to_glyph","unichars_to_glyphs","unique_id","units_per_em","variation_design_parameters","variation_design_position","Camera3D","CustomTypefaceBuilder","Image","Patch3D","Path","PathAndPaint","Picture","TypefaceGlyph","View3D","axis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","detach","dot_with","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","inner","inner","inner_mut","inner_mut","interpolator","into","into","into","location","ne","ne","new","new_null_canvas","observer","origin","parse_path","patch_to_matrix","reset","reset","set_font_style","set_glyph","set_metrics","shadow_utils","text_utils","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","unwrap","unwrap","update","v","wrap","wrap","zenith","image","scale","FreezeEnd_Result","FreezeStart_Result","Interpolator","Normal_Result","Result","TimeToT","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","duration","elem_count","eq","eq","exact","fmt","fmt","from","from","hash","index","into","into","ne","new","reset","set_key_frame","set_mirror","set_repeat_count","set_reset","t","time_to_t","time_to_values","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unit_cubic_interp","from_svg","to_svg","ALL","GEOMETRIC_ONLY","ShadowFlags","TRANSPARENT_OCCLUDER","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","compute_tonal_colors","contains","draw_shadow","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","is_all","is_empty","local_bounds","ne","not","partial_cmp","remove","set","sub","sub_assign","to_owned","toggle","try_from","try_into","type_id","Align","Center","Left","Right","borrow","borrow_mut","clone","clone_into","draw_str","eq","fmt","from","get_path","hash","into","to_owned","try_from","try_into","type_id","Attribute","AttributeType","AttributeUsage","Bone","BoneIndices","BoneWeights","Builder","BuilderFlags","Byte4UNorm","Color","Float","Float2","Float3","Float4","HAS_COLORS","HAS_TEX_COORDS","Last","MAX_CUSTOM_ATTRIBUTES","NormalVector","Position","Raw","TriangleFan","TriangleStrip","Triangles","Vector","VertexMode","Vertices","all","apply_bones","approximate_size","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bytes_per_vertex","channel_count","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","colors","colors","contains","decode","default","detach","empty","encode","eq","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bones","has_colors","has_indices","has_tex_coords","hash","hash","hash","index_count","indices","indices","inner","inner","inner_mut","inner_mut","insert","intersects","into","into","into","into","into","into","is_all","is_empty","is_valid","is_volatile","is_volatile","marker_id","marker_name","mode","ne","ne","new","new","new_copy","new_with_usage_and_marker","not","partial_cmp","positions","positions","remove","set","sub","sub_assign","tex_coords","tex_coords","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","unwrap","unwrap","usage","vertex_count","wrap","wrap","NativeTransmutableWrapper","PointerWrapper","RefWrapper","ValueWrapper","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","unwrap","unwrap","unwrap","wrap","wrap","wrap","wrap_mut","wrap_ref","Centered","MAX_PLANES","PlaneConfig","S410","S411","S420","S422","S440","S444","Siting","Subsampling","UYV","UYVA","Unknown","Unknown","YUV","YUVA","YUVAInfo","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_total_bytes","dimensions","eq","eq","fmt","fmt","from","from","has_alpha","has_alpha","hash","hash","height","inner","inner_mut","into","into","new","num_channels_in_plane","num_channels_in_plane","num_planes","num_planes","origin","origin_matrix","plane_config","plane_dimensions","plane_dimensions","plane_subsampling_factors","plane_subsampling_factors","siting_xy","subsampling","subsampling_factors","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","width","with_dimensions","with_subsampling","wrap","yuv_color_space","DataType","Float16","Last","Last","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_color_type_for_data_type","eq","eq","fmt","fmt","from","from","hash","hash","into","into","num_channels_and_data_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DATA_TYPE_CNT","DataType","Float16","MAX_PLANES","MAX_PLANES","Unorm10_Unorm2","Unorm16","Unorm8","YUVAPixmapInfo","YUVAPixmaps","allocate","compute_total_bytes","data_type","data_type","from_data","from_data_type","from_external_memory","from_external_pixmaps","init_pixmaps_from_single_allocation","is_supported","new","num_planes","num_planes","pixmaps_info","plane","plane_info","plane_infos","planes","recommended_rgba_color_type","row_bytes","row_bytes_iter","yuv_color_space","yuva_info","yuva_info","yuva_pixmap_info","DataType","Float16","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","all","default_color_type_for_data_type","enable_data_type","from_context","num_channels_and_data_type","supported"],"q":["skia_safeskia_safe::annotate","","","skia_safe::canvasskia_safe::canvas::lattice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::color_filter","","","","","","","","","","","","","","skia_safe::color_filter::color_filters","","","","","","","","","skia_safe::color_filters","","","","","","","","","skia_safe::color_matrix","","","","","","","","","","","skia_safe::color_matrix_filter","skia_safe::colors","","","","","","","","","","","","skia_safe::contour_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::corner_path_effect","skia_safe::dash_path_effect","skia_safe::discrete_path_effect","skia_safe::document","","","","","","","","","","","","","","","","","skia_safe::document::state","","","","","","","","","","","","","","","","","","skia_safe::drawable","","","","","","","","","skia_safe::drawable::gpu_draw_handler","","skia_safe::encode","","skia_safe::font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments::variation_position","","","","","","","","","","","","","","","","","","","","","skia_safe::font_metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_parameters","","","","","","skia_safe::font_parameters::variation","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_style","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpuskia_safe::gpu::context_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpu::d3dskia_safe::gpu::glskia_safe::gpu::vkskia_safe::gradient_shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::graphics","","","","","","","","","","","","","","","","","skia_safe::high_contrast_config","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter::high_contrast_config","","","","skia_safe::icu","skia_safe::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::line_2d_path_effect","skia_safe::luma_color_filter","skia_safe::matrixskia_safe::matrix44","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::matrix_path_effect","","skia_safe::merge_path_effect","skia_safe::named_transfer_fn","","","","","","skia_safe::overdraw_color_filter","","skia_safe::paint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::pathskia_safe::path_1d_path_effect","","","","","","","","","","","","","","","","","","","skia_safe::path_2d_path_effect","skia_safe::path_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_effect::point_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_types","","","","","","","","","","","","","","","","skia_safe::pdf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::perlin_noise_shader","","skia_safe::picture_recorder","","","","","","skia_safe::region","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::rrect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::sampling_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader::shaders","","","","","","skia_safe::shader_mask_filter","skia_safe::shaders","","","","","","skia_safe::shaper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shaper::icu","skia_safe::shaper::run_handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::stroke_and_fill_path_effect","skia_safe::stroke_path_effect","skia_safe::stroke_rec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::svg","skia_safe::svg::canvas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::table_color_filter","","skia_safe::textlayoutskia_safe::trim_path_effect","","","","","","","","","","","","","","","","","skia_safe::typeface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::TypefaceGlyph","","skia_safe::utils::interpolator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::parse_path","","skia_safe::utils::shadow_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::text_utils","","","","","","","","","","","","","","","","","","","skia_safe::verticesskia_safe::wrapper","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","[Bitmap] describes a two-dimensional raster pixel array. […","","","","","Reflected across x-axis","Rotated 180","","","","","","[<code>Canvas</code>] provides an interface for drawing, and how the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","These values match the orientation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps a native type that can be represented and used in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","","","","","","","","","The maximum number of points an iterator will return for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a [<code>Canvas</code>] that is owned and dropped when it …","","","","","","","","","","","","","","","","","","","Implement this trait to use a pixel type in […","","","","","","","","","","","","","","","A wrapper type represented by a reference counted pointer …","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper type that represents a native type with a …","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the structure of planes for a YUV image with …","[YUVAInfo] combined with per-plane [ColorType]s and row …","Helper to store [Pixmap] planes as described by a […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All legal combinations of [PlaneConfig] and [DataType] …","Returns the set containing all flags.","Returns the set containing all flags.","Sets [ImageInfo] to width, height, and native color type; …","Sets [ImageInfo] to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","","","","","","","","","","","","","","","","","Allocate space for pixmaps’ pixels in the [YUVAPixmaps].","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new image from the bitmap. If the bitmap is …","Returns a new image from the bitmap. If the bitmap is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","","","","","","Access the underlying pixels as a byte array. This is a …","Access the underlying pixels as a byte array. This is a …","Returns number of bytes per pixel required by [ColorType].","","","Returns number of bytes per pixel required by [ColorType].","","","","","","","","","","Returns <code>true</code> if the handle can be sent to another thread.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns [ColorSpace], the range of colors, associated …","","","","","","Returns [ColorSpace], the range of colors, associated …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns minimum memory required for pixel storage.","","","","Returns minimum memory required for pixel storage.","","","","","Returns <code>true </code>if all pixels are opaque. [ColorType] …","","","Returns <code>true </code>if all pixels are opaque. [ColorType] …","","","","","","","Given a per-plane row bytes, determine size to allocate …","Determine size to allocate for all planes. Optionally …","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The per-YUV<code>[A]</code> channel data type.","","","","","","","See [RCHandle::new()].","","","","","","","","","","","Defaults to nothing supported.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>ISize { width(), height() }</code>.","","","","","","Returns <code>ISize { width(), height() }</code>.","Dimensions of the full resolution image (after planes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if […","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if […","","","","","","","","","","","","","","","","","","","Returns an empty set of flags","","Returns an empty set of flags","Update to add support for pixmaps with <code>num_channels</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces pixel values inside area with c. interpreted as …","","","Replaces pixel values inside area with c. interpreted as …","","","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","","","","","","","","Sets dst to alpha described by pixels. Returns <code>false</code> if …","Sets dst to alpha described by pixels. Returns <code>false</code> if …","Shares [PixelRef] with dst. Pixels are not copied; [Bitmap…","","Shares [PixelRef] with dst. Pixels are not copied; [Bitmap…onvert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","","","","","","","Init based on texture formats supported by the context.","","Use storage in [Data] as backing store for pixmaps’ …","","","","Like above but uses […","","","","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The [YUVAPixmaps] will have no …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a unique value corresponding to the pixels in […","","","Returns a unique value corresponding to the pixels in […","","","","Returns pixel address at (x, y).","Returns pixel address at (x, y).","Look up the pixel at (x,y) and return its alpha …","","","Look up the pixel at (x,y) and return its alpha …","","","","","","Returns pixel at (x, y) as unpremultiplied color. Returns …","","","Returns pixel at (x, y) as unpremultiplied color. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bounds of this bitmap, offset by its [PixelRef…","Returns the bounds of this bitmap, offset by its [PixelRef…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns pixel row count.","","","","","","","","","","","","Returns pixel row count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns width, height, [AlphaType], [ColorType], and […","","","Returns width, height, [AlphaType], [ColorType], and […","","","","Takes an allocation that is assumed to be at least […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","","","","","","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","Returns <code>true</code> if no flags are currently stored.","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if pixels can not change.","","Returns <code>true</code> if pixels can not change.","","","","","","","","","","","","","","","Returns <code>true</code> if [PixelRef] is <code>None</code>.","Returns <code>true</code> if [PixelRef] is <code>None</code>.","Returns <code>true</code> if [AlphaType] is set to hint that all …","","","","Returns <code>true</code> if [AlphaType] is set to hint that all …","","","","","","","","","","","","","","","Returns <code>true</code> if [Bitmap] can be drawn.","Returns <code>true</code> if [Bitmap] can be drawn.","","","","","","","","","","","Is this valid and does it use color types allowed by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>true</code> if the type matches the color type’s format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty [Bitmap] without pixels, with […","","","","","","","","","","Initializes a [YUVABackendTextureInfo] to describe a set …","","","","","","","","","","","","","","","","<code>dimensions</code> should specify the size of the full resolution …","","","","","","","Constructs a native Strings array from a slice of …","","Initializes the [YUVAPixmapInfo] from a [YUVAInfo] with …","","Creates an empty [Bitmap] without pixels, with […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a given byte slice without copying …","Constructs Data from a given byte slice without copying …","","","","","","","","Constructs Data from a &CStr by copying its contents.","Constructs Data from a &CStr by copying its contents.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a copy of a &str.","Constructs Data from a copy of a &str.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","Marks that pixels in [PixelRef] have changed. Subsequent …","","Marks that pixels in [PixelRef] have changed. Subsequent …","","","The number of [crate::Pixmap] planes.","","The number of [Pixmap] planes.","","Number of pixmap planes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies [Bitmap] pixel address, row bytes, and [ImageInfo] …","Copies [Bitmap] pixel address, row bytes, and [ImageInfo] …","","","","","","","","","Returns [PixelRef], which contains: pixel base address; …","Returns [PixelRef], which contains: pixel base address; …","Returns origin of pixels within [PixelRef]. [Bitmap] …","Returns origin of pixels within [PixelRef]. [Bitmap] …","Returns pixel address, the base address corresponding to …","","Access the underlying pixels. This is a rust-skia …","Access the underlying pixels. This is a rust-skia …","Returns pixel address, the base address corresponding to …","","Returns a constant reference to the [Pixmap] holding the […","Returns a constant reference to the [Pixmap] holding the […","","Get the ith [Pixmap] plane. <code>Pixmap</code> will be default …","","Returns the dimensions for each plane. Dimensions are as …","Format of the ith plane, or <code>None</code> if …","All plane formats.","Image info for the ith plane, or <code>None</code> if <code>i</code> >= […","An iterator of all planes’ image infos.","","Access the [Pixmap] planes.","","","","","The number of points an iterator will return for the verb.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies a [crate::Rect] of pixels from [Bitmap] to …","","Copies a [crate::Rect] of pixels from [Bitmap] to …","","","","","","","","","","","","","","","","","","","Notify that the borrowed dependency is not referred to …","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Resets to its initial state; all fields are set to zero, …","","","","","","Resets to its initial state; all fields are set to zero, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns row bytes, the interval from one pixel row to the …","","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> >= […","","Returns row bytes, the interval from one pixel row to the …","","Returns number of pixels that fit on row. Should be …","","","Returns number of pixels that fit on row. Should be …","Row bytes for all planes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","Inserts or removes the specified flags depending on the …","","","","","Sets [AlphaType], if <code>alpha_type</code> is compatible with […","Sets [AlphaType], if <code>alpha_type</code> is compatible with […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets internal flag to mark [Bitmap] as immutable. Once …","","Sets internal flag to mark [Bitmap] as immutable. Once …","","Sets width, height, [AlphaType], [ColorType], [ColorSpace]…","Sets width, height, [AlphaType], [ColorType], [ColorSpace]…","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces <code>pixel_ref</code> and origin in [Bitmap].  <code>offset</code> …","Replaces <code>pixel_ref</code> and origin in [Bitmap].  <code>offset</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","Disables all flags enabled in the set.","","","","Checks whether there is a supported combination of color …","","","","","Swaps the fields of the two bitmaps.","Swaps the fields of the two bitmaps.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","Sets [ImageInfo] to width, height, and native color type; …","Sets [ImageInfo] to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…","Sets [ImageInfo] to info following the rules in <code>set_info()</code>…eturns pixel count in each row. Should be equal or less …","","","","","","","","","Returns pixel count in each row. Should be equal or less …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a [YUVAInfo] that is identical to this one but …","","","","","","","","","","","","","","","","","","","","","","Returns a [YUVAInfo] that is identical to this one but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap the handle in a type that can be sent to another …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stack helper class calls [<code>Canvas::restore_to_count()</code>] …","[<code>Canvas</code>] provides an interface for drawing, and how the …","","","initializes with previous contents","[<code>Lattice</code>] divides [<code>crate::Bitmap</code>] or [<code>crate::Image</code>] into …","","Represents a [<code>Canvas</code>] that is owned and dropped when it …","","Selects if an array of points are drawn as discrete …","","","[<code>SaveLayerFlags</code>] provides options that may be used in any …","[<code>SaveLayerRec</code>] contains the state used to create the …","","[<code>SrcRectConstraint</code>] controls the behavior at the edge of …","","Provides access to Canvas’s pixels.","Returns the pixel base address, [<code>ImageInfo</code>], <code>row_bytes</code>, …","Returns the set containing all flags.","","","","","","If not <code>None</code>, this triggers the same initialization …","Gets the size of the base or root layer in global canvas …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Hints at layer size limit","source bounds to draw from","Fills clip with color <code>color</code> using [<code>BlendMode::Src</code>]. This …","","","","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","","","","","","","","","array of colors","Replaces [<code>Matrix</code>] with matrix premultiplied with existing …","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Sets [<code>Self::bounds</code>], [<code>Self::paint</code>], and [<code>Self::backdrop</code>] …","Creates an empty [<code>Canvas</code>] with no backing device or …","","","","","Returns [<code>IRect</code>] bounds of clip, unaffected by [<code>Matrix</code>]. …","Makes [<code>Canvas</code>] contents undefined. Subsequent calls that …","Associates [<code>Rect</code>] on [<code>Canvas</code>] when an annotation; a …","Draws arc using clip, [<code>Matrix</code>], and [<code>Paint</code>] paint.","Draws circle at center with radius using clip, [<code>Matrix</code>], …","Fills clip with color <code>color</code>. <code>mode</code> determines how ARGB is …","Draws [<code>Drawable</code>] drawable using clip and [<code>Matrix</code>], …","Draws [<code>Drawable</code>] drawable using clip and [<code>Matrix</code>], offset …","Draws [<code>RRect</code>] outer and inner using clip, [<code>Matrix</code>], and […","","Draws [<code>Image</code>] <code>image</code> stretched proportionally to fit into […","Draws [<code>Image</code>] <code>image</code> stretched proportionally to fit into […","","","","Draws [<code>IRect</code>] rect using clip, [<code>Matrix</code>], and [<code>Paint</code>] <code>paint</code>…","Draws line segment from <code>p1</code> to <code>p2</code> using clip, [<code>Matrix</code>], …","Draws oval oval using clip, [<code>Matrix</code>], and [<code>Paint</code>]. In …","Fills clip with [<code>Paint</code>] <code>paint</code>. [<code>Paint</code>] components, [<code>Shader</code>…","Draws a Coons patch: the interpolation of four cubics …","Draws [<code>Path</code>] path using clip, [<code>Matrix</code>], and [<code>Paint</code>] <code>paint</code>.…","Draws [<code>Picture</code>] picture, using clip and [<code>Matrix</code>]; …","Draws point <code>p</code> using clip, [<code>Matrix</code>] and [<code>Paint</code>] paint.","Draws <code>pts</code> using clip, [<code>Matrix</code>] and [<code>Paint</code>] <code>pain</code>. if the …","Draws [<code>Rect</code>] rect using clip, [<code>Matrix</code>], and [<code>Paint</code>] <code>paint</code>.…","Draws [<code>Region</code>] region using clip, [<code>Matrix</code>], and [<code>Paint</code>] …","Draws [<code>RRect</code>] bounded by [<code>Rect</code>] rect, with corner radii …","Draws [<code>RRect</code>] rrect using clip, [<code>Matrix</code>], and [<code>Paint</code>] …","","Draws [<code>String</code>], with origin at <code>(origin.x, origin.y)</code>, …","","Draws [<code>TextBlob</code>] blob at <code>(origin.x, origin.y)</code>, using …","Draws [<code>Vertices</code>] vertices, a triangle mesh, using clip …","Draws saved layers, if any. Frees up resources used by […","Restores [<code>Canvas</code>] to saved state. Drop is called when …","Returns an empty set of flags","","","","","Preserves LCD text, creates with prior layer contents","Triggers the immediate execution of all pending draw …","","","","","","","","","","","","","","","","","","","","","","Constructs a canvas that draws into bitmap. Use props to …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Allocates raster [<code>Canvas</code>] that will draw directly into …","Allocates raster [<code>Canvas</code>] specified by inline image …","Preserves [<code>Canvas::save()</code>] count. Optionally saves [<code>Canvas</code>…","","","","Returns [<code>ImageInfo</code>] for [<code>Canvas</code>]. If [<code>Canvas</code>] is not …","Writable pixels’ [<code>ImageInfo</code>]","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if clip is empty; that is, nothing will draw.","Returns <code>true</code> if clip is [<code>Rect</code>] and not empty. Returns …","Returns <code>true</code> if no flags are currently stored.","","Returns bounds of clip, transformed by inverse of [<code>Matrix</code>]…","Returns the current transform from local coordinates to …","Throws away the 3rd row and column in the matrix, so be …","","Creates [<code>Canvas</code>] of the specified dimensions without a […","","Creates [<code>Surface</code>] matching info and props, and associates …","Returns the complement of this set of flags.","[<code>Canvas</code>] top layer origin, its top-left corner","Modifies overlay","","Returns <code>true</code> if [<code>Canvas</code>] has direct access to its pixels.","Address of pixels","Copies [<code>SurfaceProps</code>], if [<code>Canvas</code>] is associated with …","Returns <code>true</code> if [<code>Rect</code>] <code>rect</code>, transformed by [<code>Matrix</code>], can …","Returns <code>true</code> if <code>path</code>, transformed by [<code>Matrix</code>], can be …","Copies [<code>Rect</code>] of pixels from [<code>Canvas</code>] into <code>dst_pixels</code>. […","Copies [<code>Rect</code>] of pixels from [<code>Canvas</code>] into bitmap. [<code>Matrix</code>…","Copies [<code>Rect</code>] of pixels from [<code>Canvas</code>] into pixmap. [<code>Matrix</code>…","Returns GPU context of the GPU surface associated with […","array of fill types","Removes the specified flags in-place.","Sets [<code>Matrix</code>] to the identity matrix. Any prior matrix …","Removes changes to [<code>Matrix</code>] and clip since [<code>Canvas</code>] state …","Restores [<code>Canvas</code>] to saved state immediately. Subsequent …","Restores state to [<code>Matrix</code>] and clip values when […","Rotates [<code>Matrix</code>] by degrees about a point at <code>(p.x, p.y)</code>. …","Writable pixels’ row bytes","Saves [<code>Matrix</code>] and clip. Calling [<code>Self::restore()</code>] …","Returns the number of saved states, each containing: […","Saves [<code>Matrix</code>] and clip, and allocates [<code>Bitmap</code>] for …","Saves [<code>Matrix</code>] and clip, and allocates [<code>Bitmap</code>] for …","Scales [<code>Matrix</code>] by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis.","Inserts or removes the specified flags depending on the …","DEPRECATED – use [<code>M44</code>] version","Replaces [<code>Matrix</code>] with <code>matrix</code>. Unlike [<code>Self::concat()</code>], …","DEPRECATED – use [<code>M44</code>] version","Skews [<code>Matrix</code>] by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis. …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Sometimes a canvas is owned by a surface. If it is, […","","","","Toggles the specified flags in-place.","DEPRECATED Legacy version of [<code>Self::local_to_device()</code>], …","Translates [<code>Matrix</code>] by <code>d</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies [<code>Rect</code>] from pixels to [<code>Canvas</code>]. [<code>Matrix</code>] and clip …","Copies [<code>Rect</code>] from pixels to [<code>Canvas</code>]. [<code>Matrix</code>] and clip …","x-axis values dividing bitmap","y-axis values dividing bitmap","","","[<code>Lattice</code>] divides [<code>crate::Bitmap</code>] or [<code>crate::Image</code>] into …","Optional setting per rectangular grid entry to make it …","","","","","","source bounds to draw from","","","array of colors","","","","","","","","","","array of fill types","","","","","","","","x-axis values dividing bitmap","y-axis values dividing bitmap","Reflected across x-axis","Rotated 180","","","","","These values match the orientation …","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if the encoded origin includes a 90 degree …","Given an width and height of the source data, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","","","","","","Borrows the canvas for the current page on the document.","Close the document and return the encoded representation. …","Ends the page. This function consumes the document and …","","","","The current page we are currently drawing on.","The number of pages in this document.","","","","","Document is currently on a page and can be drawn onto.","Document is currently open. May contain several pages.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","Returns an empty set of flags","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type of a font weight.","Wrapper type for the width of a font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A description of a set [BackendTexture]s that hold the …","A set of [BackendTexture]s that hold the planar data for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes a [YUVABackendTextureInfo] to describe a set …","","","","","","","","","","","","","","","","","","The number of [crate::Pixmap] planes.","","","","","Format of the ith plane, or <code>None</code> if …","All plane formats.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtains the raw pointer without transferring ownership. …","","","","","","","","","","","","","","","","","Performs QueryInterface fun.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>ComPtr</code> to wrap a raw pointer. It takes …","","","","","","","","","","","","","","","","Extracts the raw pointer. You are now responsible for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts up the inheritance chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","Toggles the specified flags in-placeeturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","Returns an empty set of flags","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","Safety","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","Safety","","","","","Safety","","Safety","","Safety","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type that represents either a slice of [<code>Color</code>], or a …","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On Windows, this function writes the file <code>icudtl.dat</code> into …","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …eturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum number of points an iterator will return for …","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","","","","","","","Inserts the specified flags in-place.","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","The number of points an iterator will return for the verb.","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-placeeturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Toggles the specified flags in-place.","","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for accessing the native run handler instance …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On Windows, this function writes the file <code>icudtl.dat</code> into …eturns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","Returns an empty set of flags","Ends the Canvas drawing and returns the resulting SVG. …","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Creates a new SVG canvas.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Efficient reference type to a C++ vector of font family …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","Returns indices and references to style metrics in the …","Returns the number of style metrics in the given index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-placehis wrapper combines SkInterpolatorBase and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that supports the conversion from a C/C++ value …","This trait supports the conversion of a wrapper into it’…","A trait that supports the conversion from a C/C++ …","A trait that supports the conversion from a C/C++ value …","Access the wrapped pointer.","","","","Access the wrapped pointer.","","","","Unwraps the wrapper type into the native pointer.","","","Wraps a native pointer into a wrapper type. Returns <code>None</code> …","","","","","","","Specifies how YUV (and optionally A) are divided among …","","","","","","","Describes how subsampled chroma values are sited relative …","UV subsampling is also specified in the enum value names …","","","","","","","Specifies the structure of planes for a YUV image with …","","","","","","","","","","","","","","","","","Given a per-plane row bytes, determine size to allocate …","Dimensions of the full resolution image (after planes …","","","","","","","Does the [PlaneConfig] have alpha values?","","","","","","","","","<code>dimensions</code> should specify the size of the full resolution …","Number of Y, U, V, A channels in the ith plane for a …","","Number of planes for a given [PlaneConfig].","","","","","Given image dimensions, a planer configuration, …","Returns the dimensions for each plane. Dimensions are as …","<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to …","","","","Ratio of Y/A values to U/V values in x and y.","","","","","","","","","","","Returns a [YUVAInfo] that is identical to this one but …","Returns a [YUVAInfo] that is identical to this one but …","","","Data type for Y, U, V, and possibly A channels …","","","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the default [ColorType] to use with <code>num_channels</code> …","","","","","","","","","","","If the [ColorType] is supported for YUVA pixmaps this …","","","","","","","","","","Data type for Y, U, V, and possibly A channels …","","","","","","","[YUVAInfo] combined with per-plane [ColorType]s and row …","Helper to store [Pixmap] planes as described by a […","Allocate space for pixmaps’ pixels in the [YUVAPixmaps].","Determine size to allocate for all planes. Optionally …","The per-YUV<code>[A]</code> channel data type.","","Use storage in [Data] as backing store for pixmaps’ …","Like above but uses […","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The [YUVAPixmaps] will have no …","Takes an allocation that is assumed to be at least […","Is this valid and does it use color types allowed by the …","Initializes the [YUVAPixmapInfo] from a [YUVAInfo] with …","The number of [Pixmap] planes.","Number of pixmap planes.","","Get the ith [Pixmap] plane. <code>Pixmap</code> will be default …","Image info for the ith plane, or <code>None</code> if <code>i</code> >= […","An iterator of all planes’ image infos.","Access the [Pixmap] planes.","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> >= […","Row bytes for all planes.","","","","","Data type for Y, U, V, and possibly A channels …","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","All legal combinations of [PlaneConfig] and [DataType] …","Gets the default [ColorType] to use with <code>num_channels</code> …","Update to add support for pixmaps with <code>num_channels</code> …","Init based on texture formats supported by the context.","If the [ColorType] is supported for YUVA pixmaps this …","Checks whether there is a supported combination of color …"],"i":[1,2,3,3,4,3,5,5,3,0,0,2,0,0,3,3,3,6,6,7,7,4,5,8,8,8,8,8,8,8,9,0,0,0,0,0,10,10,0,11,12,12,7,0,13,14,0,15,0,0,16,0,14,0,0,14,0,0,14,0,0,0,0,0,0,0,0,15,0,0,0,17,0,15,0,0,16,7,18,16,5,14,0,0,0,13,11,9,0,0,14,19,20,21,0,0,14,14,14,14,14,0,0,0,17,22,14,19,19,19,19,23,0,0,0,0,0,0,0,0,0,0,0,0,24,2,5,7,4,4,7,4,0,25,3,26,26,5,0,0,14,27,0,14,5,16,16,0,0,16,16,0,0,8,0,0,0,0,17,28,17,19,20,21,17,17,17,17,22,22,0,5,8,8,5,7,27,29,30,11,9,20,14,31,8,2,28,14,14,13,10,10,14,15,29,30,27,14,0,7,32,18,18,18,18,15,0,0,0,0,19,27,0,13,9,14,15,14,26,26,33,0,29,30,33,27,30,24,24,28,26,26,16,0,31,28,14,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,31,15,0,2,3,3,3,3,0,7,4,4,0,4,3,3,3,4,3,3,3,3,3,6,6,0,0,8,8,8,8,8,0,0,0,13,20,21,10,10,11,9,0,0,16,16,0,0,14,0,0,14,0,0,0,0,24,14,28,11,14,14,14,14,14,23,23,0,17,0,0,0,0,7,0,0,0,0,0,0,10,10,0,34,25,25,25,0,17,20,21,3,6,31,31,0,0,0,0,0,0,0,5,5,7,22,21,0,14,20,7,33,0,0,0,0,33,26,26,16,7,35,36,37,18,32,32,38,18,18,39,40,41,42,42,43,43,44,45,18,18,39,40,41,42,42,43,43,44,45,18,18,18,45,18,18,45,18,18,18,46,18,45,18,45,18,18,18,45,18,18,18,46,47,18,47,18,48,32,18,4,34,49,18,49,18,49,18,49,18,50,18,50,18,50,18,50,18,50,18,50,18,50,18,50,18,18,18,18,32,49,51,52,47,18,18,18,18,32,46,0,18,18,18,18,18,32,32,46,18,18,18,53,18,32,53,32,53,32,32,45,18,18,45,18,18,45,18,18,54,55,32,32,36,39,40,41,36,56,32,14,32,18,18,49,18,53,18,32,39,40,41,32,57,58,18,18,32,36,48,59,59,18,18,60,18,18,0,18,61,62,32,46,62,32,62,32,62,32,61,7,35,63,36,37,64,18,18,18,18,32,65,18,18,18,32,18,18,7,7,4,34,4,34,7,7,4,34,4,34,4,34,4,34,4,34,18,66,32,32,18,32,18,32,67,18,46,32,60,68,7,63,69,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,67,18,46,32,60,68,7,63,69,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,48,59,61,48,59,49,52,47,78,18,18,18,18,18,32,32,32,32,32,32,46,47,18,49,51,52,18,18,18,3,35,37,64,65,18,32,79,32,0,80,18,32,18,61,59,59,59,18,32,32,32,18,32,45,81,18,32,7,63,69,4,36,70,37,1,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,18,46,32,7,63,69,4,36,70,37,1,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,32,45,18,18,4,34,0,73,73,18,18,18,0,18,32,32,0,52,18,0,0,49,51,52,47,65,18,18,18,18,18,32,49,51,52,47,65,18,18,18,18,18,32,32,32,0,18,32,73,66,18,18,18,32,66,32,32,32,32,32,32,45,18,49,52,47,18,18,18,32,32,71,49,47,18,18,52,18,52,18,18,18,18,18,71,73,45,18,18,18,46,82,83,83,83,18,4,48,48,48,48,48,59,59,59,34,48,18,18,18,0,84,18,18,18,56,32,32,32,0,62,85,18,18,32,32,86,32,32,32,18,18,32,18,18,39,40,43,44,43,44,87,45,18,18,53,32,46,46,46,46,35,37,18,18,32,0,18,18,77,77,32,32,18,18,49,88,85,86,51,89,47,90,65,91,92,93,94,95,96,97,81,98,99,18,18,18,18,18,18,18,100,101,7,25,39,40,41,73,42,43,44,48,59,55,75,6,34,76,35,8,14,19,11,9,12,13,28,32,32,32,56,102,103,98,60,35,102,103,98,60,61,104,105,18,32,32,32,80,45,18,18,18,18,18,18,46,32,49,52,106,47,65,18,18,18,18,18,18,18,32,32,32,32,32,0,32,43,43,32,32,39,43,75,39,43,75,0,39,40,43,44,43,44,46,46,32,32,32,32,32,46,0,49,18,18,46,32,18,73,59,18,18,18,18,59,18,37,18,46,18,46,46,4,48,34,18,32,0,49,47,18,18,32,32,32,107,46,32,32,46,56,95,108,18,32,7,63,69,4,36,70,37,1,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,32,18,42,43,55,75,18,49,47,18,18,47,18,49,18,49,18,47,18,32,4,34,32,32,49,18,49,47,18,18,37,32,86,32,32,32,86,32,45,18,18,87,32,32,32,32,32,32,32,32,32,18,18,36,18,76,32,32,32,32,32,32,32,32,32,32,32,32,109,49,110,105,111,112,56,62,113,80,114,115,88,85,86,116,117,107,51,52,66,118,119,45,120,89,53,121,106,47,83,90,122,123,65,78,50,67,91,124,125,126,92,127,128,93,94,95,129,130,131,132,133,134,135,96,136,137,102,138,139,140,141,142,143,144,57,58,145,146,97,81,108,147,103,98,99,148,149,150,151,38,18,18,18,100,152,101,7,63,69,4,4,4,4,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,34,34,34,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,0,0,32,18,18,18,32,0,18,0,18,18,0,18,18,32,18,18,32,32,86,67,140,18,46,32,32,60,68,7,7,7,63,63,69,69,4,36,36,36,36,70,37,1,71,72,25,3,39,40,41,73,73,73,73,42,42,43,43,43,43,44,44,48,48,59,59,59,59,74,55,55,75,75,75,75,6,34,76,77,35,35,35,33,153,154,155,156,157,158,159,160,161,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,32,32,7,32,32,32,4,34,4,34,4,34,59,53,18,32,35,52,18,32,18,53,18,32,32,32,18,107,46,32,18,18,32,59,59,75,4,34,59,48,32,32,18,32,18,18,107,46,32,32,32,59,78,32,78,32,48,74,32,18,7,78,32,66,32,48,59,62,32,62,32,78,18,18,32,18,32,78,32,32,18,18,18,48,59,48,59,32,32,7,63,36,37,49,106,18,18,32,32,32,49,18,49,47,18,18,32,32,18,18,73,49,47,18,18,18,32,46,32,32,78,32,32,46,32,18,107,46,32,32,32,18,18,18,46,46,32,18,73,32,32,49,18,32,32,18,18,18,18,46,18,32,18,18,18,67,0,0,0,84,69,18,18,32,32,18,32,32,18,18,32,32,18,4,25,3,34,77,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,49,52,106,47,65,18,18,18,18,18,18,18,18,18,46,46,32,32,32,48,59,55,75,48,18,32,0,0,18,46,77,0,32,46,0,32,0,18,0,65,18,32,32,32,32,45,18,18,32,62,57,58,18,36,41,32,36,18,32,18,18,18,49,107,47,18,18,46,32,18,18,18,46,32,7,36,70,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,76,77,35,33,15,18,18,46,32,7,36,70,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,76,77,35,33,15,32,32,32,32,4,34,48,59,49,18,18,48,59,59,48,83,83,4,48,59,34,59,18,18,67,18,46,32,60,68,7,63,69,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,53,32,18,46,60,72,18,73,84,32,4,34,32,32,3,18,18,18,6,32,18,32,18,32,18,18,18,18,18,18,49,56,62,52,18,18,18,18,18,32,32,4,48,59,55,75,34,48,22,18,18,73,43,44,59,32,18,18,51,52,18,18,6,18,49,106,18,32,18,18,22,18,32,18,32,18,18,71,18,65,18,49,18,49,51,52,47,18,18,18,18,32,32,36,31,18,18,65,18,18,18,18,49,18,18,18,6,18,18,59,18,105,32,18,18,32,65,18,76,6,107,65,18,18,18,18,18,18,46,32,18,18,32,42,43,55,75,43,62,18,32,60,18,48,59,59,59,59,18,46,18,61,48,59,48,59,18,18,32,39,40,43,44,39,40,43,44,18,18,32,0,46,45,18,18,32,18,46,73,32,0,32,45,50,18,18,32,32,18,32,18,73,46,18,18,86,32,86,32,86,32,86,32,18,85,32,162,7,36,0,18,46,32,0,32,0,32,61,46,46,32,32,32,46,18,18,32,32,0,18,46,52,18,77,163,87,18,18,32,77,45,18,18,164,164,164,164,36,36,36,39,39,40,40,41,41,43,75,39,39,40,40,41,41,43,75,3,18,18,18,14,0,73,165,165,7,63,69,4,36,70,37,1,39,40,41,42,43,44,48,59,74,55,75,34,77,35,33,26,164,26,164,18,39,40,41,42,43,44,43,49,80,86,51,52,45,47,78,50,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,46,46,46,46,32,32,32,32,32,32,60,7,36,71,39,40,41,73,42,43,44,48,59,74,55,75,76,35,52,18,46,56,32,32,32,56,32,32,46,32,56,32,18,18,32,18,56,62,85,32,32,32,48,59,55,75,32,18,46,18,86,32,18,18,18,32,18,46,46,73,32,32,52,18,52,18,32,32,32,45,18,53,32,46,32,32,32,32,32,32,32,32,52,18,46,46,46,46,105,32,105,32,46,56,32,86,32,56,32,32,32,32,32,32,32,32,46,46,46,46,85,32,56,32,52,18,18,18,18,18,32,18,32,112,124,60,72,18,32,39,40,43,44,73,43,44,4,34,18,106,32,32,32,49,106,18,32,18,18,18,18,18,18,45,18,18,18,32,43,48,59,43,48,59,32,0,18,18,18,18,18,65,18,18,32,18,32,48,59,18,18,32,0,0,46,32,32,4,34,0,32,0,32,0,0,18,0,0,0,49,18,32,32,46,32,0,73,0,76,49,18,49,18,49,106,47,18,18,32,49,18,18,18,18,18,18,18,18,18,18,18,53,32,32,32,15,18,45,18,46,18,32,18,32,18,73,32,18,73,18,73,73,0,0,73,73,32,18,0,32,46,46,32,46,45,18,18,32,18,166,83,83,18,18,7,63,36,18,45,18,18,45,18,18,45,18,18,18,45,18,18,32,0,73,18,49,47,18,18,32,32,32,47,18,32,32,32,32,18,18,32,18,74,0,32,32,60,32,18,4,34,32,32,18,49,52,45,47,18,18,18,18,18,18,18,18,18,18,32,18,32,18,65,18,38,18,32,32,32,32,46,18,18,48,59,48,59,73,46,46,46,59,59,167,59,59,73,49,106,47,18,18,18,32,49,47,18,18,18,73,73,0,18,18,0,69,65,18,18,163,0,46,0,73,43,44,47,18,32,18,43,44,32,74,77,18,32,18,104,105,53,18,32,32,32,32,18,4,42,43,44,74,55,75,34,73,43,18,18,49,18,18,18,32,32,32,32,32,18,18,18,59,59,59,59,73,73,18,18,18,18,47,18,18,73,73,18,18,32,32,18,46,32,18,46,18,18,18,48,59,55,75,18,45,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,46,18,18,18,73,74,18,49,106,18,32,49,18,59,45,18,18,59,18,18,18,43,43,18,18,18,48,59,18,46,18,18,18,43,46,18,18,18,49,18,18,73,18,18,18,18,18,18,32,32,73,73,73,73,18,73,18,18,73,18,18,18,18,18,18,18,18,18,18,18,18,46,18,18,32,46,18,46,46,46,73,18,18,18,18,48,59,18,48,59,0,18,0,0,18,46,46,46,46,0,49,51,52,47,18,18,18,18,18,0,18,18,56,18,32,48,59,18,18,32,32,45,18,48,59,48,59,32,18,32,32,74,32,32,18,32,18,18,32,0,18,18,18,0,0,18,18,46,85,18,18,32,4,39,40,41,42,42,43,43,44,34,4,39,40,41,42,42,43,43,44,34,32,18,32,18,32,0,18,0,49,18,18,18,0,0,32,0,32,0,18,32,46,18,46,46,46,18,18,0,18,18,18,32,18,107,46,0,18,32,18,18,77,32,32,32,75,69,36,75,32,7,63,73,73,22,36,18,46,32,7,63,69,4,36,70,37,1,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,18,59,74,7,75,49,53,18,32,32,18,18,18,74,105,32,4,34,45,18,18,48,59,61,48,59,18,18,18,46,73,18,73,32,0,49,18,49,18,49,18,49,18,67,18,46,32,60,68,7,63,69,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,67,18,46,32,60,68,7,63,69,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,32,46,18,32,74,18,74,67,18,46,32,60,68,7,63,69,4,36,70,37,1,71,72,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,34,76,77,35,33,31,8,2,5,27,29,30,17,14,16,19,24,23,11,9,22,12,15,20,13,28,21,104,32,0,67,18,18,18,18,32,18,32,32,32,107,53,78,46,32,32,32,32,32,32,46,18,46,32,68,7,36,70,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,76,77,35,33,15,18,87,65,18,0,69,52,18,32,32,3,18,32,32,32,32,0,65,18,18,18,65,18,41,49,52,106,47,65,18,18,18,18,18,18,18,18,18,32,32,32,48,59,55,75,48,7,48,51,52,18,18,65,18,32,51,52,65,18,18,18,105,32,51,52,18,18,32,52,18,18,65,18,48,59,105,32,32,32,66,32,18,48,59,48,59,48,59,18,105,32,18,18,18,18,18,46,32,7,36,70,71,25,3,39,40,41,73,42,43,44,48,59,74,55,75,6,76,77,35,33,15,18,18,79,32,0,47,18,47,18,18,32,32,18,48,59,39,40,41,42,42,43,44,61,61,61,48,59,39,40,41,42,42,43,44,77,18,18,18,0,18,18,18,18,0,0,40,41,44,0,0,0,0,0,0,168,169,168,0,170,0,168,0,170,170,0,0,0,0,169,0,171,168,171,171,171,171,172,173,171,168,168,168,168,168,168,168,173,171,172,174,168,175,176,170,169,173,171,172,174,168,175,176,170,169,173,177,171,171,173,173,171,171,171,171,171,168,170,169,168,170,169,168,177,171,171,168,173,172,172,176,172,176,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,172,176,168,168,170,169,168,173,171,173,171,172,168,168,168,168,168,175,176,170,169,173,171,172,174,168,175,176,170,169,171,168,168,168,168,171,171,174,168,170,169,171,175,173,173,168,168,173,171,172,174,168,175,176,170,169,168,171,171,168,0,171,171,171,168,171,171,171,168,175,173,168,171,175,171,171,171,171,171,171,171,177,168,171,171,176,171,171,175,171,171,171,171,171,168,178,171,171,171,168,168,171,168,170,169,168,171,171,173,171,172,174,168,175,176,170,169,173,171,172,174,168,175,176,170,169,173,171,172,174,168,175,176,170,169,173,173,171,171,177,177,179,179,0,0,179,177,179,177,179,177,179,179,177,179,179,177,179,177,179,179,177,179,177,179,177,179,177,179,177,179,177,177,10,10,180,0,17,10,0,17,17,17,17,17,17,17,10,10,10,181,0,182,182,0,10,10,0,0,17,180,10,10,17,181,0,183,10,182,181,180,183,10,182,181,180,109,183,10,182,181,180,183,10,182,181,180,10,109,109,183,10,182,181,180,183,10,182,181,180,183,183,10,182,181,180,109,109,109,109,109,109,109,109,109,109,10,182,181,180,109,109,10,10,183,10,182,181,180,183,109,109,109,183,109,0,109,109,109,109,183,10,10,183,10,182,181,180,183,10,182,181,180,183,10,182,181,180,183,10,182,181,180,10,109,10,183,0,0,110,110,110,110,110,110,110,110,110,110,110,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,95,95,95,95,95,95,95,95,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,184,184,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,112,111,184,184,184,184,184,111,184,111,184,112,184,184,111,184,112,111,184,184,184,184,184,184,184,184,0,0,0,0,185,185,185,185,185,185,185,185,185,185,185,185,0,185,185,185,0,0,186,187,186,187,186,187,186,187,186,187,186,187,186,187,186,187,0,0,114,114,114,114,0,114,114,0,115,0,0,188,188,0,0,188,188,188,188,188,88,88,88,188,188,188,88,88,88,88,88,88,88,88,188,88,188,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,188,188,188,188,88,88,88,88,88,0,0,189,190,189,190,189,190,189,189,189,190,189,190,189,189,189,190,189,189,189,189,190,189,190,189,190,189,189,0,189,0,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,192,0,0,192,192,192,192,192,61,61,192,192,192,192,192,192,192,192,61,192,61,61,61,192,61,192,61,192,192,192,61,61,192,192,61,192,192,192,192,192,192,61,192,61,192,192,192,192,61,192,61,61,192,192,192,61,192,192,61,61,192,61,192,192,192,192,61,61,192,192,192,61,192,61,192,61,192,61,192,61,61,61,61,61,61,61,61,0,193,193,193,193,0,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,194,194,195,195,194,194,195,195,194,0,194,196,194,194,194,195,196,194,195,195,0,194,195,195,196,0,0,197,197,194,195,197,196,194,195,197,196,194,195,197,196,194,195,197,196,197,194,195,194,195,197,196,194,195,197,196,194,194,195,195,197,196,196,194,195,197,194,195,197,194,195,197,196,197,194,195,197,197,194,195,197,194,195,197,196,194,195,197,196,194,195,197,196,194,195,197,196,194,195,197,197,197,194,195,197,0,0,0,0,0,0,198,0,199,199,0,0,0,0,141,199,0,0,199,200,200,201,202,203,199,199,0,0,0,0,0,0,0,198,199,0,0,200,200,201,202,203,102,140,204,204,140,133,133,133,132,133,134,135,140,134,135,205,206,207,208,199,200,201,202,198,203,204,205,206,207,208,199,200,201,202,198,203,204,133,102,205,206,207,199,200,201,202,198,203,205,206,207,199,200,201,202,198,203,140,140,102,140,0,0,134,135,208,140,134,135,204,204,204,204,204,204,205,206,207,199,200,201,202,198,203,102,102,204,102,102,205,206,207,208,199,200,201,202,198,203,204,204,102,205,206,207,208,199,200,201,202,198,203,204,132,132,0,204,135,134,134,134,134,199,200,201,202,198,203,134,135,102,205,208,205,208,205,206,207,208,199,200,201,202,198,203,204,135,134,135,134,132,133,134,135,204,204,140,206,206,140,140,204,141,205,206,207,132,133,141,142,204,204,134,135,102,133,133,134,135,102,96,133,134,135,102,133,141,142,102,204,102,141,141,102,102,102,204,102,102,207,102,102,102,102,207,204,135,102,102,102,102,134,135,135,102,102,134,135,135,102,102,102,142,141,142,142,205,206,207,199,200,201,202,198,203,133,205,206,207,208,199,200,201,202,198,203,204,205,206,207,208,199,200,201,202,198,203,204,205,206,207,208,199,200,201,202,198,203,204,204,204,205,208,0,134,135,134,135,205,208,141,141,142,209,209,0,210,0,210,0,209,210,211,211,211,211,210,209,211,210,209,211,210,209,210,209,211,211,211,211,211,211,211,211,210,209,211,210,209,211,210,209,211,211,210,209,211,211,211,211,210,209,211,211,211,211,211,211,211,211,211,211,211,211,210,209,211,210,209,211,210,209,211,210,209,211,211,211,0,0,212,213,213,213,212,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,0,212,213,212,0,213,212,213,213,214,212,215,213,213,214,214,213,213,213,212,0,0,0,0,213,214,0,213,213,214,0,212,213,212,0,214,212,212,214,216,217,218,216,217,219,215,214,212,213,218,216,217,219,215,214,212,213,218,218,216,217,219,218,216,217,219,218,0,215,214,212,213,218,216,218,218,219,216,217,219,218,217,216,217,217,219,215,214,212,213,218,218,217,216,217,218,216,217,218,216,217,219,215,214,212,213,218,218,217,215,214,212,213,216,217,216,216,217,217,0,0,217,217,216,217,219,218,216,217,219,215,214,212,213,218,216,217,219,215,214,212,213,218,216,217,219,215,214,212,213,218,216,217,218,218,215,214,212,213,219,217,216,217,218,220,220,221,0,220,220,220,220,220,0,0,221,0,0,222,222,0,220,220,220,220,220,221,221,222,221,221,220,220,220,221,220,220,220,220,220,220,220,220,220,220,220,221,220,220,0,221,0,0,220,221,221,222,138,221,221,221,221,221,221,221,221,223,224,221,222,220,223,224,221,222,220,223,224,221,222,220,223,224,221,222,220,221,221,223,224,221,223,224,221,222,220,221,139,139,224,223,224,221,221,221,221,221,222,220,223,224,223,224,221,222,220,220,221,221,221,224,221,223,138,139,221,222,220,223,223,224,223,224,221,221,223,224,221,222,220,221,221,138,224,221,139,139,221,221,138,221,138,221,221,221,223,223,224,221,222,220,221,223,224,221,222,220,223,224,221,222,220,223,224,221,222,220,223,224,139,223,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,227,228,229,230,231,232,0,0,0,228,227,232,232,229,0,0,225,225,225,225,225,228,228,228,228,228,228,233,0,234,0,0,0,225,225,225,225,225,225,226,227,228,229,230,231,232,225,225,225,225,225,225,227,235,0,0,0,0,0,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,228,233,0,0,0,0,231,231,231,231,0,0,0,0,0,0,234,235,235,235,235,235,226,229,236,225,226,227,228,229,230,231,232,232,232,229,236,0,235,0,226,0,228,228,225,225,225,225,225,225,225,225,0,0,0,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,227,228,229,230,231,232,230,230,0,0,225,233,228,228,0,0,0,228,228,225,228,0,225,230,230,230,230,230,230,230,230,0,237,238,235,233,236,239,240,235,233,236,235,233,236,235,233,236,235,233,236,235,233,236,235,233,236,235,233,236,241,235,233,240,236,242,239,234,243,244,245,237,225,226,227,228,229,246,247,248,230,231,232,238,241,235,233,240,236,242,239,234,243,244,245,237,225,226,227,228,229,246,247,248,230,231,232,238,242,235,233,240,236,242,239,234,243,245,225,226,227,228,229,246,247,248,230,231,232,238,235,233,240,236,242,239,234,243,245,225,226,227,228,229,246,247,248,230,231,232,238,235,233,236,245,243,243,235,233,236,239,240,242,239,243,245,243,241,235,233,236,235,233,240,236,242,245,225,226,227,228,229,230,231,232,235,233,236,248,242,240,241,235,235,235,235,235,233,233,233,233,233,240,236,236,236,236,236,242,239,234,243,244,245,225,226,227,228,229,246,247,248,230,231,232,238,242,242,239,243,242,241,235,233,240,236,242,239,234,243,244,245,245,245,237,225,226,227,228,229,246,247,248,230,231,232,238,235,233,236,235,233,236,235,233,236,240,239,239,235,233,236,235,233,236,225,226,227,228,229,230,231,232,247,239,243,239,235,233,240,242,239,243,235,233,240,242,239,243,235,233,236,235,233,236,241,235,233,240,236,242,239,234,243,244,245,237,225,226,227,228,229,246,247,248,230,231,232,238,235,233,236,235,233,236,242,239,239,245,240,245,234,235,233,236,245,241,242,239,245,241,242,235,233,236,240,248,235,233,236,245,245,239,235,233,236,239,243,235,233,236,241,241,239,240,235,233,236,235,233,236,239,235,233,240,236,242,239,234,243,245,225,226,227,228,229,246,247,248,230,231,232,238,235,233,236,241,235,233,240,236,242,239,234,243,244,245,237,225,226,227,228,229,246,247,248,230,231,232,238,241,235,233,240,236,242,239,234,243,244,245,237,225,226,227,228,229,246,247,248,230,231,232,238,241,235,233,240,236,242,239,234,243,244,245,237,225,226,227,228,229,246,247,248,230,231,232,238,235,233,240,242,239,243,247,235,233,240,242,239,243,246,242,246,242,239,242,242,249,249,0,0,250,250,250,250,250,250,250,250,250,250,249,250,249,250,250,250,250,250,250,250,250,250,250,250,250,250,249,250,249,249,249,250,250,250,250,250,250,250,250,249,250,250,249,249,0,250,250,250,0,250,250,250,250,0,250,250,250,249,250,249,0,250,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,251,0,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,0,84,84,84,84,84,84,84,84,84,84,0,84,84,84,84,84,84,0,84,84,84,84,84,84,84,251,251,0,251,0,252,253,253,0,253,0,0,0,252,253,253,254,0,253,253,254,116,64,116,64,253,254,252,64,253,254,252,116,64,64,64,253,254,252,64,253,254,252,116,116,116,116,116,116,116,64,253,254,252,116,116,116,64,253,254,252,64,253,254,252,116,116,116,116,116,116,116,116,116,116,116,116,116,253,254,252,116,116,64,64,64,253,254,252,116,116,116,116,116,64,64,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,64,253,254,252,116,64,253,254,252,64,253,254,252,64,253,254,252,116,64,116,116,64,255,0,0,255,117,117,117,255,255,117,255,255,117,117,117,117,117,117,117,117,117,255,117,117,255,255,117,117,117,255,117,117,255,117,117,117,117,117,117,117,117,117,117,255,255,255,255,117,0,0,0,256,257,257,0,0,0,0,256,258,257,256,258,257,256,258,257,256,258,257,0,0,256,0,0,0,0,0,0,258,256,258,257,0,256,258,257,256,256,256,256,256,256,256,258,258,257,257,0,256,256,256,258,257,258,0,0,0,0,256,258,258,0,0,0,0,0,256,0,0,0,0,0,256,258,257,256,258,257,256,258,257,256,258,257,256,256,0,0,259,0,0,260,260,260,0,259,0,0,261,259,262,262,262,259,0,262,263,262,263,262,263,262,263,260,259,262,263,262,263,0,261,259,259,259,259,259,259,259,259,259,264,262,263,261,260,259,264,262,263,261,260,264,259,264,262,263,261,260,259,264,262,263,261,260,259,264,259,264,264,264,264,259,259,264,262,263,261,260,259,264,259,259,259,259,259,264,262,263,261,260,259,264,264,262,263,261,260,264,259,259,259,259,264,264,264,264,264,259,261,260,264,264,264,264,264,264,264,264,264,259,259,259,264,262,263,261,260,264,264,259,259,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,259,264,264,264,264,264,259,259,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,259,264,264,264,264,264,264,264,259,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,259,259,264,259,264,262,263,261,260,259,264,264,264,259,264,262,263,261,260,259,264,262,263,261,260,259,264,262,263,261,260,264,264,265,266,265,0,0,0,265,266,265,0,265,0,0,265,266,266,265,265,265,265,265,265,265,267,265,266,267,265,266,267,265,266,267,265,266,265,265,267,266,266,266,265,267,265,266,267,265,267,265,265,265,265,265,266,267,267,267,267,267,265,266,265,265,265,265,266,266,266,265,267,266,267,266,265,265,267,265,266,266,265,265,266,266,266,266,268,266,266,269,266,266,266,266,266,267,265,267,266,266,265,265,266,270,266,266,266,266,270,266,266,266,266,265,266,267,265,266,266,266,266,266,266,266,266,266,266,266,270,266,266,266,265,265,267,265,266,265,266,267,265,266,267,265,266,267,265,266,267,266,267,266,0,0,0,0,0,0,0,0,0,0,0,9,11,0,23,0,9,0,11,9,11,23,23,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,271,0,12,272,272,12,273,273,273,0,273,22,271,0,22,22,0,272,274,273,273,273,0,272,273,0,0,274,0,22,119,119,119,119,119,119,119,119,119,272,119,119,119,119,119,272,272,272,272,272,272,272,275,276,272,274,271,273,275,276,272,274,271,273,119,119,272,274,271,273,272,274,271,273,119,272,119,119,275,276,119,119,272,119,119,119,119,119,119,275,276,119,275,276,119,119,119,119,119,272,272,274,271,273,272,119,275,272,272,272,272,272,274,271,273,275,276,272,274,271,273,273,272,272,272,272,119,119,119,119,119,119,272,274,271,273,119,272,119,272,275,276,272,274,271,273,275,276,272,275,275,119,119,119,272,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,272,275,276,119,119,275,276,272,119,119,119,119,272,276,273,119,119,119,119,119,119,119,119,119,272,119,119,119,119,119,119,119,272,119,119,119,275,276,119,119,272,272,119,119,272,274,271,273,119,272,119,119,119,275,276,272,274,271,273,275,276,272,274,271,273,275,276,272,274,271,273,119,119,119,119,277,277,277,0,277,277,277,277,277,277,277,277,277,277,0,277,277,277,277,0,0,0,0,120,120,278,279,278,279,278,279,279,120,120,120,120,278,120,278,279,120,120,278,278,278,279,278,279,278,278,279,278,279,278,120,120,120,120,279,278,120,120,279,0,278,278,120,120,279,120,278,279,278,279,278,279,278,278,280,0,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,281,281,281,0,0,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,89,281,281,281,281,281,89,281,89,89,281,89,89,281,281,89,281,89,281,89,281,281,281,281,281,281,281,12,12,15,15,15,22,22,22,15,15,0,0,0,0,15,22,282,282,0,282,282,282,282,282,282,0,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,0,282,282,282,282,282,282,282,282,282,282,282,282,282,0,282,282,282,282,282,282,282,282,282,282,282,282,283,283,94,94,94,94,94,283,283,284,283,284,282,283,284,282,283,282,282,284,284,283,284,283,284,282,283,284,282,283,284,282,282,283,284,282,284,283,284,283,0,283,284,284,284,283,283,283,283,283,284,284,282,283,284,282,283,284,282,283,284,282,283,0,0,0,121,121,121,121,121,0,0,285,285,0,0,285,0,0,285,285,0,285,285,286,287,288,285,286,287,288,285,83,286,287,288,285,286,287,288,285,289,83,83,83,83,289,289,287,288,285,286,287,288,285,286,287,288,285,83,83,285,286,287,288,286,287,288,289,289,290,83,83,286,287,288,285,286,287,288,83,286,287,83,83,83,286,287,288,286,286,286,287,287,288,83,83,83,83,83,83,83,83,286,287,289,289,286,289,289,286,286,83,83,83,83,83,83,83,286,287,288,285,83,83,286,287,288,285,286,287,288,285,286,287,288,285,289,289,286,287,288,286,287,288,83,289,289,291,0,291,291,292,292,291,291,0,291,293,291,0,292,292,293,293,291,292,293,291,292,293,293,291,292,293,291,292,293,293,293,293,293,293,291,292,293,291,292,293,291,292,293,291,292,293,293,293,293,293,291,292,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,291,292,293,293,291,292,293,291,292,293,291,292,293,293,293,293,293,293,293,0,0,0,0,0,294,294,131,294,294,129,294,294,131,131,131,129,294,294,294,294,294,131,131,294,129,131,131,131,129,129,130,294,0,0,129,129,131,294,294,294,129,294,0,131,131,294,131,130,294,295,0,296,296,296,296,296,296,296,296,296,296,296,295,295,295,0,295,295,295,295,295,295,295,295,295,296,295,296,295,296,295,296,295,295,295,295,296,295,295,295,295,295,295,296,295,296,295,295,295,295,295,296,295,295,295,296,295,295,295,295,295,295,295,295,295,295,296,295,295,296,295,296,295,296,297,297,0,0,0,29,30,0,0,29,30,30,0,0,64,163,297,87,163,297,87,64,163,297,87,163,297,87,87,87,163,297,87,87,163,297,87,163,297,87,87,87,87,87,87,163,297,297,87,297,87,163,297,87,163,87,163,87,87,163,163,297,87,163,297,87,163,297,87,163,297,87,297,87,87,297,87,298,299,298,299,0,0,0,299,298,299,299,298,299,0,298,299,298,300,299,298,300,299,298,300,299,298,300,299,300,300,300,298,300,299,298,300,299,90,298,300,299,300,299,90,298,300,299,90,90,90,298,300,90,0,90,300,298,300,299,298,300,299,298,300,299,90,90,298,300,299,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,301,0,0,0,0,302,303,301,303,304,305,303,306,303,306,306,306,305,305,305,304,148,151,149,150,306,304,303,303,306,303,306,0,303,306,303,99,303,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,305,0,305,99,99,99,99,306,306,306,303,306,303,306,303,306,306,0,0,0,0,307,305,307,307,308,307,308,308,305,305,305,307,308,307,307,308,307,308,307,308,308,308,308,308,305,305,307,308,307,308,307,308,307,0,0,309,310,309,310,0,310,310,0,0,122,122,122,309,310,309,310,122,309,310,309,310,309,310,309,310,309,310,122,122,309,310,122,122,122,309,310,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,309,310,309,310,309,310,309,310,122,0,0,0,311,312,312,312,313,313,311,0,311,312,313,311,312,313,123,123,311,312,313,311,312,313,123,123,123,311,312,313,123,123,123,123,123,311,312,313,311,312,313,123,123,123,123,123,311,312,313,123,123,123,123,311,312,313,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,311,312,313,311,312,313,311,312,313,311,312,313,123,123,123,0,314,0,0,314,314,314,314,314,314,314,314,314,315,314,315,314,314,314,314,314,314,315,315,315,314,315,314,314,315,314,314,314,314,314,315,314,314,314,314,314,314,314,314,315,314,314,314,314,315,314,314,314,314,314,314,314,314,315,314,315,314,315,314,0,0,316,0,317,0,318,319,320,319,317,317,0,0,0,317,321,322,0,319,323,318,318,318,322,322,324,0,0,0,0,0,0,321,319,0,0,0,319,325,320,326,326,326,321,316,327,321,319,0,0,326,328,317,316,319,316,0,0,0,0,0,0,0,0,327,0,323,0,0,323,321,319,322,321,326,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,325,326,328,317,0,0,316,324,322,319,146,329,145,145,330,103,331,316,144,103,57,58,332,332,331,331,316,316,316,316,316,316,316,333,334,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,145,143,335,334,316,337,331,329,333,324,326,328,321,327,330,320,318,323,322,325,319,317,335,334,316,337,331,329,333,324,326,328,321,327,330,320,318,323,322,325,319,317,316,334,337,339,316,146,334,316,337,331,329,333,324,326,328,321,330,320,322,325,319,317,143,143,332,144,335,143,81,81,81,81,339,316,143,332,332,332,335,334,316,337,331,329,333,324,326,328,321,327,320,318,323,322,325,319,317,316,143,103,143,335,336,332,334,316,316,316,316,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,143,97,143,336,97,97,97,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,316,316,316,316,144,144,144,144,332,332,144,332,334,316,324,326,328,321,327,320,318,323,322,325,319,317,144,97,81,332,331,81,144,338,335,336,332,334,337,331,329,333,335,336,332,334,337,331,329,333,316,339,339,316,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,316,316,57,58,338,144,97,332,144,332,144,144,144,81,144,144,337,108,335,316,337,329,333,143,145,146,97,81,103,98,336,334,331,329,333,316,334,144,143,143,316,145,145,330,146,145,329,333,335,98,316,146,316,143,143,143,81,143,81,97,97,97,97,97,81,97,81,145,97,81,143,81,81,81,81,339,332,97,81,337,329,333,316,316,81,333,81,81,81,336,333,337,335,334,316,337,331,329,333,324,326,328,321,327,330,320,318,323,322,325,319,317,316,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,81,146,337,335,336,332,334,316,337,331,329,333,338,324,326,328,321,327,330,320,318,323,322,325,319,317,81,332,335,336,332,334,337,331,329,333,108,339,332,331,335,336,332,334,337,331,329,333,340,0,340,340,340,340,340,340,340,340,340,340,0,340,340,340,340,341,341,0,0,341,0,0,0,0,342,341,342,341,91,342,341,342,341,91,91,91,91,91,342,341,91,91,342,341,91,342,341,91,91,91,91,91,341,342,341,91,91,91,342,342,91,91,91,91,342,91,91,342,341,342,341,342,341,342,341,91,91,91,91,91,91,0,0,343,0,343,343,343,0,0,344,345,344,343,345,344,343,345,344,345,344,345,344,152,345,345,344,345,344,343,345,344,343,343,343,343,343,345,344,345,344,0,345,344,343,344,345,344,152,0,344,345,0,344,345,344,152,152,152,0,0,345,344,345,345,344,343,345,344,343,345,344,343,345,345,344,344,345,345,344,344,346,346,347,347,0,347,0,0,348,347,348,347,348,347,348,347,101,101,348,347,348,348,347,348,347,347,348,348,347,348,101,101,101,101,101,101,348,101,101,348,347,348,347,348,347,348,347,0,0,0,349,349,0,349,349,349,349,349,349,349,349,349,349,349,349,349,349,0,349,0,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,0,349,349,349,349,349,349,349,349,349,349,349,349,0,350,350,350,350,350,350,350,0,350,350,350,0,350,350,350,350,350,350,0,0,0,0,0,0,0,0,351,352,351,351,351,351,353,353,354,125,352,352,352,354,354,354,352,0,0,353,125,125,353,353,353,353,353,353,353,125,126,125,126,355,351,356,353,354,352,355,351,356,353,354,352,125,356,356,355,351,356,353,354,352,355,351,356,353,354,352,353,125,126,353,125,356,126,353,125,355,351,356,353,354,352,353,355,351,356,353,353,353,353,353,354,352,355,351,356,353,354,352,353,353,353,353,125,125,125,125,353,354,352,125,125,126,351,356,351,356,353,353,355,351,356,353,354,352,353,353,356,125,126,356,356,125,355,353,126,356,125,356,353,353,125,126,353,353,353,353,125,126,355,351,356,353,354,352,353,355,351,356,353,354,352,355,351,356,353,354,352,356,355,351,356,353,354,352,125,351,356,356,125,351,356,0,0,0,0,357,358,359,360,357,358,359,360,357,358,359,357,358,359,360,360,361,92,0,362,362,362,362,362,362,0,0,363,363,362,363,363,363,0,363,363,363,363,363,363,363,363,362,361,362,361,362,361,362,361,92,92,362,361,362,361,362,361,0,92,362,361,92,362,362,362,361,92,0,92,0,92,92,92,92,0,92,0,92,92,92,0,362,361,362,361,362,361,362,361,362,92,92,92,362,92,0,364,363,364,0,362,362,362,362,362,362,0,0,363,363,362,363,364,364,364,363,363,363,363,363,363,363,363,363,363,363,364,363,364,363,364,363,364,0,363,364,363,364,363,364,363,364,363,364,0,363,364,363,364,363,364,363,364,127,0,364,127,128,364,364,364,0,0,128,127,127,128,128,127,128,128,127,127,127,127,128,128,128,127,127,128,128,127,127,127,127,128,0,0,364,0,362,362,362,362,362,362,0,0,363,363,362,363,364,364,364,363,363,363,363,363,363,363,363,363,363,93,0,93,93,0,93],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u8",15]],null,null,[[]],[[]],[[],["bool",15]],[[["path",6],["pathop",4]]],[[["path",6],["pathop",4]]],[[]],[[]],[[]],[[]],[[["ivector",3]]],[[["isize",3]]],[[["size",3]]],[[["vector",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[]],[[["isize",3]]],[[["ivector",3]]],[[["size",3]]],[[["vector",6]]],[[["point3",3]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[]],[[]],[[["option",4]]],[[["path",6]]],[[["path",6]]],[[["path",6]]],[[["path",6],["matrix",3]]],[[["placeholderstyle",3]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[["option",4]]],[[]],[[]],[[]],[[["option",4]]],[[]],[[["textshadow",3]]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[],["str",15]],[[]],[[],["colorchannelflag",3]],[[],["surfacepropsflags",3]],[[]],[[]],[[]],[[]],[[["imageinfo",6]]],[[["imageinfo",6]]],[[["imageinfo",6]]],[[["imageinfo",6]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["scalar",6],["font",6],["option",4],["usize",15],["rect",3]]],[[["scalar",6],["font",6],["option",4],["usize",15],["rect",3]]],[[["usize",15],["font",6]]],[[["usize",15],["font",6]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["scalar",6],["font",6],["option",4],["usize",15],["rect",3]]],[[["scalar",6],["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["font",6],["option",4],["usize",15],["rect",3]]],[[["yuvapixmapinfo",6]],["option",4]],[[],["u8",15]],[[],["f32",15]],[[["region",6],["scalar",6]],["option",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["alphatype",4]],[[],["scalar",6]],null,[[["f32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[["typeface",6]]],[[]],[[["canvas",3]]],[[["paint",6]]],[[["path",6],["path",6]],["bool",15]],[[["path",6]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["bool",15],["scalar",6]]],[[["bool",15],["scalar",6]]],[[["bool",15],["scalar",6]]],[[["arcsize",4],["scalar",6],["pathdirection",4]]],[[["arcsize",4],["scalar",6],["pathdirection",4]]],[[["pathdirection",4],["scalar",6],["arcsize",4]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[],["bool",15]],[[],["i64",15]],[[],["option",4]],[[],[["dashinfo",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],[["directcontext",6],["option",4]]],[[],[["dxgi_format",6],["option",4]]],[[],["format",4]],[[],["image",6]],[[],["image",6]],[[],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[]],[[]],[[]],[[["strokerec",6],["path",6],["matrix",3]],[["option",4],["pointdata",3]]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["irect",3]],[[],["rect",3]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],[["format",4],["option",4]]],[[["path",6]],[["option",4],["path",6]]],[[],[["option",4],["path",6]]],null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["cstr",3]],[[["usize",15]],["cstr",3]],[[["usize",15]]],[[["usize",15]]],null,[[],["u8",15]],[[],["u8",15]],null,null,null,null,[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendformat",6]],[[],["backendformat",6]],[[],["backendformat",6]],[[],["backendformat",6]],[[["bool",15]],["option",4]],[[],[["paint",6],["option",4]]],[[["option",4],["bbhfactory",6]],["canvas",3]],[[]],[[["u32",15]]],[[["colorchannelflag",3]],["colorchannelflag",3]],[[["surfacepropsflags",3]],["surfacepropsflags",3]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[["u32",15]]],[[]],[[["colorchannelflag",3]],["colorchannelflag",3]],[[["surfacepropsflags",3]],["surfacepropsflags",3]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[],["u32",15]],[[],["u32",15]],[[["colorchannelflag",3]],["colorchannelflag",3]],[[["surfacepropsflags",3]],["surfacepropsflags",3]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[],["blendmode",4]],[[["blurstyle",4],["scalar",6]],["option",4]],[[],["option",4]],[[["blurstyle",4],["scalar",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["optioni32",15]],[[],["scalar",6]],null,null,null,[[],["irect",3]],[[],["irect",3]],[[],["irect",3]],[[],["rect",3]],[[],["irect",3]],[[],["rect",3]],[[],["irect",3]],[[],["irect",3]],[[],["irect",3]],[[],["irect",3]],[[],["rect",3]],[[],["rect",3]],[[],["rect",3]],[[],["rect",3]],[[],["irect",3]],[[],["paragraph",6]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["canvas",3]],[[],["canvas",3]],[[],["canvas",3]],[[],["cap",4]],null,[[],["point",3]],[[],["scalar",6]],[[],["scalar",6]],[[],["u32",15]],[[],[["surfacecharacterization",6],["option",4]]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[],["color",3]],[[],["rgb",3]],[[],["hsv",3]],[[],["colorchannelflag",3]],[[],["color4f",3]],[[],["colorspaceprimaries",3]],[[],["colorspacetransferfn",3]],[[],["xyzd50hash",3]],[[],["cubicmap",3]],[[],["textencoding",4]],[[],["colortype",4]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[],["m44",3]],[[],["ipoint",3]],[[],["point",3]],[[],["point3",3]],[[],["irect",3]],[[],["rect",3]],[[],["rsxform",3]],[[],["isize",3]],[[],["size",3]],[[],["pixelgeometry",4]],[[],["surfacepropsflags",3]],[[]],[[],["datetime",3]],[[],["fourbytetag",3]],[[],["budgeted",3]],[[],["skalphatype",4]],[[],["skyuvcolorspace",4]],[[],["skcolorchannel",4]],[[],["skencodedimageformat",4]],[[],["skfilterquality",4]],[[],["skfiltermode",4]],[[],["skmipmapmode",4]],[[],["skcodec_result",4]],[[],["skblendmode",4]],[[],["skblendmodecoeff",4]],[[],["skclipop",4]],[[],["skfonthinting",4]],[[],["skpaint_style",4]],[[],["skpaint_cap",4]],[[],["skpaint_join",4]],[[],["skpathfilltype",4]],[[],["skpathdirection",4]],[[],["skpathverb",4]],[[],["skcoveragemode",4]],[[],["sktilemode",4]],[[],["skblurstyle",4]],[[],["skpathop",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fontarguments",3]],[["option",4],["typeface",6]]],[[]],[[]],[[]],[[["colorchannelflag",3]],["ordering",4]],[[["surfacepropsflags",3]],["ordering",4]],null,[[["usize",15]],["v4",3]],[[]],[[],["color",3]],[[],["color",3]],[[],["color4f",3]],null,[[],[["colorfilter",6],["option",4]]],[[],["option",4]],[[],[["colorfilter",6],["option",4]]],null,[[],["colorinfo",6]],[[],["colorinfo",6]],null,null,[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],[["option",4],["colorspace",6]]],[[],["colorspace",6]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[],["colortype",4]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],null,[[],["option",4]],[[],["option",4]],[[["v4",3]]],[[["coveragemode",4]]],[[["region",6],["regionop",4]]],[[["irect",3],["region",6],["regionop",4]]],[[["irect",3],["region",6],["regionop",4]]],[[["coveragemode",4]]],[[]],[[],["option",4]],[[]],[[],["patheffect",6]],[[],["option",4]],[[["compressiontype",4]],["backendformat",6]],[[["compressiontype",4]],["backendformat",6]],[[],["rect",3]],[[],["rect",3]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["rect",3]],[[],["rect",3]],[[["f32",15]],["point",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["rect",3]],[[["option",4]],["usize",15]],[[["option",4]],["usize",15]],[[["f32",15]],["f32",15]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[],["bool",15]],[[]],[[],["bool",15]],[[["ipoint",3]],["bool",15]],[[["region",6]],["bool",15]],[[["irect",3]],["bool",15]],[[],["bool",15]],[[["colorchannelflag",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["ipoint",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["point",3]],["bool",15]],[[["surfacepropsflags",3]],["bool",15]],[[],["bool",15]],[[["ipoint",3]],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],null,null,[[["usize",15],["scalar",6]],[["option",4],["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["fonttabletag",6]],[["option",4],["data",6]]],[[["scalar",6]],["option",4]],null,[[],["usize",15]],[[],["usize",15]],[[],["i32",15]],[[],["i32",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["textencoding",4]],["usize",15]],[[],["usize",15]],[[],["scalar",6]],[[]],[[["vector",6]],["scalar",6]],[[]],[[],["scalar",6]],[[]],null,[[]],[[]],[[]],[[],["rect",3]],[[],["rect",3]],[[],["font",6]],[[],["cstr",3]],[[],["u8",15]],[[],["fourbytetag",3]],[[],["u8",15]],null,[[],[["textureresourceinfo",3],["option",4]]],[[],[["textureresourceinfo",3],["option",4]]],[[["scalar",6]],["option",4]],null,[[],["datatype",4]],[[],["datatype",4]],null,null,[[]],[[]],[[],["decoration",3]],[[],["decoration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["color",3]],[[]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[]],[[],["ipoint",3]],[[],["point",3]],[[],["point3",3]],[[],["irect",3]],[[],["rect",3]],[[],["isize",3]],[[],["size",3]],[[]],[[]],[[]],[[],["fourbytetag",3]],[[],["skyuvcolorspace",4]],[[],["skblendmode",4]],[[],["skclipop",4]],[[],["skpaint_cap",4]],[[],["skpaint_join",4]],[[],["skpathdirection",4]],[[],["sktilemode",4]],[[],["skblurstyle",4]],[[["colortype",4],["renderable",4]],["backendformat",6]],[[],[["option",4],["typeface",6]]],[[["unichar",6],["fontstyle",3]],[["option",4],["typeface",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4]],[[],["colorspace",6]],[[["data",6]],[["option",4],["path",6]]],[[],[["option",4],["typeface",6]]],[[],["option",4]],[[],["colorspace",6]],[[],[["option",4],["deferreddisplaylist",6]]],[[],["path",6]],[[],["vertices",6]],[[],[["option",4],["typeface",6]]],[[],[["option",4],["deferreddisplaylist",6]]],[[],["path",6]],[[],["data",6]],[[],[["skstreamasset",3],["stream",3]]],[[],["bool",15]],[[],["option",4]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[],["isize",3]],[[]],[[["scalar",6]],["option",4]],null,[[["scalar",6]],["option",4]],[[],["scalar",6]],[[],["scalar",6]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],null,[[],["scalar",6]],[[],["scalar",6]],[[["vector",6]],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[["backenddrawableinfo",6]]],[[["canvas",3],["option",4],["matrix",3]]],[[["canvas",3],["paint",6],["option",4]]],[[["canvas",3]]],[[],["bool",15]],[[],["bool",15]],[[],["drawoptions",4]],null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["data",6]],[[["bool",15]],["data",6]],[[]],[[]],[[],["option",4]],null,[[],["edging",4]],[[],["textalign",4]],[[],["usize",15]],[[],["str",15]],[[],["bool",15]],[[],["colorchannelflag",3]],[[]],[[],["surfacepropsflags",3]],[[["datatype",4],["usize",15]]],[[]],null,[[["encodedimageformat",4],["usize",15]],[["option",4],["data",6]]],[[["encodedimageformat",4],["usize",15]],[["option",4],["data",6]]],[[["encodedimageformat",4],["usize",15]],[["option",4],["data",6]]],[[["encodedimageformat",4],["usize",15]],[["option",4],["data",6]]],[[]],[[["encodedimageformat",4]],[["option",4],["data",6]]],[[["encodedimageformat",4],["i32",15]],[["option",4],["data",6]]],[[],[["option",4],["data",6]]],[[],[["option",4],["data",6]]],[[],[["option",4],["data",6]]],[[],["encodedimageformat",4]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["color",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["colorchannelflag",3]],["bool",15]],[[["color4f",3]],["bool",15]],[[["colorspaceprimaries",3]],["bool",15]],[[["colorspacetransferfn",3]],["bool",15]],[[["xyzd50hash",3]],["bool",15]],[[["textencoding",4]],["bool",15]],[[["colortype",4]],["bool",15]],[[["v2",3]],["bool",15]],[[["v3",3]],["bool",15]],[[["v4",3]],["bool",15]],[[],["bool",15]],[[["ipoint",3]],["bool",15]],[[["point",3]],["bool",15]],[[["point3",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["rsxform",3]],["bool",15]],[[["isize",3]],["bool",15]],[[["size",3]],["bool",15]],[[["pixelgeometry",4]],["bool",15]],[[["surfacepropsflags",3]],["bool",15]],[[],["bool",15]],[[["datetime",3]],["bool",15]],[[["fourbytetag",3]],["bool",15]],[[["budgeted",3]],["bool",15]],[[["skalphatype",4]],["bool",15]],[[["skyuvcolorspace",4]],["bool",15]],[[["skcolorchannel",4]],["bool",15]],[[["skencodedimageformat",4]],["bool",15]],[[["skfilterquality",4]],["bool",15]],[[["skfiltermode",4]],["bool",15]],[[["skmipmapmode",4]],["bool",15]],[[["skcodec_result",4]],["bool",15]],[[["skblendmode",4]],["bool",15]],[[["skblendmodecoeff",4]],["bool",15]],[[["skclipop",4]],["bool",15]],[[["skfonthinting",4]],["bool",15]],[[["skpaint_style",4]],["bool",15]],[[["skpaint_cap",4]],["bool",15]],[[["skpaint_join",4]],["bool",15]],[[["skpathfilltype",4]],["bool",15]],[[["skpathdirection",4]],["bool",15]],[[["skpathverb",4]],["bool",15]],[[["skcoveragemode",4]],["bool",15]],[[["sktilemode",4]],["bool",15]],[[["skblurstyle",4]],["bool",15]],[[["skpathop",4]],["bool",15]],[[],["bool",15]],[[["textstyle",6]],["bool",15]],[[["i32",15]],["bool",15]],[[["scalar",6]],["bool",15]],[[["i32",15]],["bool",15]],[[["scalar",6]],["bool",15]],[[["textstyle",6]],["bool",15]],[[]],[[["option",4],["irect",3]],["bool",15]],[[["option",4],["irect",3]],["bool",15]],[[]],[[["option",4],["irect",3]],["bool",15]],[[["option",4],["irect",3]],["bool",15]],[[["u8",15]]],[[["u8",15]]],[[]],[[]],[[["irect",3],["option",4],["colorspace",6],["option",4]],["bool",15]],[[["irect",3],["option",4],["colorspace",6],["option",4]],["bool",15]],[[],["option",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["extensions",6]],[[],["extensions",6]],[[["paint",6],["option",4]],[["option",4],["ipoint",3]]],[[["paint",6],["option",4]],[["option",4],["ipoint",3]]],[[],["bool",15]],[[],[["pixmap",6],["option",4]]],[[],["bool",15]],[[],[["pixmap",6],["option",4]]],null,[[],[["fontmgr",6],["option",4]]],[[["usize",15]],["string",3]],[[["usize",15]],["string",3]],[[],["string",3]],[[],["str",15]],[[]],[[]],[[],["pathfilltype",4]],[[],["pathfilltype",4]],[[],["pathfilltype",4]],null,[[["matrix",3],["mapdirection",4]],["irect",3]],[[],["color",3]],[[["colorspace",6],["option",4]],["color4f",3]],[[["strokerec",6],["path",6]],["option",4]],[[["path",6],["strokerec",6],["path",6]],["bool",15]],[[],[["option",4],["usize",15]]],[[],[["uniform",6],["option",4]]],[[["fontstyle",3]],[["typeface",6],["vec",3]]],[[],[["uniform",6],["option",4]]],[[],[["drawable",6],["option",4]]],[[["option",4],["rect",3]],[["picture",6],["option",4]]],[[],["bool",15]],[[],["flags",3]],[[],["surfacepropsflags",3]],[[["directcontext",6]]],[[],["semaphoressubmitted",4]],[[]],[[]],[[["directcontext",6]]],[[]],[[]],[[]],[[["flushinfo",3],["backendsurfaceaccess",4]],["semaphoressubmitted",4]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["directcontext",6],["flushinfo",3]],["semaphoressubmitted",4]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,[[],["bool",15]],[[],["fontfamilies",3]],[[],["fontfamilies",3]],[[]],[[],["usize",15]],null,[[],["fontmetrics",3]],null,[[],["scalar",6]],[[],["scalar",6]],null,[[],["fontstyle",3]],[[],["fontstyle",3]],[[],["fontstyle",3]],[[],["bool",15]],[[],[["paint",6],["option",4]]],[[["usize",15],["scalar",6]],["option",4]],[[]],[[["typefacefontprovider",6]]],[[]],[[["directcontext",6]]],[[]],[[]],[[["rchandle",3]]],[[]],[[]],[[]],[[["rgb",3]]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["color",3]]],[[]],[[["u32",15]]],[[["rgb",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix44",3]]],[[["matrix",3]]],[[]],[[]],[[]],[[["ipoint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[["irect",3]]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[["nullhandle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["alphatype",4],["recordingcontext",6],["surfaceorigin",4],["backendtexture",6],["colortype",4]],[["option",4],["image",6]]],[[["option",4]]],[[["u8",15]],["color",3]],[[["recordingcontext",6],["surfaceorigin",4],["option",4],["surfaceprops",3],["backendrendertarget",6],["colortype",4]],["option",4]],[[["recordingcontext",6],["surfaceorigin",4],["backendtexture",6],["option",4],["surfaceprops",3],["colortype",4]],["option",4]],[[["bitmap",6]],[["option",4],["image",6]]],[[["u32",15]],[["option",4],["colorchannelflag",3]]],[[["u32",15]],[["option",4],["surfacepropsflags",3]]],[[["u32",15]],["colorchannelflag",3]],[[["u32",15]],["surfacepropsflags",3]],[[["u32",15]],["colorchannelflag",3]],[[["u32",15]],["surfacepropsflags",3]],[[],["option",4]],[[],[["picture",6],["option",4]]],[[]],[[],[["picture",6],["option",4]]],[[["char",15]]],[[["colorinfo",6]]],[[["colorinfo",6]]],[[["compressiontype",4],["recordingcontext",6],["data",6]]],[[["recordingcontext",6]]],[[["data",6]],[["picture",6],["option",4]]],[[["yuvapixmapinfo",6]],["option",4]],[[],[["option",4],["typeface",6]]],[[["data",6]],[["picture",6],["option",4]]],[[],[["codec",6],["option",4]]],[[["yuvainfo",6],["datatype",4],["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["image",6]]],[[["yuvapixmapinfo",6]],["option",4]],[[["yuvainfo",6]],["option",4]],[[["imagegenerator",6]],[["option",4],["image",6]]],[[]],[[]],[[["isize",3]],["size",3]],[[["intoiterator",8]],["colorchannelflag",3]],[[["intoiterator",8]],["surfacepropsflags",3]],[[["i32",15]]],[[["i32",15]]],[[["fontstyle",3]],[["option",4],["typeface",6]]],[[["surfaceorigin",4],["directcontext",6],["yuvcolorspace",4]]],[[["paint",6]]],[[["paint",6]],["option",4]],[[["path",6],["bool",15]]],[[["path",6],["bool",15]]],[[["isize",3],["matrix",3],["option",4],["paint",6],["bitdepth",4],["option",4]],["option",4]],[[["isize",3],["matrix",3],["option",4],["paint",6],["bitdepth",4],["option",4]],["option",4]],[[],["option",4]],[[["matrix",3],["option",4],["paint",6],["bitdepth",4],["option",4]],[["option",4],["image",6]]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4],["image",6]]],[[]],[[["font",6]],[["option",4],["textblob",6]]],[[["font",6]],[["option",4],["textblob",6]]],[[["scalar",6],["font",6]],[["option",4],["textblob",6]]],[[["scalar",6],["font",6]],[["option",4],["textblob",6]]],[[]],[[["scalar",6]]],[[["imageinfo",6],["usize",15]],[["option",4],["image",6]]],[[],["region",6]],[[["u8",15]],["color",3]],[[["font",6]],[["option",4],["textblob",6]]],[[["font",6]],[["option",4],["textblob",6]]],[[],["maskfilter",6]],[[],["maskfilter",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["font",6]],[["option",4],["textblob",6]]],[[],[["handle",3],["skstring",3]]],[[["font",6]]],[[["font",6]],[["option",4],["textblob",6]]],[[],[["option",4],["path",6]]],[[]],[[["textencoding",4],["font",6]],[["option",4],["textblob",6]]],[[["textencoding",4],["font",6]],[["option",4],["textblob",6]]],[[["alphatype",4],["recordingcontext",6],["surfaceorigin",4],["backendtexture",6],["colortype",4]],[["option",4],["image",6]]],[[]],[[["scalar",6]]],[[["drawableinfo",3]]],[[["i32",15]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["recordingcontext",6],["yuvapixmaps",6]],[["option",4],["image",6]]],[[["recordingcontext",6],["yuvabackendtextures",6]],[["option",4],["image",6]]],[[],["u8",15]],null,null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["backendhandleaccess",4]],[["option",4],["backendrendertarget",6]]],[[["backendhandleaccess",4]],[["option",4],["backendtexture",6]]],[[["path",6]],["bool",15]],[[["paint",6],["option",4]]],[[]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[],["color",3]],[[["option",4],["path",6],["rect",3]],[["option",4],["path",6]]],[[],["usize",15]],[[],["positionwithaffinity",3]],[[],[["result",4],["result",4],["image",6]]],[[["usize",15]],[["imagefilter",6],["option",4]]],[[["paint",6],["option",4]],[["vec",3],["scalar",6]]],[[["paint",6],["option",4]],[["vec",3],["scalar",6]]],[[],["bool",15]],[[],["linemetricsvector",6]],[[["scalar",6]],[["option",4],["matrix",3]]],[[["glyphid",6]],[["option",4],["path",6]]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["result",4]],[[["pixmap",6],["option",4],["options",3]],["result",4]],[[["imageinfo",6],["option",4],["usize",15],["options",3]],["result",4]],[[["usize",15]],[["point",3],["option",4]]],[[],["usize",15]],[[["point",3],["option",4]]],[[],["textboxes",6]],[[["rectheightstyle",4],["rectwidthstyle",4],["range",3],["usize",15]],["textboxes",6]],[[],[["option",4],["usize",15]]],[[]],[[]],[[["f32",15]],["isize",3]],[[["usize",15]],["usize",15]],[[],["irect",3]],[[],["irect",3]],[[["fonttabletag",6]],["usize",15]],[[["fonttabletag",6]],[["option",4],["usize",15]]],[[],["usize",15]],[[],[["drawableinfo",3],["option",4]]],[[]],[[["option",4],["paint",6],["option",4],["option",4]]],[[["u32",15]],[["range",3],["usize",15]]],[[["option",4],["scalar",6]]],[[["yuvapixmaps",6]],["result",4]],[[],[["option",4],["framebufferinfo",3]]],[[],[["textureinfo",3],["option",4]]],[[]],null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["strokerec",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],null,null,[[],["i64",15]],[[],["bool",15]],[[["highcontrastconfig",3]],["option",4]],null,null,[[],["fonthinting",4]],[[],["bool",15]],null,null,[[],["directcontextid",3]],[[],["scalar",6]],null,[[],["option",4]],null,[[],[["imagefilter",6],["option",4]]],null,[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["image",6]],[[],[["option",4],["image",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["f32",15]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]],["f32",15]],[[],["option",4]],[[],["option",4]],[[],["scalar",6]],[[["paint",6],["style",4]],["scalar",6]],[[["join",4],["scalar",6],["cap",4]],["scalar",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["imagefilter",6],["option",4]]],[[],["usize",15]],[[]],[[]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[]],[[]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["path",6],["scalar",6]],[["option",4],["path",6]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["region",6]],["bool",15]],[[["irect",3]],["bool",15]],[[["colorchannelflag",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["surfacepropsflags",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[]],[[]],[[]],[[]],[[],[["typeface",6],["vec",3]]],[[],[["option",4],["m44",3]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["backendtexture",6]],["bool",15]],[[["surfacecharacterization",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["path",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["rect",3]]],[[],["bool",15]],[[],["protected",4]],[[],["protected",4]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["rrect",3]]],[[["backendtexture",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["supporteddatatypes",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["recordingcontext",6],["option",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["recordingcontext",6],["option",4]],["bool",15]],[[["recordingcontext",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["iter",3]],[[]],[[],["iter",3]],[[]],[[],["join",4]],[[]],[[]],[[],["rect",3]],[[]],[[]],[[],[["point",3],["option",4]]],[[["scalar",6]]],[[],["scalar",6]],null,[[],["i32",15]],[[],["scalar",6]],null,null,[[],["usize",15]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[["scalar",6]],["scalar",6]],[[["scalar",6]],["scalar",6]],[[],["scalar",6]],[[]],[[["scalar",6],["matrix",3]],[["option",4],["patheffect",6]]],null,[[],["usize",15]],[[]],[[]],[[]],[[["tilemode",4]],["option",4]],[[],["str",15]],[[],["scalar",6]],[[["v3",3]]],[[]],null,[[["scalar",6]],["option",4]],[[["pathfilltype",4]]],[[],[["option",4],["textblob",6]]],[[],[["option",4],["textblob",6]]],[[["pathfilltype",4]]],[[],[["colorfilter",6],["option",4]]],[[["recordingcontext",6],["bool",15],["imageinfo",6]],[["option",4],["image",6]]],[[],["path",6]],[[["bool",15]],[["option",4],["shader",6]]],[[["matrix",3]],["path",6]],[[["f32",15]],["v4",3]],[[]],[[],["u32",15]],[[],[["maskfilter",6],["option",4]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[],["fontstyleset",6]],[[],["fontstyleset",6]],[[["fontstyle",3]],[["option",4],["typeface",6]]],[[["fontstyle",3]],[["option",4],["typeface",6]]],[[["fontstyle",3],["unichar",6]],[["option",4],["typeface",6]]],[[["fontstyle",3],["unichar",6]],[["option",4],["typeface",6]]],[[["styletype",4],["textstyle",6]],["bool",15]],[[["usize",15],["fontstyle",3]],[["option",4],["typeface",6]]],[[["usize",15],["fontstyle",3]],[["option",4],["typeface",6]]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],null,[[["scalar",6]],[["option",4],["matrix",3]]],[[],["matrix",3]],[[["matrix",3]],[["option",4],["patheffect",6]]],null,[[["bool",15],["scalar",6],["tilemode",4]],["option",4]],null,[[],[["option",4],["patheffect",6]]],null,[[],["scalar",6]],[[],[["option",4],["usize",15]]],[[],["i32",15]],[[["colortype",4]],["usize",15]],[[],["i32",15]],[[],["scalar",6]],[[["paint",6],["option",4]]],[[["textencoding",4],["paint",6],["option",4]]],[[],["option",4]],[[["pathop",4]],["patheffect",6]],null,[[]],[[],["scalar",6]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[],["mipmapped",4]],[[],["scalar",6]],[[],["vertexmode",4]],null,[[]],[[]],[[]],[[["v4",3]]],[[["point3",3]]],[[["v2",3]]],[[["v3",3]]],[[]],[[["f32",15]]],[[]],[[]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,[[]],[[]],[[],["skflattenable",3]],[[["color",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["colorchannelflag",3]],["bool",15]],[[["color4f",3]],["bool",15]],[[["colorspaceprimaries",3]],["bool",15]],[[["colorspacetransferfn",3]],["bool",15]],[[["xyzd50hash",3]],["bool",15]],[[["v2",3]],["bool",15]],[[["v3",3]],["bool",15]],[[["v4",3]],["bool",15]],[[["ipoint",3]],["bool",15]],[[["point",3]],["bool",15]],[[["point3",3]],["bool",15]],[[["irect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["rsxform",3]],["bool",15]],[[["isize",3]],["bool",15]],[[["size",3]],["bool",15]],[[["surfacepropsflags",3]],["bool",15]],[[["datetime",3]],["bool",15]],[[["fourbytetag",3]],["bool",15]],[[["budgeted",3]],["bool",15]],[[["scalar",6]],["bool",15]],[[["scalar",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["surfacecharacterization",6]]],[[]],[[["alphatype",4],["colortype",4]]],[[["alphatype",4],["colortype",4]]],[[]],[[["imageinfo",6],["usize",15]],["borrows",3]],[[["font",6]],["option",4]],[[]],[[]],[[["yuvainfo",6],["mipmapped",4],["surfaceorigin",4]],["option",4]],[[["yuvainfo",6],["surfaceorigin",4]],["option",4]],[[["usize",15],["vertexmode",4],["builderflags",3]],["builder",6]],[[]],[[]],[[["alphatype",4],["colortype",4]]],[[]],[[["path",6],["bool",15]]],[[],["paragraphcache",6]],[[]],[[]],[[],["region",6]],[[]],[[],["paint",6]],[[["alphatype",4],["colortype",4]]],[[["f32",15]]],[[["subsampling",4],["yuvcolorspace",4],["planeconfig",4]],["option",4]],[[["imageinfo",6],["usize",15]],["borrows",3]],[[["path",6],["bool",15]]],[[["surfacecharacterization",6]]],[[]],[[]],[[]],[[["vec",3],["handle",3]]],[[["usize",15]]],[[["yuvainfo",6],["option",4]],["option",4]],[[]],[[]],[[["initstyle",4]]],[[]],[[]],[[]],[[["paragraphstyle",6]]],[[]],[[]],[[["fontstyle",3]],["option",4]],[[]],[[["font",6]],["option",4]],[[]],[[]],[[["textblob",6]]],[[["u32",15]]],[[["f32",15]],["color4f",3]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]],["isize",3]],[[["scalar",6]],["size",3]],[[["surfacepropsflags",3],["pixelgeometry",4]],["surfaceprops",3]],[[["u32",15]]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[["str",15],["u8",15]],[["option",4],["borrows",3]]],[[]],[[]],[[],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[]],[[["option",4],["vertexmode",4]],["vertices",6]],[[]],[[],["option",4]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4],["image",6]]],[[["cstr",3]],["data",6]],[[["cstr",3]],["data",6]],[[["textureresourceinfo",3]]],[[["textureresourceinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4]]],[[["dxgi_format",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",3]],[[]],[[]],[[]],[[["str",15],["font",6]],[["fontruniterator",6],["borrows",3]]],[[["filltype",4]]],[[],[["option",4],["typeface",6]]],[[],[["option",4],["typeface",6]]],[[["enum",6]]],[[["mipmapped",4],["textureinfo",3]]],[[["usize",15],["framebufferinfo",3]]],[[],[["directcontext",6],["option",4]]],[[]],[[["str",15]],[["scriptruniterator",6],["borrows",3]]],[[["str",15],["u8",15]],[["option",4],["borrows",3]]],[[]],[[],["option",4]],[[],["option",4]],[[["alphatype",4]],["imageinfo",6]],[[["alphatype",4]],["imageinfo",6]],[[],["imageinfo",6]],[[],["imageinfo",6]],[[],["option",4]],[[],[["option",4],["image",6]]],[[],["option",4]],[[["path",6]]],[[["path",6]]],[[],["picture",6]],[[],["picture",6]],[[]],[[["imageinfo",6],["option",4],["surfaceprops",3]],["option",4]],[[["imageinfo",6],["option",4],["surfaceprops",3]],[["borrows",3],["option",4]]],[[["compressiontype",4]],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[["cachinghint",4]],[["option",4],["image",6]]],[[],["option",4]],[[["imageinfo",6],["recordingcontext",6],["budgeted",3],["surfaceorigin",4],["option",4],["surfaceprops",3]],["option",4]],[[["recordingcontext",6],["surfacecharacterization",6],["budgeted",3]],["option",4]],[[["alphatype",4]],["imageinfo",6]],[[["alphatype",4]],["imageinfo",6]],[[["str",15],["fourbytetag",3]],[["scriptruniterator",6],["borrows",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["colorspace",6]],[[],["colorspace",6]],[[],["colorspace",6]],[[],["colorspace",6]],[[["str",15]],[["option",4],["languageruniterator",6]]],[[],["data",6]],[[],["data",6]],[[["usize",15]],["fontstyleset",6]],[[["usize",15]],["fontstyleset",6]],[[["usize",15],["data",6]],["data",6]],[[],[["option",4],["image",6]]],[[["usize",15],["data",6]],["data",6]],[[],[["option",4],["image",6]]],[[["imageinfo",6]],[["option",4],["surface",6]]],[[],[["option",4],["surface",6]]],[[["compressiontype",4],["directcontext",6],["data",6]],[["option",4],["image",6]]],[[["directcontext",6],["mipmapped",4]],[["option",4],["image",6]]],[[["budgeted",3],["directcontext",6],["mipmapped",4]],[["option",4],["image",6]]],[[["usize",15],["u8",15]],["bidiruniterator",6]],[[["usize",15],["font",6]],["fontruniterator",6]],[[],["languageruniterator",6]],[[["usize",15],["u8",15]],["scriptruniterator",6]],[[["usize",15]],[["option",4],["typeface",6]]],[[["usize",15]],[["option",4],["typeface",6]]],[[["usize",15]],["data",6]],[[["usize",15]],["data",6]],[[["option",4],["isize",3]],["imageinfo",6]],[[["option",4],["isize",3]],["imageinfo",6]],[[["imagelayout",4],["u32",15]]],[[["imageinfo",3]]],[[["imageinfo",3]]],[[["format",4]]],[[["backendcontext",3]],[["directcontext",6],["option",4]]],[[["ycbcrconversioninfo",3]]],[[["recordingcontext",6],["imagefilter",6],["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["i32",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["vector",6]],["scalar",6]],[[],["option",4]],[[],["colorchannelflag",3]],[[],["surfacepropsflags",3]],[[],["bool",15]],[[]],[[]],[[["contentchangemode",4]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4],["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["path",6],["pathop",4]],[["option",4],["path",6]]],[[["path",6],["pathop",4]],["option",4]],[[["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[],["surfaceorigin",4]],[[],["encodedorigin",4]],[[],["surfaceorigin",4]],[[],["encodedorigin",4]],[[],["matrix",3]],[[["i32",15]],["i32",15]],[[]],[[]],[[]],[[["pathdirection",4],["usize",15]]],[[],["colorfilter",6]],null,null,[[["canvas",3]]],[[],["paragraphcache",6]],[[],["paragraphcache",6]],[[["colorchannelflag",3]],[["ordering",4],["option",4]]],[[["surfacepropsflags",3]],[["ordering",4],["option",4]]],null,[[["path",6],["scalar",6],["style",4]],[["option",4],["patheffect",6]]],null,[[["path",6],["matrix",3]],["patheffect",6]],null,null,[[],[["option",4],["patheffect",6]]],null,null,null,[[],[["option",4],["borrows",3]]],[[],[["option",4],["borrows",3]]],[[],[["option",4],["borrows",3]]],[[],[["option",4],["borrows",3]]],[[],["textstyle",6]],[[["duration",3]]],null,[[["f32",15]]],null,[[],["pixelgeometry",4]],[[],[["option",4],["pixelref",6]]],[[],[["option",4],["pixelref",6]]],[[],["ipoint",3]],[[],["ipoint",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["pixmap",6]],[[],["pixmap",6]],[[],["yuvapixmapinfo",6]],[[["usize",15]],["pixmap",6]],[[],["planeconfig",4]],[[],[["isize",3],["vec",3]]],[[["usize",15]],[["option",4],["backendformat",6]]],[[]],[[["usize",15]],[["option",4],["imageinfo",6]]],[[]],[[["usize",15]]],[[]],[[["canvas",3]]],[[["canvas",3]]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[],["usize",15]],[[["bool",15]]],[[]],[[]],[[]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[]],[[]],[[["colormatrix",6]]],[[["m44",3]]],[[],[["string",3],["option",4]]],[[["f32",15]]],[[["scalar",6]]],[[["colormatrix",6]]],[[["m44",3]]],[[]],[[["u8cpu",6]],["pmcolor",6]],[[],["pmcolor",6]],[[["scalar",6]]],[[["scalar",6]]],[[["data",6]],["bool",15]],[[]],null,[[],["surfaceprops",3]],[[]],[[]],[[["option",4],["usize",15],["bool",15]]],[[["textstyle",6]]],[[]],[[]],[[]],[[["supporteddatatypes",6]],[["yuvapixmapinfo",6],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[["irect",3]],["bool",15]],[[["region",6]],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[],["u8",15]],null,null,[[["pathdirection",4],["scalar",6],["arcsize",4]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scalar",6],["tilemode",4]],["option",4]],[[["scalar",6]],["scalar",6]],[[["usize",15]],["scalar",6]],[[],["usize",15]],[[["imageinfo",6],["usize",15],["i32",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15],["i32",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15],["cachinghint",4]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["bitmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["imageinfo",6],["usize",15],["cachinghint",4]],["bool",15]],[[["datatype",4]],["colortype",4]],[[],[["canvas",3],["option",4]]],[[],[["recordingcontext",6],["option",4]]],[[]],[[],["bool",15]],null,[[["option",4],["typeface",6]],["usize",15]],[[],[["option",4],["image",6]]],[[]],[[]],[[],["bool",15]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[["surfaceorigin",4],["backendtexture",6]],["bool",15]],[[["surfaceorigin",4],["backendtexture",6]],["bool",15]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["path",6],["bool",15]]],[[]],[[]],[[["u32",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["path",6]]],[[],[["option",4],["path",6]]],[[],["usize",15]],[[],["resourcecachelimits",3]],[[],["usize",15]],[[],["resourcecacheusage",3]],[[]],[[["path",6]]],[[]],[[],["i32",15]],[[],["scalar",6]],null,null,[[["v3",3],["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[],["irect",3]],[[],["irect",3]],[[]],[[],["irect",3]],[[],["rect",3]],[[["usize",15]],["v4",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["option",4],["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["v4",3]]],null,[[]],[[["pathdirection",4],["usize",15]]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],null,[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[],["scalar",6]],[[["scalar",6]]],[[["scalar",6]]],[[],["scanlineorder",4]],null,null,[[["bool",15],["scalar",6]],[["option",4],["path",6]]],[[["bool",15],["scalar",6]],[["option",4],["path",6]]],[[],["segmentmask",3]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[],["data",6]],[[["serializebehavior",4]],["data",6]],[[],["data",6]],[[["region",6]],["bool",15]],[[["bool",15],["colorchannelflag",3]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],[[["bool",15],["surfacepropsflags",3]]],[[["scalar",6]]],[[]],[[["u8",15]]],[[["f32",15]]],[[["alphatype",4]],["bool",15]],[[["alphatype",4]],["bool",15]],[[["bool",15]]],[[["u8",15]]],[[]],[[["backendsurfacemutablestate",6],["backendrendertarget",6]],["bool",15]],[[["backendsurfacemutablestate",6],["backendrendertarget",6]],[["option",4],["backendsurfacemutablestate",6]]],[[["backendtexture",6],["backendsurfacemutablestate",6]],["bool",15]],[[["backendtexture",6],["backendsurfacemutablestate",6]],[["option",4],["backendsurfacemutablestate",6]]],[[]],[[["bool",15]]],[[["blendmode",4]]],[[]],[[]],[[],["bool",15]],[[]],[[["usize",15],["v4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["colormatrix",6]]],[[["m44",3]]],[[["m44",3]]],[[["resourcestateenum",6]]],[[["resourcestateenum",6]]],[[]],[[]],[[["bool",15]]],[[["drawoptions",4]]],[[]],[[["edging",4]]],[[]],[[["bool",15]]],[[["bool",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["pathfilltype",4]]],[[["pathfilltype",4]]],[[["pathfilltype",4]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[["fontstyle",3]]],[[["bool",15]]],[[["bool",15]]],[[]],[[["glyphid",6],["f32",15]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["fonthinting",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["i32",15]]],[[["usize",15],["duration",3]],["bool",15]],[[]],[[["scalar",6]]],[[["scalar",6]],["bool",15]],[[["scalar",6]],["bool",15]],[[["scalar",6]]],[[["bool",15]]],[[]],[[["i32",15]]],[[["scalar",6]]],[[]],[[]],[[["fontmetrics",3]]],[[["bool",15]]],[[["backendsurfacemutablestate",6]]],[[["scalar",6]],["bool",15]],[[["paragraphstyle",6]]],[[["path",6],["bool",15]]],[[["path",6],["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15],["scalar",6]]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["usize",15]]],[[["resourcecachelimits",3]]],[[["v3",3],["scalar",6]]],[[["v3",3],["scalar",6]]],[[["v3",3],["scalar",6]]],[[["usize",15],["v4",3]]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["cap",4]]],[[["join",4]]],[[["scalar",6]]],[[["cap",4],["join",4],["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[["strutstyle",6]]],[[["style",4]]],[[["bool",15]]],[[]],[[["textalign",4]]],[[["textbaseline",4]]],[[["textdirection",4]]],[[["textheightbehavior",4]]],[[["textstyle",6]]],[[["scalar",6]]],[[]],[[]],[[["imagelayout",4]]],[[["imagelayout",4]]],[[["i32",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["i32",15]]],[[["scalar",6]]],null,[[],[["option",4],["shader",6]]],null,null,[[]],[[["bool",15],["str",15],["font",6],["scalar",6]]],[[["bool",15],["str",15],["font",6],["scalar",6]],["option",4]],[[["scriptruniterator",6],["bidiruniterator",6],["str",15],["fontruniterator",6],["languageruniterator",6],["scalar",6]]],[[["scriptruniterator",6],["bidiruniterator",6],["str",15],["fontruniterator",6],["languageruniterator",6],["scalar",6]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["path",6]],[["option",4],["path",6]]],[[],["option",4]],[[]],[[],["usize",15]],[[],["scalar",6]],[[],["usize",15]],[[],["isize",3]],[[],["size",3]],[[],["usize",15]],[[],["scalar",6]],[[["usize",15]],["bool",15]],[[["imageinfo",6],["matrix",3],["backendapi",4]],[["option",4],["gpudrawhandler",6]]],[[],["path",6]],[[],["path",6]],[[]],[[]],[[]],[[],["rect",3]],[[],["str",15]],[[],["scalar",6]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],null,[[["imageinfo",6],["usize",15]],["result",4]],[[["imageinfo",6]],["result",4]],[[],["usize",15]],[[]],[[],["usize",15]],[[],[["glyphid",6],["vec",3]]],[[["join",4],["cap",4],["scalar",6]],[["option",4],["patheffect",6]]],null,[[],["cap",4]],[[],["join",4]],[[],["scalar",6]],null,null,[[],["scalar",6]],[[],["bool",15]],[[],["strutstyle",6]],[[["usize",15]]],[[],["style",4]],[[],["style",4]],[[["usize",15]]],[[["colorchannelflag",3]],["colorchannelflag",3]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[]],[[["size",3]]],[[]],[[["surfacepropsflags",3]],["surfacepropsflags",3]],[[["colorchannelflag",3]]],[[]],[[]],[[]],[[]],[[["isize",3]]],[[["vector",6]]],[[["size",3]]],[[["point3",3]]],[[["surfacepropsflags",3]]],[[],["bool",15]],[[],["subsampling",4]],[[],["patheffect",6]],[[["datatype",4],["planeconfig",4]],["bool",15]],[[],["bool",15]],null,[[],["surfaceprops",3]],null,[[]],[[]],[[["region",6]]],[[["path",6]]],[[]],[[]],[[["tilemode",4]],["option",4]],null,[[],[["option",4],["vec",3]]],[[]],[[],["option",4]],[[],["option",4]],[[],["textalign",4]],[[],["textbaseline",4]],[[],["textdirection",4]],[[],["textheightbehavior",4]],[[],["textstyle",6]],[[["textencoding",4]],["usize",15]],[[["textencoding",4]],[["glyphid",6],["vec",3]]],null,[[["usize",15]],[["option",4],["backendtexture",6]]],[[],["surfaceorigin",4]],[[],["surfaceorigin",4]],[[],["usize",15]],[[]],[[]],[[]],[[["path",6]],[["option",4],["rect",3]]],[[],[["option",4],["rect",3]]],[[],["option",4]],[[["duration",3]]],[[["duration",3]],["result",4]],null,[[],[["colorfilter",6],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["isize",3]],[[["u8",15]],["color",3]],[[],["color",3]],[[],["isize",3]],[[],["option",4]],[[],["hsv",3]],[[],["hsv",3]],[[],["matrix",3]],[[],["matrix44",3]],[[],["skpathfilltype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rgb",3]],[[],["isize",3]],[[],[["option",4],["shader",6]]],[[["filtermode",4]],["shader",6]],[[],[["option",4],["shader",6]]],[[["filtermode",4]],["shader",6]],[[],[["option",4],["shader",6]]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[],["xyzd50hash",3]],[[],["xyzd50hash",3]],[[["colorchannelflag",3]]],[[["surfacepropsflags",3]]],[[]],[[]],[[]],[[],["i32",15]],[[],["scalar",6]],null,null,null,[[["matrix",3]]],[[["matrix",3],["applyperspectiveclip",4]]],[[]],[[]],[[["scalar",6]]],[[],["region",6]],[[],["m44",3]],[[["scalar",6]],[["option",4],["patheffect",6]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[["imageinfo",6]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["scalar",6]],["option",4]],[[]],[[["bool",15]]],[[["scalar",6],["tilemode",4]],["option",4]],null,[[],["type",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["cstr",3]],[[],["cstr",3]],null,[[],["option",4]],[[],[["option",4],["typeface",6]]],[[],[["option",4],["typeface",6]]],[[],["typeface",6]],[[["unichar",6]],["glyphid",6]],[[["unichar",6]],["glyphid",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["fontid",6]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],[["option",4],["i32",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],null,null,[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],[["irect",3],["option",4]]],[[],["bool",15]],[[["alphatype",4]],[["alphatype",4],["option",4]]],[[],["i32",15]],[[],[["option",4],["vec",3]]],[[],[["vec",3],["option",4]]],[[]],[[],["usize",15]],null,[[],["bool",15]],[[],["bool",15]],[[],[["imageinfo",3],["option",4]]],[[],[["imageinfo",3],["option",4]]],[[],["bool",15]],[[],["bool",15]],null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["scalar",6]],null,null,[[],["i64",15]],[[["u8",15]]],[[["i32",15]]],[[["alphatype",4]]],[[["alphatype",4]]],[[["alphatype",4]]],[[["alphatype",4]]],[[["backendformat",6],["colortype",4]]],[[["backendformat",6],["colortype",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["colorspace",6]],[[],["colorspace",6]],[[["colortype",4]]],[[["colortype",4]]],[[["colortype",4]]],[[["colortype",4]]],[[],[["option",4],["image",6]]],[[]],[[],["option",4]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[],["colorspace",6]],[[],["colorspace",6]],[[["matrix",3]],[["imagefilter",6],["option",4]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[],["path",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scalar",6]],["option",4]],[[],["colorspace",6]],[[],["colorspace",6]],[[["subsampling",4]],["option",4]],[[["matrix",3]],["path",6]],[[["matrix",3],["applyperspectiveclip",4]],["path",6]],[[],["scalar",6]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["sendable",3]]],[[],[["result",4],["sendable",3]]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[["bitmap",6]]],[[["pixmap",6]]],[[["vec",3]]],[[],["i32",15]],[[],["scalar",6]],null,null,null,null,null,null,null,null,null,null,[[],["i32",15]],[[],["scalar",6]],null,null,null,null,null,null,null,null,[[],["yuvcolorspace",4]],[[],["yuvcolorspace",4]],[[],["yuvcolorspace",4]],null,[[],["yuvainfo",6]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],null,null,null,null,null,[[["canvas",3],["data",6]]],[[["canvas",3],["data",6]]],[[["canvas",3],["data",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["toplayerpixels",3]]],[[],["savelayerflags",3]],[[["data",6]]],[[["data",6]]],[[["data",6]]],[[],["canvas",3]],[[],["canvas",3]],[[["imagefilter",6]]],[[],["isize",3]],[[["savelayerflags",3]],["savelayerflags",3]],[[["savelayerflags",3]]],[[["savelayerflags",3]],["savelayerflags",3]],[[["savelayerflags",3]]],[[],["u32",15]],[[["savelayerflags",3]],["savelayerflags",3]],[[["savelayerflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rect",3]]],null,[[]],[[]],[[["image",6]]],[[["matrix",3]]],[[["path",6]]],[[]],[[["region",6]]],[[]],[[]],[[],["savelayerflags",3]],[[],["skcanvas_pointmode",4]],[[],["skcanvas_srcrectconstraint",4]],[[]],[[]],[[]],[[["savelayerflags",3]],["ordering",4]],null,[[["matrix",3]]],[[["m44",3]]],[[["savelayerflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["irect",3],["option",4]]],[[]],[[["str",15],["data",6]]],[[["bool",15],["scalar",6],["paint",6]]],[[["paint",6],["scalar",6]]],[[]],[[["drawable",6],["option",4],["matrix",3]]],[[["drawable",6]]],[[["paint",6]]],[[["paint",6],["option",4]]],[[["option",4],["lattice",3],["paint",6],["filtermode",4]]],[[["option",4],["paint",6],["filtermode",4]]],[[["option",4],["paint",6]]],[[["option",4],["paint",6]]],[[["paint",6],["option",4]]],[[["paint",6]]],[[["paint",6]]],[[["paint",6]]],[[["paint",6]]],[[["paint",6],["option",4]]],[[["path",6],["paint",6]]],[[["matrix",3],["option",4],["paint",6],["option",4]]],[[["paint",6]]],[[["paint",6],["pointmode",4]]],[[["paint",6]]],[[["paint",6],["region",6]]],[[["paint",6],["scalar",6]]],[[["paint",6]]],[[["path",6],["scalar",6]]],[[["paint",6],["font",6]]],[[["align",4],["paint",6],["font",6]]],[[["paint",6]]],[[["option",4],["paint",6],["vertices",6]]],[[]],[[]],[[],["savelayerflags",3]],[[["savelayerflags",3]],["bool",15]],[[["skcanvas_pointmode",4]],["bool",15]],[[["skcanvas_srcrectconstraint",4]],["bool",15]],[[["intoiterator",8]]],[[["savelayerflags",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["surfaceprops",3],["option",4],["bitmap",6]],["ownedcanvas",3]],[[["u32",15]],[["option",4],["savelayerflags",3]]],[[["u32",15]],["savelayerflags",3]],[[["u32",15]],["savelayerflags",3]],[[["intoiterator",8]],["savelayerflags",3]],[[["imageinfo",6],["option",4],["surfaceprops",3]],[["ownedcanvas",3],["option",4]]],[[],[["ownedcanvas",3],["option",4]]],[[["canvas",3],["bool",15]],["autorestoredcanvas",3]],[[]],[[]],[[]],[[],["imageinfo",6]],null,[[]],[[]],[[["savelayerflags",3]]],[[["savelayerflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],[["option",4],["rect",3]]],[[],["m44",3]],[[],["matrix",3]],[[["savelayerflags",3]],["bool",15]],[[["option",4],["surfaceprops",3]],[["option",4],["ownedcanvas",3]]],[[],["ownedcanvas",3]],[[["imageinfo",6],["option",4],["surfaceprops",3]],[["option",4],["surface",6]]],[[],["savelayerflags",3]],null,[[["paint",6]]],[[["savelayerflags",3]],[["ordering",4],["option",4]]],[[],[["option",4],["borrows",3]]],null,[[],[["option",4],["surfaceprops",3]]],[[["rect",3]],["bool",15]],[[["path",6]],["bool",15]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["bitmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[],[["recordingcontext",6],["option",4]]],null,[[["savelayerflags",3]]],[[]],[[]],[[]],[[["usize",15]]],[[["point",3],["scalar",6],["option",4]]],null,[[],["usize",15]],[[],["usize",15]],[[["savelayerrec",3]],["usize",15]],[[["u8cpu",6]],["usize",15]],[[]],[[["bool",15],["savelayerflags",3]]],[[["matrix",3]]],[[["m44",3]]],[[["matrix",3]]],[[]],[[["savelayerflags",3]],["savelayerflags",3]],[[["savelayerflags",3]]],[[],[["option",4],["surface",6]]],[[]],[[]],[[]],[[["savelayerflags",3]]],[[],["matrix",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["bitmap",6]],["bool",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["skcanvas_lattice_recttype",4]],[[]],null,[[],["skcanvas_lattice_recttype",4]],[[["skcanvas_lattice_recttype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["irect",3]],[[],["options",3]],[[],["encodedorigin",4]],[[],["skcodec_selectionpolicy",4]],[[],["skcodec_zeroinitialized",4]],[[],["skcodec_skscanlineorder",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",3]],[[],["encodedimageformat",4]],[[["options",3]],["bool",15]],[[["encodedorigin",4]],["bool",15]],[[["skcodec_selectionpolicy",4]],["bool",15]],[[["skcodec_zeroinitialized",4]],["bool",15]],[[["skcodec_skscanlineorder",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[],[["codec",6],["option",4]]],[[],["usize",15]],[[],[["result",4],["result",4],["image",6]]],[[["imageinfo",6],["usize",15]],["result",4]],[[["pixmap",6],["option",4],["options",3]],["result",4]],[[["imageinfo",6],["option",4],["usize",15],["options",3]],["result",4]],[[],[["option",4],["usize",15]]],[[["f32",15]],["isize",3]],[[["usize",15]],["usize",15]],[[["yuvapixmaps",6]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[],["imageinfo",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["options",3]],["bool",15]],[[],["i32",15]],[[],["encodedorigin",4]],[[["i32",15]],["i32",15]],null,[[["supporteddatatypes",6]],[["yuvapixmapinfo",6],["option",4]]],[[["result",4]],["str",15]],[[],["scanlineorder",4]],[[["usize",15]],["bool",15]],[[["imageinfo",6],["usize",15]],["result",4]],[[["imageinfo",6]],["result",4]],null,[[],["bool",15]],[[],["matrix",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],[["irect",3],["option",4]]],[[]],null,null,null,[[],["option",4]],[[],["color",3]],[[["colorspace",6],["option",4]],["color4f",3]],[[["option",4]]],[[]],[[["highcontrastconfig",3]],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["colorfilter",6]],[[],["option",4]],[[],["option",4]],[[["blendmode",4]],[["colorfilter",6],["option",4]]],[[],[["colorfilter",6],["option",4]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[["f32",15]],[["colorfilter",6],["option",4]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[],["colorfilter",6]],[[],["colorfilter",6]],[[["blendmode",4]],[["colorfilter",6],["option",4]]],[[],[["colorfilter",6],["option",4]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[["f32",15]],[["colorfilter",6],["option",4]]],[[],["colorfilter",6]],[[["colormatrix",6]],["colorfilter",6]],[[],["colorfilter",6]],[[],["colorfilter",6]],null,[[]],[[["f32",15]]],[[["colormatrix",6]]],[[["f32",15]]],[[["colormatrix",6]]],[[["colormatrix",6]]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[],[["colorfilter",6],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["matrixflags",3]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[],["u32",15]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[]],[[]],[[],["matrixflags",3]],[[]],[[["matrixflags",3]],["ordering",4]],[[["matrixflags",3]],["bool",15]],[[]],[[],["matrixflags",3]],[[["matrixflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],[["option",4],["matrixflags",3]]],[[["u32",15]],["matrixflags",3]],[[["u32",15]],["matrixflags",3]],[[["intoiterator",8]],["matrixflags",3]],[[["path",6],["bool",15]]],[[["scalar",6]],[["option",4],["matrix",3]]],[[]],[[["matrixflags",3]]],[[["matrixflags",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["scalar",6]],[[["matrixflags",3]],["bool",15]],[[["path",6],["bool",15]]],[[],["matrixflags",3]],[[["matrixflags",3]],[["ordering",4],["option",4]]],[[["scalar",6]],["option",4]],[[["matrixflags",3]]],[[["path",6],["bool",15]]],[[["bool",15],["scalar",6]],[["option",4],["path",6]]],[[["matrixflags",3],["bool",15]]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[]],[[["matrixflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["scalar",6]],[["option",4],["patheffect",6]]],[[["scalar",6]],[["option",4],["patheffect",6]]],[[["scalar",6]],[["option",4],["patheffect",6]]],null,[[]],[[["option",4],["rect",3]],[["onpage",3],["document",3]]],[[]],[[]],[[],["canvas",3]],[[],["data",6]],[[],["document",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["rect",3]],[[["canvas",3],["option",4],["matrix",3]]],[[["canvas",3]]],[[],["u32",15]],null,[[]],[[["imageinfo",6],["matrix",3],["backendapi",4]],[["option",4],["gpudrawhandler",6]]],null,[[["backenddrawableinfo",6]]],[[["encodedimageformat",4],["usize",15],["bitmap",6]],[["option",4],["data",6]]],[[["pixmap",6],["encodedimageformat",4],["usize",15]],[["option",4],["data",6]]],null,null,null,null,null,[[]],[[]],[[],["skfont_edging",4]],[[]],[[],["usize",15]],[[["textencoding",4]],["usize",15]],[[],["edging",4]],[[["skfont_edging",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[["scalar",6]]],[[["paint",6],["option",4]]],[[["glyphid",6]],[["option",4],["path",6]]],[[["point",3],["option",4]]],[[]],[[["option",4],["paint",6],["option",4],["option",4]]],[[["option",4],["scalar",6]]],[[]],[[],["fonthinting",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["paint",6],["option",4]]],[[["textencoding",4],["paint",6],["option",4]]],[[]],[[]],[[],["scalar",6]],[[["bool",15]]],[[["edging",4]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["fonthinting",4]]],[[["bool",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[["bool",15]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],[[],["usize",15]],[[],[["glyphid",6],["vec",3]]],[[["textencoding",4]],["usize",15]],[[["textencoding",4]],[["glyphid",6],["vec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["option",4],["typeface",6]]],[[],["typeface",6]],[[["unichar",6]],["glyphid",6]],[[]],[[["scalar",6]],["option",4]],null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["variationposition",3]],["fontarguments",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["variationposition",3]],null,[[]],null,null,[[]],[[]],[[],["coordinate",3]],[[]],[[],["coordinate",3]],[[["coordinate",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["coordinate",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],null,null,null,null,null,null,null,[[],["flags",3]],null,null,[[["flags",3]],["flags",3]],[[["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[],["u32",15]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[]],[[]],null,null,[[],["flags",3]],[[],["fontmetrics",3]],[[]],[[]],[[["flags",3]],["ordering",4]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[],["fontmetrics",3]],null,[[],["flags",3]],[[["flags",3]],["bool",15]],[[["fontmetrics",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],[["flags",3],["option",4]]],[[["u32",15]],["flags",3]],[[["u32",15]],["flags",3]],[[["intoiterator",8]],["flags",3]],[[],["bool",15]],[[]],[[]],[[]],[[["flags",3]]],[[["flags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["flags",3]],["bool",15]],[[["fontmetrics",3]],["bool",15]],[[],["flags",3]],[[["flags",3]],[["ordering",4],["option",4]]],[[["flags",3]]],[[["bool",15],["flags",3]]],[[],[["option",4],["scalar",6]]],[[],[["option",4],["scalar",6]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[["flags",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4],["scalar",6]]],[[],[["option",4],["scalar",6]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["axis",3]],[[]],null,[[],["axis",3]],[[["axis",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,[[["axis",3]],["bool",15]],[[["f32",15],["bool",15],["fourbytetag",3]]],[[["bool",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fontstyle",3]],[[],["fontstyle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["weight",3]],[[],["width",3]],[[],["fontstyle",3]],[[],["skfontstyle_slant",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["weight",3]],["bool",15]],[[["width",3]],["bool",15]],[[],["bool",15]],[[["skfontstyle_slant",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["i32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fontstyle",3]],[[["weight",3]],["bool",15]],[[["width",3]],["bool",15]],[[["weight",3],["slant",4],["width",3]]],[[],["fontstyle",3]],[[["weight",3]],[["ordering",4],["option",4]]],[[["width",3]],[["ordering",4],["option",4]]],[[],["slant",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["weight",3]],[[],["width",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["bool",15]],null,[[]],[[],[["directcontext",6],["option",4]]],[[],[["dxgi_format",6],["option",4]]],[[],["format",4]],[[],[["format",4],["option",4]]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendapi",4]],[[],["backendformat",6]],[[],["backendformat",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[],["directcontextid",3]],[[],["resourcecachelimits",3]],[[],["resourcecacheusage",3]],[[],["grbackendapi",4]],[[],["grmipmapped",4]],[[],["grrenderable",4]],[[],["grprotected",4]],[[],["grsurfaceorigin",4]],[[],["grsemaphoressubmitted",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["colortype",4]],["bool",15]],[[["colortype",4]],["bool",15]],[[["compressiontype",4]],["backendformat",6]],[[["compressiontype",4]],["backendformat",6]],null,null,[[],[["textureresourceinfo",3],["option",4]]],[[],[["textureresourceinfo",3],["option",4]]],[[]],[[["colortype",4],["renderable",4]],["backendformat",6]],[[],["isize",3]],[[],["isize",3]],null,null,null,null,null,null,[[["directcontextid",3]],["bool",15]],[[["resourcecachelimits",3]],["bool",15]],[[["resourcecacheusage",3]],["bool",15]],[[["grbackendapi",4]],["bool",15]],[[["grmipmapped",4]],["bool",15]],[[["grrenderable",4]],["bool",15]],[[["grprotected",4]],["bool",15]],[[["grsurfaceorigin",4]],["bool",15]],[[["grsemaphoressubmitted",4]],["bool",15]],[[],["semaphoressubmitted",4]],[[]],null,[[]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["drawableinfo",3]]],[[],[["drawableinfo",3],["option",4]]],null,null,[[],[["option",4],["framebufferinfo",3]]],[[],[["textureinfo",3],["option",4]]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["directcontextid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["backendtexture",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["i32",15]],null,null,[[["colortype",4]],["usize",15]],[[],["i32",15]],null,[[],["mipmapped",4]],[[["directcontextid",3]],["bool",15]],[[["resourcecachelimits",3]],["bool",15]],[[["resourcecacheusage",3]],["bool",15]],[[]],[[]],[[["yuvainfo",6],["mipmapped",4],["surfaceorigin",4]],["option",4]],[[["yuvainfo",6],["surfaceorigin",4]],["option",4]],[[],["grdriverbugworkarounds",3]],[[],["grdriverbugworkarounds",3]],[[["textureresourceinfo",3]]],[[["textureresourceinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4]]],[[["dxgi_format",6]]],[[["enum",6]]],[[["mipmapped",4],["textureinfo",3]]],[[["usize",15],["framebufferinfo",3]]],[[],[["directcontext",6],["option",4]]],[[["imagelayout",4],["u32",15]]],[[["format",4]]],[[["imageinfo",3]]],[[["imageinfo",3]]],[[["backendcontext",3]],[["directcontext",6],["option",4]]],[[["ycbcrconversioninfo",3]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],null,[[["duration",3]]],[[["usize",15]],[["option",4],["backendformat",6]]],[[]],[[["data",6]],["bool",15]],[[["option",4],["usize",15],["bool",15]]],[[]],null,[[["u32",15],["option",4]]],[[]],null,[[],["usize",15]],[[],["resourcecachelimits",3]],[[],["usize",15]],[[],["resourcecacheusage",3]],null,null,[[],["usize",15]],[[["backendsurfacemutablestate",6],["backendrendertarget",6]],["bool",15]],[[["backendsurfacemutablestate",6],["backendrendertarget",6]],[["option",4],["backendsurfacemutablestate",6]]],[[["backendtexture",6],["backendsurfacemutablestate",6]],["bool",15]],[[["backendtexture",6],["backendsurfacemutablestate",6]],[["option",4],["backendsurfacemutablestate",6]]],[[["resourcestateenum",6]]],[[["resourcestateenum",6]]],[[["backendsurfacemutablestate",6]]],[[["usize",15]]],[[["resourcecachelimits",3]]],[[["imagelayout",4]]],[[["imagelayout",4]]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["option",4],["backendtexture",6]]],[[],["surfaceorigin",4]],[[],["surfaceorigin",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],null,[[],[["imageinfo",3],["option",4]]],[[],[["imageinfo",3],["option",4]]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["yuvcolorspace",4]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["grcontextoptions_enable",4]],[[],["grcontextoptions_shadercachestrategy",4]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["grcontextoptions_enable",4]],["bool",15]],[[["grcontextoptions_shadercachestrategy",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],null,null,[[["u32",15]]],[[["u32",15]],["i32",15]],[[["u32",15]]],[[["d3d12_cpu_descriptor_handle",3],["u32",15]]],[[["u32",15]]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]],["i32",15]],[[],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],[[["d3d12_cpu_descriptor_handle",3]]],[[],["i32",15]],[[["u32",15],["u64",15]],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["u32",15],["u64",15]],["i32",15]],[[],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],[[["u32",15]],["i32",15]],[[["u32",15],["usize",15]],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],[[["d3d12_cpu_descriptor_handle",3]]],[[["u32",15]],["i32",15]],[[["d3d12_cpu_descriptor_handle",3]]],null,null,[[]],[[["u32",15]],["i32",15]],[[["u32",15]]],null,[[],["luid",3]],[[],["i32",15]],[[["u32",15],["u64",15]]],[[["u32",15]],["d3d12_heap_properties",3]],[[],["d3d12_resource_desc",3]],[[],["d3d12_command_queue_desc",3]],[[],["i32",15]],[[["u32",15]],["u32",15]],[[],["i32",15]],[[],["u64",15]],[[],["i32",15]],[[],["u32",15]],[[["u32",15]],["d3d12_resource_allocation_info",3]],[[["u32",15]]],[[],["i32",15]],null,null,null,null,[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],null,[[],["i32",15]],[[["u32",15]],["i32",15]],[[["u32",15]],["i32",15]],null,[[["u32",15]]],[[["i32",15]],["i32",15]],[[["u64",15]],["i32",15]],null,[[["u32",15]]],[[["u32",15]]],[[["u64",15]],["i32",15]],[[["u32",15]],["i32",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["comptr",3],["result",4],["i32",15]]],[[],["backendcontext",3]],[[],["textureresourceinfo",3]],[[],["fenceinfo",3]],[[],["comptr",3]],[[]],[[]],[[]],[[]],null,[[],["idxgiadapter",3]],[[],["id3d12pageable",3]],[[],["id3d12pageable",3]],[[],["id3d12object",3]],[[]],null,[[]],[[["comptr",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],null,[[]],[[]],[[["id3d12resource",3],["cp",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["comptr",3]],[[["id3d12resource",3],["cp",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["comptr",3]],[[],["guid",3]],[[],["guid",3]],[[],["guid",3]],[[],["guid",3]],null,[[["d3d12_resource_states",6]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["backendstate",3]],[[["backendstate",3]],["backendstate",3]],[[["backendstate",3]]],[[["backendstate",3]],["backendstate",3]],[[["backendstate",3]]],[[],["u32",15]],[[["backendstate",3]],["backendstate",3]],[[["backendstate",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["textureinfo",3]],[[],["framebufferinfo",3]],[[],["backendstate",3]],[[],["grglstandard",4]],[[],["grglformat",4]],[[]],[[]],[[]],[[]],[[]],[[["backendstate",3]],["ordering",4]],[[["backendstate",3]],["bool",15]],[[]],[[]],[[],["backendstate",3]],[[],["bool",15]],[[["framebufferinfo",3]],["bool",15]],[[["backendstate",3]],["bool",15]],[[["grglstandard",4]],["bool",15]],[[["grglformat",4]],["bool",15]],[[["intoiterator",8]]],[[],["extensions",6]],[[],["extensions",6]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,[[]],[[]],[[]],[[]],[[["u32",15]],["grglformat",4]],[[]],[[["u32",15]],[["backendstate",3],["option",4]]],[[["u32",15]],["backendstate",3]],[[["u32",15]],["backendstate",3]],[[["uint",6]]],[[["intoiterator",8]],["backendstate",3]],[[["enum",6]]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["backendstate",3]]],[[["backendstate",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["framebufferinfo",3]],["bool",15]],[[["backendstate",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["backendstate",3]],[[["backendstate",3]],[["ordering",4],["option",4]]],[[],["bool",15]],[[["backendstate",3]]],[[]],[[["backendstate",3],["bool",15]]],[[["backendstate",3]],["backendstate",3]],[[["backendstate",3]]],null,[[]],[[]],[[]],[[]],[[]],[[["backendstate",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["bool",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["extensionflags",3]],[[],["featureflags",3]],[[],["allocflag",3]],null,null,[[["extensionflags",3]],["extensionflags",3]],[[["featureflags",3]],["featureflags",3]],[[["allocflag",3]],["allocflag",3]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],[[["extensionflags",3]],["extensionflags",3]],[[["featureflags",3]],["featureflags",3]],[[["allocflag",3]],["allocflag",3]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["extensionflags",3]],["extensionflags",3]],[[["featureflags",3]],["featureflags",3]],[[["allocflag",3]],["allocflag",3]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["extensionflags",3]],[[],["featureflags",3]],[[],["alloc",3]],[[],["allocflag",3]],[[],["ycbcrconversioninfo",3]],[[],["imageinfo",3]],[[],["getprocof",4]],[[],["drawableinfo",3]],[[],["version",3]],[[],["vkformat",4]],[[],["vkimagetiling",4]],[[],["vksharingmode",4]],[[],["vkimagelayout",4]],[[],["vkfilter",4]],[[],["vkoffset2d",3]],[[],["vkextent2d",3]],[[],["vkrect2d",3]],[[],["vksamplerycbcrmodelconversion",4]],[[],["vksamplerycbcrrange",4]],[[],["vkchromalocation",4]],[[],["vkphysicaldevicefeatures2",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["extensionflags",3]],["ordering",4]],[[["featureflags",3]],["ordering",4]],[[["allocflag",3]],["ordering",4]],[[["version",3]],["ordering",4]],null,null,[[["extensionflags",3]],["bool",15]],[[["featureflags",3]],["bool",15]],[[["allocflag",3]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["extensionflags",3]],[[],["featureflags",3]],[[],["allocflag",3]],[[["extensionflags",3]],["bool",15]],[[["featureflags",3]],["bool",15]],[[],["bool",15]],[[["allocflag",3]],["bool",15]],[[],["bool",15]],[[["version",3]],["bool",15]],[[["vkformat",4]],["bool",15]],[[["vkimagetiling",4]],["bool",15]],[[["vksharingmode",4]],["bool",15]],[[["vkimagelayout",4]],["bool",15]],[[["vkfilter",4]],["bool",15]],[[["vksamplerycbcrmodelconversion",4]],["bool",15]],[[["vksamplerycbcrrange",4]],["bool",15]],[[["vkchromalocation",4]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["extensionflags",3],["option",4]]],[[["u32",15]],[["option",4],["featureflags",3]]],[[["u32",15]],[["allocflag",3],["option",4]]],[[["u32",15]],["extensionflags",3]],[[["u32",15]],["featureflags",3]],[[["u32",15]],["allocflag",3]],[[["u32",15]],["extensionflags",3]],[[["u32",15]],["featureflags",3]],[[["u32",15]],["allocflag",3]],[[["allocflag",3],["devicememory",6],["devicesize",6]],["alloc",3]],[[["imageinfo",3],["imagelayout",4]]],[[["imageinfo",3],["imagelayout",4],["u32",15]]],[[["intoiterator",8]],["extensionflags",3]],[[["intoiterator",8]],["featureflags",3]],[[["intoiterator",8]],["allocflag",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],[[["extensionflags",3]],["bool",15]],[[["featureflags",3]],["bool",15]],[[["allocflag",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["usize",15]],null,[[],["usize",15]],[[],["cstr",3]],[[["extensionflags",3]],["bool",15]],[[["featureflags",3]],["bool",15]],[[["allocflag",3]],["bool",15]],[[["version",3]],["bool",15]],[[["physicaldevice",6],["device",6],["instance",6]],["backendcontext",3]],[[["samplerycbcrmodelconversion",4],["chromalocation",4],["filter",4],["bool32",6],["samplerycbcrrange",4],["formatfeatureflags",6],["u64",15]],["ycbcrconversioninfo",3]],[[["image",6],["format",4],["imagelayout",4],["alloc",3],["imagetiling",4],["u32",15]]],[[["usize",15]]],[[["physicaldevice",6],["device",6],["instance",6]],["backendcontext",3]],[[["samplerycbcrmodelconversion",4],["bool32",6],["samplerycbcrrange",4],["format",4],["chromalocation",4],["filter",4],["formatfeatureflags",6],["u64",15]],["ycbcrconversioninfo",3]],[[],["extensionflags",3]],[[],["featureflags",3]],[[],["allocflag",3]],null,null,[[["extensionflags",3]],[["ordering",4],["option",4]]],[[["featureflags",3]],[["ordering",4],["option",4]]],[[["allocflag",3]],[["ordering",4],["option",4]]],[[["version",3]],[["ordering",4],["option",4]]],[[],["usize",15]],null,[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],null,null,[[["bool",15],["extensionflags",3]]],[[["bool",15],["featureflags",3]]],[[["allocflag",3],["bool",15]]],[[]],[[["protected",4]]],null,null,[[["extensionflags",3]],["extensionflags",3]],[[["featureflags",3]],["featureflags",3]],[[["allocflag",3]],["allocflag",3]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["extensionflags",3]]],[[["featureflags",3]]],[[["allocflag",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[],["u32",15]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[]],[[["flags",3]],["ordering",4]],[[["flags",3]],["bool",15]],[[]],[[],["flags",3]],[[["flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u32",15]],[["flags",3],["option",4]]],[[["u32",15]],["flags",3]],[[["u32",15]],["flags",3]],[[["intoiterator",8]],["flags",3]],[[]],[[["flags",3]]],[[["flags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["tilemode",4]],[["option",4],["shader",6]]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[["flags",3]],[["ordering",4],["option",4]]],[[["scalar",6],["tilemode",4]],[["option",4],["shader",6]]],[[["flags",3]]],[[["flags",3],["bool",15]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[["tilemode",4]],[["option",4],["shader",6]]],[[]],[[["flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["scalar",6],["tilemode",4]],[["option",4],["shader",6]]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["option",4],["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],["usize",15]],null,null,null,null,null,[[]],[[]],[[],["skhighcontrastconfig_invertstyle",4]],[[]],[[["skhighcontrastconfig_invertstyle",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["highcontrastconfig",3]],[[]],null,[[]],[[["highcontrastconfig",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[]],[[]],null,[[],["bool",15]],[[["highcontrastconfig",3]],["bool",15]],[[["highcontrastconfig",3]],[["colorfilter",6],["option",4]]],[[["invertstyle",4],["bool",15],["scalar",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["alphatype",4]],null,[[["bool",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["irect",3]],null,[[]],[[],["cubicresampler",3]],[[],["skimage_compressiontype",4]],[[],["skimage_bitdepth",4]],[[],["skimage_cachinghint",4]],[[]],[[]],[[]],[[]],[[],["colorspace",6]],[[],["colortype",4]],[[]],[[],["isize",3]],[[["encodedimageformat",4]],[["option",4],["data",6]]],[[["encodedimageformat",4],["i32",15]],[["option",4],["data",6]]],[[],[["option",4],["data",6]]],[[["cubicresampler",3]],["bool",15]],[[["skimage_compressiontype",4]],["bool",15]],[[["skimage_bitdepth",4]],["bool",15]],[[["skimage_cachinghint",4]],["bool",15]],[[["directcontext",6]]],[[["directcontext",6]]],[[["directcontext",6],["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[["alphatype",4],["recordingcontext",6],["surfaceorigin",4],["backendtexture",6],["colortype",4]],[["option",4],["image",6]]],[[["bitmap",6]],[["option",4],["image",6]]],[[["compressiontype",4],["recordingcontext",6],["data",6]]],[[],[["option",4],["image",6]]],[[["imagegenerator",6]],[["option",4],["image",6]]],[[["surfaceorigin",4],["directcontext",6],["yuvcolorspace",4]]],[[["matrix",3],["option",4],["paint",6],["bitdepth",4],["option",4]],[["option",4],["image",6]]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4],["image",6]]],[[["imageinfo",6],["usize",15]],[["option",4],["image",6]]],[[["alphatype",4],["recordingcontext",6],["surfaceorigin",4],["backendtexture",6],["colortype",4]],[["option",4],["image",6]]],[[["recordingcontext",6],["yuvapixmaps",6]],[["option",4],["image",6]]],[[["recordingcontext",6],["yuvabackendtextures",6]],[["option",4],["image",6]]],[[],["bool",15]],[[]],[[]],[[]],[[],["i32",15]],[[],["imageinfo",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["recordingcontext",6]],["bool",15]],[[]],[[["cubicresampler",3]],["bool",15]],[[],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[["pixmap",6],["bool",15],["directcontext",6]],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[["compressiontype",4]],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[["cachinghint",4]],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[],[["option",4],["image",6]]],[[["compressiontype",4],["directcontext",6],["data",6]],[["option",4],["image",6]]],[[["directcontext",6],["mipmapped",4]],[["option",4],["image",6]]],[[["budgeted",3],["directcontext",6],["mipmapped",4]],[["option",4],["image",6]]],[[["recordingcontext",6],["imagefilter",6],["option",4]],["option",4]],[[],[["option",4],["borrows",3]]],[[["imageinfo",6],["usize",15],["cachinghint",4]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["pixmap",6],["cachinghint",4]],["bool",15]],[[["imageinfo",6],["usize",15],["cachinghint",4]],["bool",15]],[[],[["option",4],["image",6]]],[[["pixmap",6]],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["option",4],["shader",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[]],[[],["i32",15]],[[],[["option",4],["image",6]]],[[]],null,null,null,null,[[["region",6],["scalar",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[],["skimagefilter_mapdirection",4]],[[]],[[],["option",4]],[[],[["colorfilter",6],["option",4]]],[[],["option",4]],[[],["rect",3]],[[],["usize",15]],[[],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["skimagefilter_mapdirection",4]],["bool",15]],[[],["option",4]],[[["matrix",3],["mapdirection",4]],["irect",3]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["paint",6]],["option",4]],[[],["option",4]],[[["usize",15]],[["imagefilter",6],["option",4]]],[[]],[[["usize",15]],[["imagefilter",6],["option",4]]],[[]],[[]],[[["scalar",6]],["option",4]],[[["bool",15],["scalar",6],["tilemode",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[],["option",4]],[[],[["colorfilter",6],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["matrix",3]],[["imagefilter",6],["option",4]]],null,null,null,null,null,null,[[["region",6],["scalar",6]],[["imagefilter",6],["option",4]]],[[["bool",15],["scalar",6]],[["imagefilter",6],["option",4]]],[[["blendmode",4]],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["croprect",3]],[[],["arithmeticfpinputs",3]],[[],["skimagefilters_dither",4]],[[]],[[]],[[]],[[],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[]],[[],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],null,[[["croprect",3]],["bool",15]],[[["arithmeticfpinputs",3]],["bool",15]],[[["skimagefilters_dither",4]],["bool",15]],[[],[["imagefilter",6],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["rect",3]]],[[["irect",3]]],[[["rect",3]]],[[["irect",3]]],[[["option",4],["croprect",3]]],[[["croprect",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["imagefilter",6],["option",4]]],[[]],[[]],[[]],[[]],[[]],null,[[["scalar",6]],[["imagefilter",6],["option",4]]],[[["bool",15],["scalar",6],["tilemode",4]],[["imagefilter",6],["option",4]]],[[["matrix",3]],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[["croprect",3]],["bool",15]],[[["arithmeticfpinputs",3]],["bool",15]],[[["bool",15],["f32",15]]],[[],[["imagefilter",6],["option",4]]],[[["paint",6]],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[],[["option",4],["rect",3]]],[[],[["imagefilter",6],["option",4]]],[[["dither",4]],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[["scalar",6]],[["imagefilter",6],["option",4]]],[[],[["imagefilter",6],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["scalar",6],["matrix",3]],[["option",4],["patheffect",6]]],[[],["colorfilter",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["typemask",3]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[],["u32",15]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[],["typemask",3]],[[],["matrix",3]],[[],["member",4]],[[],["affinemember",4]],[[],["skapplyperspectiveclip",4]],[[],["skmatrix_scaletofit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typemask",3]],["ordering",4]],[[["matrix",3]],["matrix",3]],[[["typemask",3]],["bool",15]],[[["matrix",3],["option",4]],[["size",3],["option",4]]],[[]],[[]],[[]],[[],["typemask",3]],[[["typemask",3]],["bool",15]],[[],["bool",15]],[[["member",4]],["bool",15]],[[["affinemember",4]],["bool",15]],[[["skapplyperspectiveclip",4]],["bool",15]],[[["skmatrix_scaletofit",4]],["bool",15]],[[["intoiterator",8]]],[[["scalar",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["matrix44",3]]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[["u32",15]],[["typemask",3],["option",4]]],[[["u32",15]],["typemask",3]],[[["u32",15]],["typemask",3]],[[["intoiterator",8]],["typemask",3]],[[],[["option",4],["matrix",3]]],[[["scaletofit",4]],["option",4]],[[]],[[],["typemask",3]],[[],["bool",15]],[[]],[[]],[[]],[[],["matrix",3]],[[["member",4]]],[[["affinemember",4]]],[[["usize",15]]],[[["usize",15]]],[[["member",4]]],[[["affinemember",4]]],[[]],[[]],[[["typemask",3]]],[[["typemask",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[],[["option",4],["matrix",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["point",3]],[[],["point",3]],[[]],[[]],[[["scalar",6]],[["option",4],["scalar",6]]],[[]],[[],[["option",4],["rect",3]]],[[]],[[["applyperspectiveclip",4]]],[[],["vector",6]],[[]],[[]],[[["scalar",6]],["point",3]],[[],["scalar",6]],[[]],[[],["scalar",6]],[[["matrix",3]]],[[["typemask",3]],["bool",15]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[],["typemask",3]],[[["typemask",3]],[["ordering",4],["option",4]]],[[],["scalar",6]],[[],["scalar",6]],[[["matrix",3]]],[[],["bool",15]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["scalar",6]],[[],["bool",15]],[[],["option",4]],[[["typemask",3]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[["typemask",3],["bool",15]]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[],["bool",15]],[[["scaletofit",4]],["bool",15]],[[["scalar",6]]],[[["rsxform",3]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typemask",3]]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["typemask",3]],[[]],[[]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[],["u8",15]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vector4",3]],[[],["typemask",3]],[[],["matrix44",3]],[[]],[[]],[[]],[[["typemask",3]],["ordering",4]],[[["typemask",3]],["bool",15]],[[]],[[]],[[],["f64",15]],[[]],[[],["typemask",3]],[[["vector4",3]],["bool",15]],[[["typemask",3]],["bool",15]],[[],["bool",15]],[[["scalar",6]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["typemask",3],["option",4]]],[[["u8",15]],["typemask",3]],[[["u8",15]],["typemask",3]],[[["intoiterator",8]],["typemask",3]],[[],["scalar",6]],[[],["typemask",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["typemask",3]]],[[["typemask",3]],["bool",15]],[[]],[[]],[[]],[[],[["option",4],["matrix44",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector4",3]]],[[["vector4",3]],["bool",15]],[[["typemask",3]],["bool",15]],[[["scalar",6]]],[[]],[[]],[[],["typemask",3]],[[["typemask",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[],["bool",15]],[[["typemask",3]]],[[]],[[["scalar",6]]],[[["bool",15],["typemask",3]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[["typemask",3]],["typemask",3]],[[["typemask",3]]],[[]],[[]],[[]],[[["typemask",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[["matrix",3]],[["option",4],["patheffect",6]]],[[],[["option",4],["patheffect",6]]],[[["pathop",4]],["patheffect",6]],null,null,null,null,null,null,null,[[],["colorfilter",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["f32",15]],[[],[["imagefilter",6],["option",4]]],[[],["blendmode",4]],[[],["color",3]],[[],["color4f",3]],[[],[["colorfilter",6],["option",4]]],[[["option",4],["path",6],["rect",3]],[["option",4],["path",6]]],[[],[["imagefilter",6],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["maskfilter",6],["option",4]]],[[],["paint",6]],[[],["bool",15]],[[],[["option",4],["patheffect",6]]],[[]],[[["u8",15]]],[[["f32",15]]],[[["bool",15]]],[[["u8",15]]],[[["blendmode",4]]],[[]],[[]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[["cap",4]]],[[["join",4]]],[[["scalar",6]]],[[["scalar",6]]],[[["style",4]]],[[],[["option",4],["shader",6]]],[[],["cap",4]],[[],["join",4]],[[],["scalar",6]],[[],["scalar",6]],[[],["style",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["scalar",6]]],[[["scalar",6]]],[[["option",4]]],[[["path",6]]],[[["path",6],["matrix",3]]],[[["bool",15]]],[[["option",4]]],[[]],[[["option",4]]],[[],["pathsegmentmask",3]],[[],["usize",15]],[[["bool",15],["scalar",6]]],[[["pathdirection",4],["scalar",6],["arcsize",4]]],[[["scalar",6]]],[[],[["option",4],["path",6]]],[[["pathsegmentmask",3]],["pathsegmentmask",3]],[[["pathsegmentmask",3]]],[[["pathsegmentmask",3]],["pathsegmentmask",3]],[[["pathsegmentmask",3]]],[[],["u32",15]],[[["pathsegmentmask",3]],["pathsegmentmask",3]],[[["pathsegmentmask",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[["scalar",6]]],[[],["pathsegmentmask",3]],[[],["skpath_arcsize",4]],[[],["skpath_addpathmode",4]],[[],["skpath_verb",4]],[[]],[[]],[[]],[[]],[[]],[[["pathsegmentmask",3]],["ordering",4]],[[],["rect",3]],[[["scalar",6]]],[[],[["option",4],["scalar",6]]],[[],["scalar",6]],[[],["bool",15]],[[],["bool",15]],[[["pathsegmentmask",3]],["bool",15]],[[["usize",15],["scalar",6]],[["option",4],["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["data",6]],[["option",4],["path",6]]],[[]],[[]],[[]],[[]],[[["bool",15]],["data",6]],[[["bool",15]],["data",6]],[[]],[[],["pathsegmentmask",3]],[[["pathsegmentmask",3]],["bool",15]],[[["skpath_arcsize",4]],["bool",15]],[[["skpath_addpathmode",4]],["bool",15]],[[["skpath_verb",4]],["bool",15]],[[["intoiterator",8]]],[[],["pathfilltype",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[["skpathverb",4]],["skpath_verb",4]],[[]],[[["u32",15]],[["pathsegmentmask",3],["option",4]]],[[["u32",15]],["pathsegmentmask",3]],[[["u32",15]],["pathsegmentmask",3]],[[["intoiterator",8]],["pathsegmentmask",3]],[[["font",6]]],[[],[["option",4],["path",6]]],[[],["u32",15]],[[["usize",15]],[["point",3],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["pathsegmentmask",3]]],[[["path",6],["scalar",6]],[["option",4],["path",6]]],[[["pathsegmentmask",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["path",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["bool",15]],["bool",15]],[[],[["option",4],["rect",3]]],[[["bool",15]],["bool",15]],[[],["option",4]],[[],[["option",4],["rrect",3]]],[[],["bool",15]],[[],["bool",15]],[[],[["point",3],["option",4]]],[[]],[[]],[[],["path",6]],[[["matrix",3]],["path",6]],[[]],[[["pathsegmentmask",3]],["bool",15]],[[["path",6],["bool",15]],["iter",3]],[[["path",6]],["rawiter",3]],[[]],[[["filltype",4]]],[[],["option",4]],[[],["option",4]],[[],["pathsegmentmask",3]],[[]],[[["path",6],["pathop",4]],["option",4]],[[]],[[["pathdirection",4],["usize",15]]],[[["pathsegmentmask",3]],[["ordering",4],["option",4]]],[[],["verb",4]],[[],["usize",15]],[[["bool",15]]],[[]],[[["pathdirection",4],["scalar",6],["arcsize",4]]],[[["scalar",6]]],[[]],[[]],[[]],[[]],[[]],[[["pathsegmentmask",3]]],[[]],[[["path",6]]],[[]],[[]],[[["pathdirection",4],["usize",15]]],[[],["segmentmask",3]],[[],["data",6]],[[["bool",15],["pathsegmentmask",3]]],[[["pathfilltype",4]]],[[["bool",15]]],[[]],[[["path",6],["bool",15]],["iter",3]],[[["path",6]],["rawiter",3]],[[]],[[],["option",4]],[[["pathsegmentmask",3]],["pathsegmentmask",3]],[[["pathsegmentmask",3]]],[[["path",6]]],[[],[["option",4],["rect",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["pathsegmentmask",3]]],[[]],[[["matrix",3]]],[[["matrix",3],["applyperspectiveclip",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["path",6]],[[["matrix",3]],["path",6]],[[["matrix",3],["applyperspectiveclip",4]],["path",6]],null,null,null,null,null,[[]],[[]],[[],["skpath1dpatheffect_style",4]],[[]],[[["skpath1dpatheffect_style",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["path",6],["scalar",6],["style",4]],[["option",4],["patheffect",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["path",6],["matrix",3]],["patheffect",6]],null,null,null,[[],[["dashinfo",3],["option",4]]],[[["strokerec",6],["path",6],["matrix",3]],[["option",4],["pointdata",3]]],[[]],[[]],[[]],[[]],null,[[],["dashinfo",3]],[[]],[[],["patheffect",6]],[[],["rect",3]],[[["scalar",6]],["option",4]],[[["scalar",6]],["option",4]],[[]],[[["scalar",6]],["option",4]],[[]],[[["dashinfo",3]],["bool",15]],[[["strokerec",6],["path",6]],["option",4]],[[["path",6],["strokerec",6],["path",6]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[["scalar",6],["matrix",3]],[["option",4],["patheffect",6]]],[[["matrix",3]],[["option",4],["patheffect",6]]],[[],[["option",4],["patheffect",6]]],[[["pathop",4]],["patheffect",6]],[[["dashinfo",3]],["bool",15]],null,[[["path",6],["scalar",6],["style",4]],[["option",4],["patheffect",6]]],[[["path",6],["matrix",3]],["patheffect",6]],null,null,[[]],null,[[["join",4],["cap",4],["scalar",6]],[["option",4],["patheffect",6]]],[[],["patheffect",6]],[[]],[[["scalar",6]],[["option",4],["patheffect",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[],["pointflags",3]],[[["pointflags",3]],["pointflags",3]],[[["pointflags",3]]],[[["pointflags",3]],["pointflags",3]],[[["pointflags",3]]],[[],["u32",15]],[[["pointflags",3]],["pointflags",3]],[[["pointflags",3]]],[[]],[[]],[[],["pointflags",3]],[[]],[[["pointflags",3]],["ordering",4]],[[["pointflags",3]],["bool",15]],[[],["pointflags",3]],[[["pointflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],[["option",4],["pointflags",3]]],[[["u32",15]],["pointflags",3]],[[["u32",15]],["pointflags",3]],[[["intoiterator",8]],["pointflags",3]],[[]],[[["pointflags",3]]],[[["pointflags",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["pointflags",3]],["bool",15]],[[],["pointflags",3]],[[["pointflags",3]],[["ordering",4],["option",4]]],[[["pointflags",3]]],[[["bool",15],["pointflags",3]]],[[["pointflags",3]],["pointflags",3]],[[["pointflags",3]]],[[]],[[["pointflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[],["matrixflags",3]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[],["u32",15]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[]],[[]],[[],["matrixflags",3]],[[]],[[["matrixflags",3]],["ordering",4]],[[["matrixflags",3]],["bool",15]],[[]],[[],["matrixflags",3]],[[["matrixflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],[["matrixflags",3],["option",4]]],[[["u32",15]],["matrixflags",3]],[[["u32",15]],["matrixflags",3]],[[["intoiterator",8]],["matrixflags",3]],[[["path",6],["bool",15]]],[[]],[[["matrixflags",3]]],[[["matrixflags",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["scalar",6]],[[["scalar",6]],[["option",4],["matrix",3]]],[[["matrixflags",3]],["bool",15]],[[["path",6],["bool",15]]],[[],["bool",15]],[[],["matrixflags",3]],[[["matrixflags",3]],[["ordering",4],["option",4]]],[[["scalar",6]],["option",4]],[[["matrixflags",3]]],[[["bool",15],["scalar",6]],[["option",4],["path",6]]],[[["matrixflags",3],["bool",15]]],[[["path",6],["bool",15]]],[[["matrixflags",3]],["matrixflags",3]],[[["matrixflags",3]]],[[]],[[["matrixflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[["structureelementnode",3]]],[[["f32",15]]],[[]],[[["i32",15]]],[[]],[[]],[[],["attributelist",6]],[[],["attributelist",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["skpdf_documentstructuretype",4]],[[]],null,null,[[]],[[],["metadata",3]],[[]],null,[[["skpdf_documentstructuretype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["str",15]],null,[[]],[[["metadata",3],["option",4]],["document",3]],[[],["i32",15]],null,null,null,[[]],[[["structureelementnode",3],["vec",3]]],[[]],[[["i32",15]]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[["usize",15],["scalar",6]],[["option",4],["shader",6]]],[[["usize",15],["scalar",6]],[["option",4],["shader",6]]],null,[[["option",4],["bbhfactory",6]],["canvas",3]],[[],[["drawable",6],["option",4]]],[[["option",4],["rect",3]],[["picture",6],["option",4]]],[[]],[[],[["canvas",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["irect",3]],[[],["iterator",3]],[[],["cliperator",3]],[[],["spanerator",3]],[[],["skregion_op",4]],[[]],[[]],[[]],[[]],[[["regionop",4]]],[[],["usize",15]],[[["ipoint",3]],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[["skregion_op",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[],["region",6]],[[["path",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["region",6]],[[["region",6]],["iterator",3]],[[["region",6]],["cliperator",3]],[[["region",6],["i32",15]],["spanerator",3]],[[],["iterator",3]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[["region",6],["regionop",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[],["usize",15]],[[],["irect",3]],[[],["irect",3]],[[]],[[]],[[["region",6]],["iterator",3]],[[]],[[]],[[],["bool",15]],[[],[["option",4],["region",6]]],[[["region",6]],["bool",15]],[[],["bool",15]],[[["path",6],["region",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["region",6]],["bool",15]],[[["region",6]]],[[]],[[]],[[]],[[]],[[]],[[],["region",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["rrect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["rrect",3]],[[],["skrrect_type",4]],[[],["skrrect_corner",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["bool",15]],["string",3]],[[],["bool",15]],[[["skrrect_type",4]],["bool",15]],[[["skrrect_corner",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[],["type",4]],[[]],[[]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[["scalar",6]]],[[]],[[]],[[["corner",4]],["vector",6]],[[],["usize",15]],[[],["rect",3]],[[]],[[["scalar",6]]],[[]],[[]],[[]],[[["scalar",6]]],[[],["vector",6]],[[]],[[]],[[]],[[["matrix",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[["vec",3]]],null,null,null,null,null,[[]],[[]],[[]],[[],["options",3]],[[]],[[],["i32",15]],[[],["options",3]],[[["options",3]],["bool",15]],[[],[["option",4],["usize",15]]],[[],[["uniform",6],["option",4]]],[[],[["uniform",6],["option",4]]],[[],["flags",3]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],[["colorfilter",6],["option",4]]],[[["recordingcontext",6],["bool",15],["imageinfo",6]],[["option",4],["image",6]]],[[["bool",15]],[["option",4],["shader",6]]],[[],["u32",15]],[[],["str",15]],[[],["str",15]],[[["options",3]],["bool",15]],[[],[["string",3],["result",4],["runtimeeffect",6]]],[[],[["string",3],["result",4],["runtimeeffect",6]]],[[],["usize",15]],[[],["usize",15]],[[],["str",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["typeid",3]],null,[[],["usize",15]],[[]],[[]],[[]],[[],["i32",15]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[],["u32",15]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[],["skruntimeeffect_uniform_type",4]],[[]],[[]],[[["flags",3]],["ordering",4]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[["flags",3]],["bool",15]],[[["skruntimeeffect_uniform_type",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[["u32",15]],[["flags",3],["option",4]]],[[["u32",15]],["flags",3]],[[["u32",15]],["flags",3]],[[["intoiterator",8]],["flags",3]],[[]],[[]],[[["flags",3]]],[[["flags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[["flags",3]],[["ordering",4],["option",4]]],[[["flags",3]]],[[["flags",3],["bool",15]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[["flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["filteroptions",3]],[[],["mediumbehavior",4]],[[],["samplingoptions",3]],[[]],[[]],[[]],null,[[]],[[["filteroptions",3]],["bool",15]],[[["mediumbehavior",4]],["bool",15]],[[["samplingoptions",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["cubicresampler",3]]],[[["filterquality",4]]],[[["filtermode",4]]],[[["filteroptions",3]]],[[]],[[["filterquality",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["filteroptions",3]],["bool",15]],[[["samplingoptions",3]],["bool",15]],[[["mipmapmode",4],["filtermode",4]]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["gradienttype",4]],[[],["gradientinfo",3]],[[],["skshader_gradienttype",4]],[[]],[[]],[[]],[[],["usize",15]],null,null,[[["gradienttype",4]],["bool",15]],[[["gradientinfo",3]],["bool",15]],[[["skshader_gradienttype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["usize",15],["scalar",6]],["option",4]],[[]],[[]],[[]],null,[[]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["tilemode",4]],["option",4]],[[["gradienttype",4]],["bool",15]],[[["gradientinfo",3]],["bool",15]],[[["scalar",6],["tilemode",4]],["option",4]],null,[[["tilemode",4]],["option",4]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["scalar",6]],["option",4]],[[["scalar",6],["tilemode",4]],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["matrix",3]]],[[["blendmode",4]],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[["f32",15]],[["option",4],["shader",6]]],[[["option",4],["shader",6],["matrix",3]]],[[],["maskfilter",6]],[[["blendmode",4]],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[],["shader",6]],[[["f32",15]],[["option",4],["shader",6]]],[[["option",4],["shader",6],["matrix",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["skshaper_runhandler",3]],[[],["skshaper_runhandler",3]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["skshaper_feature",3]],[[]],[[]],[[["runinfo",3]]],[[]],[[]],[[],["font",6]],[[],["cstr",3]],[[],["u8",15]],[[],["fourbytetag",3]],null,[[],["usize",15]],[[],["point",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],null,[[]],[[]],[[],[["option",4],["textblob",6]]],[[]],[[["str",15]],["textblobbuilderrunhandler",3]],[[["str",15],["u8",15]],[["option",4],["borrows",3]]],[[],["option",4]],[[["str",15],["font",6]],[["fontruniterator",6],["borrows",3]]],[[["str",15]],[["scriptruniterator",6],["borrows",3]]],[[["str",15],["u8",15]],[["option",4],["borrows",3]]],[[]],[[["str",15],["fourbytetag",3]],[["scriptruniterator",6],["borrows",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],[["option",4],["languageruniterator",6]]],[[["usize",15],["u8",15]],["bidiruniterator",6]],[[["usize",15],["font",6]],["fontruniterator",6]],[[],["languageruniterator",6]],[[["usize",15],["u8",15]],["scriptruniterator",6]],[[]],[[]],[[["runinfo",3]],["buffer",3]],null,[[["runinfo",3]]],[[["bool",15],["str",15],["font",6],["scalar",6]]],[[["bool",15],["str",15],["font",6],["scalar",6]],["option",4]],[[["scriptruniterator",6],["bidiruniterator",6],["str",15],["fontruniterator",6],["languageruniterator",6],["scalar",6]]],[[["scriptruniterator",6],["bidiruniterator",6],["str",15],["fontruniterator",6],["languageruniterator",6],["scalar",6]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],null,[[]],[[["runinfo",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],null,null,[[]],[[]],[[]],null,null,null,[[["runinfo",3]],["buffer",3]],[[["runinfo",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["patheffect",6]],[[["join",4],["cap",4],["scalar",6]],[["option",4],["patheffect",6]]],null,null,null,null,null,null,null,null,null,[[["paint",6]]],[[["path",6],["path",6]],["bool",15]],[[["path",6]],["bool",15]],[[]],[[]],[[]],[[]],[[],["cap",4]],[[],["skstrokerec_initstyle",4]],[[],["skstrokerec_style",4]],[[]],[[]],[[["skstrokerec_initstyle",4]],["bool",15]],[[["skstrokerec_style",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[["paint",6]]],[[["strokerec",6]],["bool",15]],[[]],[[]],[[],["scalar",6]],[[["paint",6],["style",4]],["scalar",6]],[[["join",4],["scalar",6],["cap",4]],["scalar",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["join",4]],[[],["scalar",6]],[[],["bool",15]],[[["initstyle",4]]],[[]],[[]],[[],["scalar",6]],[[]],[[]],[[["scalar",6]]],[[["cap",4],["join",4],["scalar",6]]],[[["scalar",6]]],[[],["style",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["scalar",6]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["canvas",3]],[[],[["surfacecharacterization",6],["option",4]]],[[],["sksurface_contentchangemode",4]],[[],["sksurface_backendhandleaccess",4]],[[],["sksurface_backendsurfaceaccess",4]],[[]],[[]],[[]],[[["canvas",3],["paint",6],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[["sksurface_contentchangemode",4]],["bool",15]],[[["sksurface_backendhandleaccess",4]],["bool",15]],[[["sksurface_backendsurfaceaccess",4]],["bool",15]],[[]],[[]],[[]],[[["flushinfo",3],["backendsurfaceaccess",4]],["semaphoressubmitted",4]],[[["flushinfo",3]],["semaphoressubmitted",4]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["recordingcontext",6],["surfaceorigin",4],["option",4],["surfaceprops",3],["backendrendertarget",6],["colortype",4]],["option",4]],[[["recordingcontext",6],["surfaceorigin",4],["backendtexture",6],["option",4],["surfaceprops",3],["colortype",4]],["option",4]],[[],["u32",15]],[[["backendhandleaccess",4]],[["option",4],["backendrendertarget",6]]],[[["backendhandleaccess",4]],[["option",4],["backendtexture",6]]],[[]],[[]],[[]],[[],["i32",15]],[[],["imageinfo",6]],[[],["image",6]],[[],[["option",4],["image",6]]],[[]],[[]],[[]],[[["surfacecharacterization",6]],["bool",15]],[[],["option",4]],[[["imageinfo",6],["option",4],["surfaceprops",3]],["option",4]],[[["imageinfo",6],["option",4],["surfaceprops",3]],[["borrows",3],["option",4]]],[[],["option",4]],[[["imageinfo",6],["recordingcontext",6],["budgeted",3],["surfaceorigin",4],["option",4],["surfaceprops",3]],["option",4]],[[["recordingcontext",6],["surfacecharacterization",6],["budgeted",3]],["option",4]],[[["imageinfo",6]],[["option",4],["surface",6]]],[[],[["option",4],["surface",6]]],[[["contentchangemode",4]]],[[],[["option",4],["borrows",3]]],[[],["surfaceprops",3]],[[["imageinfo",6],["usize",15]],["bool",15]],[[["bitmap",6]],["bool",15]],[[["pixmap",6]],["bool",15]],[[],[["recordingcontext",6],["option",4]]],[[["surfaceorigin",4],["backendtexture",6]],["bool",15]],[[["surfaceorigin",4],["backendtexture",6]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["i32",15]],[[["bitmap",6]]],[[["pixmap",6]]],null,null,null,null,null,[[],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[],["u32",15]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[]],[[["flags",3]],["ordering",4]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[]],[[]],[[]],[[],["flags",3]],[[],["data",6]],[[["flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],[["option",4],["flags",3]]],[[["u32",15]],["flags",3]],[[["u32",15]],["flags",3]],[[["intoiterator",8]],["flags",3]],[[]],[[["flags",3]]],[[["flags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["flags",3]],["bool",15]],[[],["canvas",3]],[[],["flags",3]],[[["flags",3]],[["ordering",4],["option",4]]],[[["flags",3]]],[[["bool",15],["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[["flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4]],["colorfilter",6]],[[],["colorfilter",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["textrange",6]]],[[["placeholderstyle",3]]],[[]],null,[[],["str",15]],null,[[],["textdecoration",3]],[[],["scalar",6]],[[["typeface",6]]],[[]],[[]],null,null,null,null,[[["textdecoration",3]],["textdecoration",3]],[[["textdecoration",3]]],[[["textdecoration",3]],["textdecoration",3]],[[["textdecoration",3]]],[[],["u32",15]],[[["textdecoration",3]],["textdecoration",3]],[[["textdecoration",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["paragraph",6]],[[]],[[],["textbox",3]],[[],["textshadow",3]],[[],["textdecoration",3]],[[],["decoration",3]],[[],["placeholderstyle",3]],[[],["block",3]],[[],["placeholder",3]],[[],["skia_textlayout_affinity",4]],[[],["skia_textlayout_rectheightstyle",4]],[[],["skia_textlayout_rectwidthstyle",4]],[[],["skia_textlayout_textalign",4]],[[],["skia_textlayout_textdirection",4]],[[],["skia_textlayout_positionwithaffinity",3]],[[],["skia_textlayout_textbaseline",4]],[[],["skia_textlayout_textheightbehavior",4]],[[],["skia_textlayout_drawoptions",4]],[[],["skia_textlayout_textdecorationstyle",4]],[[],["skia_textlayout_textdecorationmode",4]],[[],["skia_textlayout_styletype",4]],[[],["skia_textlayout_placeholderalignment",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["textdecoration",3]],["ordering",4]],null,null,[[],["bool",15]],[[["textdecoration",3]],["bool",15]],[[],["i32",15]],[[]],[[]],[[],["decoration",3]],[[],["placeholderstyle",3]],[[]],[[]],[[],["skia_textlayout_affinity",4]],[[],["skia_textlayout_rectheightstyle",4]],[[],["skia_textlayout_rectwidthstyle",4]],[[],["skia_textlayout_textalign",4]],[[],["skia_textlayout_positionwithaffinity",3]],[[],["skia_textlayout_textbaseline",4]],[[],["skia_textlayout_textdecorationstyle",4]],[[],["skia_textlayout_textdecorationmode",4]],[[],["skia_textlayout_styletype",4]],[[],["skia_textlayout_placeholderalignment",4]],[[],[["option",4],["typeface",6]]],[[["unichar",6],["fontstyle",3]],[["option",4],["typeface",6]]],null,[[],["bool",15]],null,[[]],[[],["drawoptions",4]],[[],["textalign",4]],[[],["str",15]],[[],["bool",15]],[[],["bool",15]],[[],["textdecoration",3]],[[]],null,null,null,[[["textbox",3]],["bool",15]],[[],["bool",15]],[[["textdecoration",3]],["bool",15]],[[["decoration",3]],["bool",15]],[[],["bool",15]],[[["block",3]],["bool",15]],[[["placeholder",3]],["bool",15]],[[["skia_textlayout_affinity",4]],["bool",15]],[[["skia_textlayout_rectheightstyle",4]],["bool",15]],[[["skia_textlayout_rectwidthstyle",4]],["bool",15]],[[["skia_textlayout_textalign",4]],["bool",15]],[[["skia_textlayout_textdirection",4]],["bool",15]],[[["skia_textlayout_textbaseline",4]],["bool",15]],[[["skia_textlayout_textheightbehavior",4]],["bool",15]],[[["skia_textlayout_drawoptions",4]],["bool",15]],[[["skia_textlayout_textdecorationstyle",4]],["bool",15]],[[["skia_textlayout_textdecorationmode",4]],["bool",15]],[[["skia_textlayout_styletype",4]],["bool",15]],[[["skia_textlayout_placeholderalignment",4]],["bool",15]],[[["intoiterator",8]]],[[],[["fontmgr",6],["option",4]]],[[],["str",15]],[[["fontstyle",3]],[["typeface",6],["vec",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["bool",15]],[[],["fontfamilies",3]],[[],["usize",15]],null,[[],["scalar",6]],[[],["fontstyle",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["option",4],["textdecoration",3]]],[[["u32",15]],["textdecoration",3]],[[["u32",15]],["textdecoration",3]],[[["intoiterator",8]],["textdecoration",3]],[[],["positionwithaffinity",3]],[[],["linemetricsvector",6]],[[],["textboxes",6]],[[["rectheightstyle",4],["rectwidthstyle",4],["range",3],["usize",15]],["textboxes",6]],[[["range",3],["usize",15]],["vec",3]],[[["range",3],["usize",15]],["usize",15]],[[["u32",15]],[["range",3],["usize",15]]],null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalar",6]],[[],["scalar",6]],[[],["scalar",6]],null,null,[[],["bool",15]],[[],["scalar",6]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["textdecoration",3]]],[[]],[[],["bool",15]],[[["textdecoration",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["scalar",6]]],[[],["scalar",6]],null,[[],["usize",15]],null,[[],["scalar",6]],[[]],[[],["scalar",6]],[[],[["option",4],["usize",15]]],[[],["scalar",6]],[[],["scalar",6]],null,[[],["str",15]],[[["textbox",3]],["bool",15]],[[["textdecoration",3]],["bool",15]],[[["decoration",3]],["bool",15]],[[["block",3]],["bool",15]],[[["placeholder",3]],["bool",15]],[[]],[[["paragraphstyle",6]]],[[],["paragraphcache",6]],[[]],[[]],[[]],[[]],[[["textstyle",6]]],[[["f64",15]]],[[["scalar",6],["textbaseline",4],["placeholderalignment",4]]],[[["textstyle",6],["textrange",6]]],[[["textstyle",6],["blockrange",6],["placeholderstyle",3],["range",3],["usize",15],["textrange",6]]],[[],["textdecoration",3]],null,[[["canvas",3]]],[[],["paragraphcache",6]],[[],["paragraphcache",6]],[[["textdecoration",3]],[["ordering",4],["option",4]]],[[],["textstyle",6]],[[]],null,[[]],[[["textstyle",6]]],null,null,null,[[["option",4],["typeface",6]],["usize",15]],[[["textdecoration",3]]],[[]],[[["bool",15],["textdecoration",3]]],[[]],[[]],[[]],[[["drawoptions",4]]],[[]],[[]],[[]],[[["scalar",6]]],[[["fontstyle",3]]],[[["bool",15]]],[[["scalar",6]]],[[["scalar",6]]],[[["scalar",6]]],[[]],[[["paragraphstyle",6]]],[[["bool",15]]],[[["strutstyle",6]]],[[]],[[["textalign",4]]],[[["textdirection",4]]],[[["textheightbehavior",4]]],[[["textstyle",6]]],[[["usize",15]]],null,[[],["bool",15]],[[],["strutstyle",6]],null,null,null,[[["textdecoration",3]],["textdecoration",3]],[[["textdecoration",3]]],[[],["textalign",4]],null,[[],["textdirection",4]],[[],["textheightbehavior",4]],[[],["textstyle",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["textdecoration",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["bool",15]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["sktrimpatheffect_mode",4]],[[]],[[["sktrimpatheffect_mode",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["scalar",6]],[["option",4],["patheffect",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["localizedstring",3]],[[],["sktypeface_serializebehavior",4]],[[]],[[]],[[["fontarguments",3]],[["option",4],["typeface",6]]],[[["fonttabletag",6]],[["option",4],["data",6]]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["typeface",6]]],[[["localizedstring",3]],["bool",15]],[[["sktypeface_serializebehavior",4]],["bool",15]],[[],["bool",15]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[],["fontstyle",3]],[[]],[[]],[[],[["option",4],["typeface",6]]],[[["fontstyle",3]],[["option",4],["typeface",6]]],[[],["bool",15]],[[["fonttabletag",6]],["usize",15]],[[["fonttabletag",6]],[["option",4],["usize",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["localizedstring",3]],["bool",15]],[[["fontstyle",3]],["option",4]],[[]],[[],[["string",3],["option",4]]],[[["serializebehavior",4]],["data",6]],null,[[],[["option",4],["vec",3]]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["unichar",6]],["glyphid",6]],[[]],[[],["fontid",6]],[[],[["option",4],["i32",15]]],[[],[["option",4],["vec",3]]],[[],[["vec",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["patch3d",3]],[[],["camera3d",3]],[[]],[[]],[[]],[[]],[[],[["option",4],["typeface",6]]],[[],["scalar",6]],[[["patch3d",3]],["bool",15]],[[["camera3d",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["path",6]]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[["patch3d",3]],["bool",15]],[[["camera3d",3]],["bool",15]],[[]],[[],["ownedcanvas",3]],null,null,null,[[["patch3d",3]],["matrix",3]],[[]],[[]],[[["fontstyle",3]]],[[["glyphid",6],["f32",15]]],[[["fontmetrics",3]]],null,null,[[]],[[]],[[["m44",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["timetot",3]],[[],["skinterpolatorbase_result",4]],[[]],[[]],[[],["option",4]],[[],["usize",15]],[[["timetot",3]],["bool",15]],[[["skinterpolatorbase_result",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],null,[[]],[[]],[[["timetot",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["duration",3]],["bool",15]],[[["bool",15]]],[[["scalar",6]]],[[["bool",15]]],null,[[["duration",3]]],[[["duration",3]],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["scalar",6]],["scalar",6]],[[],[["option",4],["path",6]]],[[["path",6]],["string",3]],null,null,null,null,[[],["shadowflags",3]],[[["shadowflags",3]],["shadowflags",3]],[[["shadowflags",3]]],[[["shadowflags",3]],["shadowflags",3]],[[["shadowflags",3]]],[[],["u32",15]],[[["shadowflags",3]],["shadowflags",3]],[[["shadowflags",3]]],[[]],[[]],[[],["shadowflags",3]],[[]],[[["shadowflags",3]],["ordering",4]],[[]],[[["shadowflags",3]],["bool",15]],[[["canvas",3],["path",6],["scalar",6]]],[[],["shadowflags",3]],[[["shadowflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],[["shadowflags",3],["option",4]]],[[["u32",15]],["shadowflags",3]],[[["u32",15]],["shadowflags",3]],[[["intoiterator",8]],["shadowflags",3]],[[]],[[["shadowflags",3]]],[[["shadowflags",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["matrix",3],["scalar",6],["path",6],["u32",15]],[["option",4],["rect",3]]],[[["shadowflags",3]],["bool",15]],[[],["shadowflags",3]],[[["shadowflags",3]],[["ordering",4],["option",4]]],[[["shadowflags",3]]],[[["shadowflags",3],["bool",15]]],[[["shadowflags",3]],["shadowflags",3]],[[["shadowflags",3]]],[[]],[[["shadowflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[],["sktextutils_align",4]],[[]],[[["canvas",3],["font",6],["align",4],["paint",6]]],[[["sktextutils_align",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["font",6]],["path",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["builderflags",3]],[[]],[[],["usize",15]],[[["builderflags",3]],["builderflags",3]],[[["builderflags",3]]],[[["builderflags",3]],["builderflags",3]],[[["builderflags",3]]],[[],["u32",15]],[[["builderflags",3]],["builderflags",3]],[[["builderflags",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["usize",15]],[[],["usize",15]],[[],["bone",3]],[[],["attributetype",4]],[[],["attribute",3]],[[],["builderflags",3]],[[],["skvertices_vertexmode",4]],[[],["skvertices_attribute_usage",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builderflags",3]],["ordering",4]],[[],["option",4]],[[],["option",4]],[[["builderflags",3]],["bool",15]],[[]],[[]],[[],["vertices",6]],[[],["builderflags",3]],[[]],[[["bone",3]],["bool",15]],[[["attributetype",4]],["bool",15]],[[],["bool",15]],[[["builderflags",3]],["bool",15]],[[["skvertices_vertexmode",4]],["bool",15]],[[["skvertices_attribute_usage",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["option",4],["builderflags",3]]],[[["u32",15]],["builderflags",3]],[[["u32",15]],["builderflags",3]],[[["intoiterator",8]],["builderflags",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["builderflags",3]]],[[["builderflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],[["option",4],["cstr",3]]],[[],["vertexmode",4]],[[["bone",3]],["bool",15]],[[["builderflags",3]],["bool",15]],[[["usize",15],["vertexmode",4],["builderflags",3]],["builder",6]],[[["attributetype",4]]],[[["option",4],["vertexmode",4]],["vertices",6]],[[["attributetype",4]],["attribute",3]],[[],["builderflags",3]],[[["builderflags",3]],[["ordering",4],["option",4]]],[[]],[[]],[[["builderflags",3]]],[[["bool",15],["builderflags",3]]],[[["builderflags",3]],["builderflags",3]],[[["builderflags",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builderflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[]],[[]],null,[[],["usize",15]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["subsampling",4]],[[],["skyuvainfo_siting",4]],[[]],[[]],[[["option",4]],["usize",15]],[[],["isize",3]],[[["subsampling",4]],["bool",15]],[[["skyuvainfo_siting",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[["planeconfig",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[["subsampling",4],["yuvcolorspace",4],["planeconfig",4]],["option",4]],[[["usize",15],["planeconfig",4]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["planeconfig",4]],["usize",15]],[[],["usize",15]],[[],["encodedorigin",4]],[[],["matrix",3]],[[],["planeconfig",4]],[[["subsampling",4],["encodedorigin",4],["planeconfig",4]],[["isize",3],["vec",3]]],[[],[["isize",3],["vec",3]]],[[["subsampling",4],["usize",15],["planeconfig",4]]],[[["usize",15]]],[[]],[[],["subsampling",4]],[[["subsampling",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["i32",15]],[[],["option",4]],[[["subsampling",4]],["option",4]],[[]],[[],["yuvcolorspace",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["skyuvainfo_planeconfig",4]],[[],["skyuvapixmapinfo_datatype",4]],[[]],[[]],[[["datatype",4],["usize",15]],["colortype",4]],[[["skyuvainfo_planeconfig",4]],["bool",15]],[[["skyuvapixmapinfo_datatype",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["colortype",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["yuvapixmapinfo",6]],["option",4]],[[["option",4]],["usize",15]],[[],["datatype",4]],[[],["datatype",4]],[[["yuvapixmapinfo",6]],["option",4]],[[["yuvainfo",6],["datatype",4],["option",4]],["option",4]],[[["yuvapixmapinfo",6]],["option",4]],[[["yuvainfo",6]],["option",4]],[[],["option",4]],[[["supporteddatatypes",6]],["bool",15]],[[["yuvainfo",6],["option",4]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["yuvapixmapinfo",6]],[[["usize",15]],["pixmap",6]],[[["usize",15]],[["option",4],["imageinfo",6]]],[[]],[[]],[[["datatype",4]],["colortype",4]],[[["usize",15]],[["option",4],["usize",15]]],[[]],[[],["yuvcolorspace",4]],[[],["yuvainfo",6]],[[],["yuvainfo",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["datatype",4],["usize",15]],["colortype",4]],[[["datatype",4],["usize",15]]],[[["recordingcontext",6]]],[[["colortype",4]]],[[["datatype",4],["planeconfig",4]],["bool",15]]],"p":[[3,"XYZD50Hash"],[4,"ColorChannel"],[4,"ColorType"],[3,"ColorChannelFlag"],[4,"EncodedImageFormat"],[4,"PixelGeometry"],[3,"Color"],[4,"YUVColorSpace"],[4,"PaintJoin"],[4,"EncodedOrigin"],[4,"PaintCap"],[4,"PathDirection"],[4,"TileMode"],[4,"BlendMode"],[4,"PathVerb"],[4,"BlendModeCoeff"],[4,"CodecResult"],[3,"Handle"],[4,"ClipOp"],[4,"CoverageMode"],[4,"PathOp"],[4,"PathFillType"],[4,"PaintStyle"],[4,"FontHinting"],[4,"TextEncoding"],[8,"Scalar"],[4,"FilterQuality"],[4,"BlurStyle"],[4,"FilterMode"],[4,"MipmapMode"],[4,"AlphaType"],[3,"RCHandle"],[3,"Budgeted"],[3,"SurfacePropsFlags"],[3,"FourByteTag"],[3,"Color4f"],[3,"ColorSpaceTransferFn"],[6,"OpBuilder"],[3,"V2"],[3,"V3"],[3,"V4"],[3,"IVector"],[3,"Point"],[3,"Point3"],[6,"PathBuilder"],[3,"RefHandle"],[6,"Pixmap"],[3,"IRect"],[6,"Bitmap"],[6,"TextBlobBuilder"],[6,"ColorInfo"],[6,"ImageInfo"],[6,"Picture"],[8,"Scalars"],[3,"ISize"],[6,"Data"],[6,"TextBoxes"],[6,"LineMetricsVector"],[3,"Rect"],[3,"Borrows"],[3,"FontMetrics"],[6,"DataTable"],[3,"RGB"],[3,"CubicResampler"],[6,"SurfaceCharacterization"],[6,"MaskFilter"],[3,"TextBlobRun"],[3,"Sendable"],[3,"HSV"],[3,"ColorSpacePrimaries"],[3,"CubicMap"],[3,"Iter"],[3,"M44"],[3,"RSXform"],[3,"Size"],[3,"SurfaceProps"],[3,"DateTime"],[6,"TextBlob"],[8,"ConditionallySend"],[6,"DeferredDisplayListRecorder"],[6,"ParagraphStyle"],[8,"Contains"],[6,"Region"],[3,"HighContrastConfig"],[6,"FontStyleSet"],[6,"FontMgr"],[3,"SamplingOptions"],[6,"Font"],[6,"PathMeasure"],[6,"Shader"],[6,"Typeface"],[6,"YUVAInfo"],[6,"SupportedDataTypes"],[6,"AttributeList"],[6,"ColorMatrix"],[6,"BackendSurfaceMutableState"],[6,"StrutStyle"],[6,"TypefaceFontProvider"],[6,"Shaper"],[6,"View3D"],[6,"Interpolator"],[6,"DirectContext"],[6,"TypefaceFontStyleSet"],[8,"Flattenable"],[6,"ColorSpace"],[6,"PixelRef"],[6,"ImageGenerator"],[6,"FontFeature"],[6,"Codec"],[6,"ColorFilter"],[6,"ContourMeasure"],[6,"ContourMeasureIter"],[6,"DeferredDisplayList"],[6,"Drawable"],[6,"GPUDrawHandler"],[6,"Image"],[6,"ImageFilter"],[6,"Paint"],[6,"Path"],[6,"PathEffect"],[6,"PictureRecorder"],[6,"StrokeRec"],[6,"Surface"],[6,"LocalizedStringsIter"],[6,"Vertices"],[6,"Builder"],[6,"YUVAPixmapInfo"],[6,"YUVAPixmaps"],[6,"Uniform"],[6,"Varying"],[6,"RuntimeEffect"],[6,"BackendDrawableInfo"],[6,"BackendFormat"],[6,"BackendTexture"],[6,"BackendRenderTarget"],[6,"Alloc"],[6,"MemoryAllocator"],[6,"Extensions"],[6,"Interface"],[6,"RecordingContext"],[6,"YUVABackendTextureInfo"],[6,"YUVABackendTextures"],[6,"FontCollection"],[6,"Paragraph"],[6,"ParagraphBuilder"],[6,"ParagraphCache"],[6,"TextStyle"],[6,"FontRunIterator"],[6,"BiDiRunIterator"],[6,"ScriptRunIterator"],[6,"LanguageRunIterator"],[6,"CustomTypefaceBuilder"],[6,"Instance"],[6,"PhysicalDevice"],[6,"Device"],[6,"Queue"],[6,"CommandBuffer"],[6,"DeviceMemory"],[6,"Buffer"],[6,"Image"],[6,"RenderPass"],[8,"Pixel"],[3,"FilterOptions"],[6,"scalar"],[8,"NativeFlattenable"],[8,"QuickReject"],[8,"RoundOut"],[3,"SaveLayerFlags"],[4,"SrcRectConstraint"],[4,"PointMode"],[3,"Canvas"],[3,"OwnedCanvas"],[3,"SaveLayerRec"],[4,"AutoCanvasRestore"],[3,"TopLayerPixels"],[3,"AutoRestoredCanvas"],[3,"Lattice"],[8,"SetMatrix"],[4,"RectType"],[4,"ScanlineOrder"],[4,"ZeroInitialized"],[4,"SelectionPolicy"],[3,"Options"],[3,"MatrixFlags"],[3,"Document"],[3,"OnPage"],[3,"Open"],[4,"Edging"],[3,"FontArguments"],[3,"VariationPosition"],[3,"Coordinate"],[3,"Flags"],[3,"Axis"],[3,"Weight"],[3,"Width"],[4,"Slant"],[3,"FontStyle"],[4,"SurfaceOrigin"],[4,"BackendAPI"],[4,"MipMapped"],[4,"Renderable"],[4,"Protected"],[4,"SemaphoresSubmitted"],[3,"DriverBugWorkarounds"],[3,"DirectContextId"],[3,"ResourceCacheLimits"],[3,"ResourceCacheUsage"],[3,"FlushInfo"],[4,"ShaderCacheStrategy"],[4,"Enable"],[3,"ContextOptions"],[3,"ID3D12CommandQueue"],[3,"ID3D12Device"],[3,"ID3D12Resource"],[3,"IDXGIAdapter1"],[3,"BackendContext"],[3,"TextureResourceInfo"],[3,"cp"],[3,"FenceInfo"],[4,"Format"],[3,"BackendState"],[4,"Standard"],[3,"TextureInfo"],[3,"FramebufferInfo"],[4,"Format"],[4,"ImageTiling"],[4,"SharingMode"],[4,"ImageLayout"],[4,"Filter"],[4,"SamplerYcbcrModelConversion"],[4,"SamplerYcbcrRange"],[4,"ChromaLocation"],[3,"FeatureFlags"],[4,"GetProcOf"],[3,"ExtensionFlags"],[3,"AllocFlag"],[3,"PhysicalDeviceFeatures"],[3,"PhysicalDeviceFeatures2"],[3,"ImageInfo"],[3,"Alloc"],[3,"BackendContext"],[3,"YcbcrConversionInfo"],[3,"DrawableInfo"],[3,"NullHandle"],[3,"Version"],[3,"Offset2D"],[3,"Extent2D"],[3,"Rect2D"],[4,"GradientShaderColors"],[3,"Flags"],[4,"InvertStyle"],[4,"CachingHint"],[4,"CompressionType"],[4,"BitDepth"],[4,"MapDirection"],[3,"CropRect"],[4,"Dither"],[3,"ArithmeticFPInputs"],[3,"TypeMask"],[4,"ScaleToFit"],[4,"ApplyPerspectiveClip"],[4,"Member"],[4,"AffineMember"],[3,"Matrix"],[3,"TypeMask"],[3,"Matrix44"],[3,"Vector4"],[8,"Map2"],[8,"MapScalars"],[8,"SetPrePostScale"],[4,"AddPathMode"],[3,"SegmentMask"],[4,"Verb"],[4,"ArcSize"],[3,"Iter"],[3,"RawIter"],[4,"Style"],[3,"PointData"],[3,"DashInfo"],[3,"PointFlags"],[3,"MatrixFlags"],[4,"DocumentStructureType"],[3,"StructureElementNode"],[3,"Metadata"],[4,"RegionOp"],[3,"Iterator"],[3,"Cliperator"],[3,"Spanerator"],[8,"Combine"],[8,"Intersects"],[4,"Type"],[4,"Corner"],[3,"RRect"],[3,"Options"],[3,"Flags"],[4,"Type"],[4,"MediumBehavior"],[4,"GradientType"],[4,"GradientTypeInternal"],[3,"GradientInfo"],[8,"AsRunHandler"],[8,"AsNativeRunHandler"],[3,"TextBlobBuilderRunHandler"],[8,"RunIterator"],[8,"RunHandler"],[3,"Feature"],[3,"RunInfo"],[3,"Buffer"],[4,"InitStyle"],[4,"Style"],[4,"ContentChangeMode"],[4,"BackendHandleAccess"],[4,"BackendSurfaceAccess"],[3,"Flags"],[3,"Canvas"],[3,"TextDecoration"],[4,"PlaceholderAlignment"],[4,"TextHeightBehavior"],[4,"StyleType"],[4,"TextBaseline"],[4,"TextAlign"],[4,"TextDecorationStyle"],[4,"DrawOptions"],[4,"Affinity"],[4,"TextDecorationMode"],[4,"RectHeightStyle"],[4,"TextDirection"],[4,"RectWidthStyle"],[3,"Block"],[3,"PositionWithAffinity"],[3,"PlaceholderStyle"],[3,"LineMetrics"],[3,"Placeholder"],[3,"TextShadow"],[3,"TextBox"],[3,"StyleMetrics"],[3,"Decoration"],[3,"FontFamilies"],[8,"RangeExtensions"],[4,"Mode"],[4,"SerializeBehavior"],[3,"LocalizedString"],[4,"TypefaceGlyph"],[3,"Camera3D"],[3,"Patch3D"],[13,"Image"],[4,"Result"],[3,"TimeToT"],[3,"ShadowFlags"],[4,"Align"],[4,"AttributeType"],[4,"AttributeUsage"],[3,"BuilderFlags"],[4,"VertexMode"],[3,"Bone"],[3,"Attribute"],[8,"PointerWrapper"],[8,"ValueWrapper"],[8,"NativeTransmutableWrapper"],[8,"RefWrapper"],[4,"Siting"],[4,"Subsampling"],[4,"PlaneConfig"],[4,"DataType"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};