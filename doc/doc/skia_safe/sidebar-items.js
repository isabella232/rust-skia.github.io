initSidebarItems({"constant":[["EMPTY_IRECT",""],["MILESTONE",""]],"enum":[["AlphaType",""],["AutoCanvasRestore",""],["BlendMode",""],["BlendModeCoeff",""],["BlurStyle",""],["ClipOp",""],["CodecResult",""],["ColorChannel",""],["ColorType",""],["CoverageMode",""],["EncodedImageFormat",""],["EncodedOrigin",""],["FilterQuality",""],["FontHinting",""],["MipmapMode",""],["MipmapMode",""],["PaintCap",""],["PaintJoin",""],["PaintStyle",""],["PathDirection",""],["PathFillType",""],["PathOp",""],["PathVerb",""],["PixelGeometry",""],["SamplingMode",""],["SamplingMode",""],["TextEncoding",""],["TileMode",""],["YUVColorSpace",""]],"fn":[["as_winding",""],["op",""],["pre_multiply_argb",""],["pre_multiply_color",""],["radians_to_degrees",""],["simplify",""],["swap_rb",""],["swap_rb_inplace",""],["test_surface_props_layout",""],["tight_bounds",""]],"mod":[["alpha_threshold_filter",""],["annotate",""],["arithmetic_image_filter",""],["blur_draw_looper",""],["blur_image_filter",""],["canvas",""],["codec",""],["color_filter",""],["color_filter_image_filter",""],["color_filters",""],["color_matrix",""],["color_matrix_filter",""],["colors",""],["compose_image_filter",""],["contour_measure",""],["corner_path_effect",""],["dash_path_effect",""],["discrete_path_effect",""],["displacement_map_effect",""],["document",""],["draw_looper",""],["drawable",""],["drop_shadow_image_filter",""],["encode",""],["font",""],["font_arguments",""],["font_metrics",""],["font_parameters",""],["font_style",""],["gpu",""],["gradient_shader",""],["graphics",""],["high_contrast_config",""],["high_contrast_filter",""],["icu",""],["image",""],["image_filter",""],["image_filters",""],["image_source",""],["layer_draw_looper",""],["lighting_image_filter",""],["line_2d_path_effect",""],["luma_color_filter",""],["magnifier_image_filter",""],["matrix",""],["matrix44",""],["matrix_convolution_image_filter",""],["matrix_path_effect",""],["merge_image_filter",""],["merge_path_effect",""],["named_transfer_fn",""],["offset_image_filter",""],["overdraw_color_filter",""],["paint",""],["paint_image_filter",""],["path",""],["path_1d_path_effect",""],["path_2d_path_effect",""],["path_effect",""],["path_measure",""],["path_types",""],["pdf",""],["perlin_noise_shader",""],["picture_image_filter",""],["picture_recorder",""],["private",""],["region",""],["rrect",""],["runtime_effect",""],["shader",""],["shader_mask_filter",""],["shaders",""],["shaper",""],["stroke_and_fill_path_effect",""],["stroke_path_effect",""],["stroke_rec",""],["surface",""],["svg",""],["table_color_filter",""],["table_mask_filter",""],["textlayout",""],["tile_image_filter",""],["trim_path_effect",""],["typeface",""],["utils",""],["vertices",""],["wrapper",""],["xfer_mode_image_filter",""],["yuva_index",""],["yuva_info",""],["yuva_pixmap_info",""],["yuva_pixmaps",""]],"struct":[["Borrows",""],["Budgeted",""],["Canvas","The canvas type that is returned when it is owned by another instance, like Surface, for example. For these cases, the Canvas' reference that is returned is bound to the lifetime of the owner."],["Color",""],["Color4f",""],["ColorChannelFlag",""],["ColorSpacePrimaries",""],["ColorSpaceTransferFn",""],["CubicMap",""],["CubicResampler","Specify B and C (each between 0...1) to create a shader that applies the corresponding cubic reconstruction filter to the image."],["DateTime",""],["Document",""],["FilterOptions",""],["FilterOptions",""],["FontArguments",""],["FontMetrics",""],["FontStyle",""],["FourByteTag",""],["HSV",""],["Handle","Wraps a native type that can be represented and used in Rust memory."],["HighContrastConfig",""],["IPoint",""],["IRect",""],["ISize",""],["IVector",""],["Iter",""],["M44",""],["Matrix",""],["Matrix44",""],["OwnedCanvas","A type representing a canvas that is owned and dropped when it goes out of scope and is bound to the lifetime of another instance. Function resolvement is done via the Deref trait."],["PathSegmentMask",""],["Point",""],["Point3",""],["RCHandle","A wrapper type represented by a reference counted pointer to the native type."],["RGB",""],["RRect",""],["RSXform",""],["Rect",""],["RefHandle","A wrapper type that represents a native type with a pointer to the native object."],["SamplingOptions",""],["Sendable",""],["Size",""],["SurfaceProps",""],["SurfacePropsFlags",""],["TextBlobRun",""],["V2",""],["V3",""],["V4",""],["Vector4",""],["XYZD50Hash",""],["YUVAIndex",""],["YUVASizeInfo",""]],"trait":[["ConditionallySend",""],["Contains",""],["Flattenable",""],["NativeFlattenable",""],["QuickReject",""],["RoundOut",""],["Scalar",""],["Scalars",""]],"type":[["BBHFactory",""],["BBoxHierarchy",""],["Bitmap",""],["Codec",""],["Color3f",""],["ColorFilter",""],["ColorInfo",""],["ColorMatrix",""],["ColorSpace",""],["ContourMeasure",""],["ContourMeasureIter",""],["Data",""],["DataTable",""],["DeferredDisplayList",""],["DeferredDisplayListRecorder",""],["DrawLooper",""],["Drawable",""],["Font",""],["FontMgr",""],["FontStyleSet",""],["GlyphId",""],["Image",""],["ImageFilter",""],["ImageGenerator",""],["ImageInfo",""],["MaskFilter",""],["OpBuilder",""],["PMColor",""],["Paint",""],["Path",""],["PathBuilder",""],["PathEffect",""],["PathMeasure",""],["Picture",""],["PictureRecorder",""],["PixelRef",""],["Pixmap",""],["Region",""],["RuntimeEffect",""],["Shader",""],["Shaper",""],["StrokeRec",""],["Surface",""],["SurfaceCharacterization",""],["TextBlob",""],["TextBlobBuilder",""],["TextBlobIter",""],["Typeface",""],["Unichar",""],["Vector",""],["Vector3",""],["Vertices",""],["YUVAInfo","Specifies the structure of planes for a YUV image with optional alpha. The actual planar data is not part of this structure and depending on usage is in external textures or pixmaps."],["YUVAPixmapInfo","[YUVAInfo] combined with per-plane [ColorType]s and row bytes. Fully specifies the [Pixmap]`s for a YUVA image without the actual pixel memory and data."],["YUVAPixmaps","Helper to store [Pixmap] planes as described by a [YUVAPixmapInfo]. Can be responsible for allocating/freeing memory for pixmaps or use external memory."],["scalar",""]]});