var searchIndex = JSON.parse('{\
"skia_safe":{"doc":"","t":"NNNSSNNNNEENGGNNNNNNNNSSSNSNNNNNNNGEEGEDGNNSNSDNNENCENDNGDNEDNGGGGDDGEINIGGNENDDNSSNNSNGGDNSSNNNNDGNNNNNRSNECINNNSNEDIGDEDGDGDNNNSSSSSGNNSNDDNDNNNNDDNNDDNGGGGNNNNNNNNNNNNDNSNNNSSSSSSSSSSSSSSSNNNNNNDSSSSSSSRGDSENNNNNSSINNNNNNNNSNGNNNDNGNGEEEGGEGEGEDEGGIEGDNDDNNINNNNNNDSSSDSNNNSNNNNNNNNDDSNSNNDDGNNNNNIGNNNGDNIINDGGDNNNNNNNNNNNGNGDDSGGGDEEEGSNNNGNNNNNNNDDDGGGNNSNNDNNSGGGESNLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLFFLFLMLLLLLLLLLMLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMLKLALLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLACLLLLLALLLALLAALLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLALLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLALLLLLLLLLLLLALLLLLLLLLLLLLMLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLALLLLLLALALLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLAAAMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLAALLMALLLALALALLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLMLLMMLLLLLLLLLLLLLLLLLLALLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLALLLMMLLLLLLLLLLLLLLLMMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALKKOKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLAALLLLLALALAALAAAALLLLLLALALLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLFFLLLLLALLLLLLLLLLLLLKLLLMMLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLKLLLLLLLLLLLLLLLALLAMLMALGLLLLLLLLMMLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALAALLLLLALLLLLLLLFLLLLLLLLLLLLLLLLLLLLMLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAALLLLFFLLLLALLLLLLLLLLLALLLLLLFLLAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLALLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLAMLLLLLOLLLALLLLMALLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLALLLLLLLLMMMMMMMMMMMMMLLMMMMMMMMMMMLLLLALLLLAAMMMMMFFFFEDDSNESDNDSENNNNDDIENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMLLLMLLLLLLLMLLLLLLLMLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNNDENLLLLMLLMLLLLLLLLLLMLLLLLLLMMNNNNNNDNSNEENDNNNNNNNNNNNNSNNNDNNNNENNEENNNNNNNNEMMALLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLAMLLLLALLLLLLLLLLLLLALLLAAMLMMFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLMFFGGNNNNNGLLLLFFFFFFFFFFFFFFGALLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFGLLLLLLLLLLLLLLLFRRRRRRRRRRRRGGSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFDLLLLLLLLLLLLALLLDDLLLLLLLLLLLLLLLLGGLLLLLLALLLGLLFFFNNEGNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLMLLLLLLLLMLLLLLLMALLLLLLLLLLLLLLLLLALDLLLLMLLLLLMLLLLLLLLLDMLLLLLLLLLLLLLLLLMLSDDSSSSLLMMLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMDMMMMADLLLLMLLLLLLLLMMLLMLLLLLLSSSSSSSSSDSNSSSSNSSSESSSNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEEGGGGNNDGCNNGDDDSNNENNGSNNNNNSNSEEEGEDDNEEENNNNNNSGGNNNNNSLLMLLLLLLLLLLLLLLAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLAMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLMLLLMMLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLALLLLLLLLLLLFFFFFFFFFFFFFFFFFFNNDNENENNMMMMMLLLLLLMLLLLLMMMMMMMMLLLLLLLLLLMMLLLLMLLLMMMMLMMMMMMMMMLLLLLLLLLLLLMLFFNNSDNNNNNGGSEDNNGNNNSSSSNSSNNNSNNNNNNNNNNNNSNNEDSDGNSSNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMLLLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFGGGGDGGLLLLLLLLLLLMLLLLMLLMMMLLLLLLMLFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDNNSNSNSNNNNNNNNNNNSNNNNNNNNNNNNNNNNNNNNNNNDGGNNNSSNEGNNNNNNSNSNSNSNNNSGNGGDNNNNNNNNNNNNSDDNNDEGEGNSNSNSNNSNSNSNSNSNSNNSNSNSNSNSNSNNSNSNSNSNSNSNNSNSNSNSIEGGNSNSGDEEGGNSSSSSSNNSNNNNNNNNNSNSRSDNDNNNNNNNNNNGDDRGNSNSNSNSNSNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSDGNSNSNNSNSEEEDNNNNDNNSNSNSNSDMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLALLLLLLLLLLMMLLLLLMMLLLMMMLLLLLMMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMMMMMMMMFFFNNDESDLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLALLLLLLLLLLLLLLLLLLFFLLFFLLLLLLFFLLLLLLLLLLLLFFLLLLLLLGNNNNGGNNNNNNNNNNNFFFFFFFFFFFFFFFFNNESNLLLLLLLLLLLLLLDLLLLMLLLLMALLLMLFLLLLLLLNNENFNNNEEEDNNNGNNLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNFFFFFFFNGENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDESNNFFFLLLLLLLLLLLLFFFLFFFFFFFMLLLLFLLLLLLLLLLLLLLFLLLMFFFFLFFFFLFFFFFLLLLLLLLLLLLENNLLLLFFFLLLLLLFFFFLLLLGNNENNNDMLLLLLLLLLMFFLLLLLLLLLLLMLLLLLLLLMFFSEENNNRSDENSNNNSENNNNNNNNNSNNNNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRFNNENENGNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENENSSNNNNENNNENNDSNNSNGSNDDNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSNNENLLLLLLLLLLFLLLLFDGLLLLLLLLLLLLLLLLMLLLLLMLLLLLLSSSDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNEEDENNFGNGDNNNDNDLLLLLLLMLLLLLLLLLMMMMMLLLLMLLLLLLLLLLMLLLLLMLMMMLFLMMMMLLLLLMMMMLLLLLLLLLLLLLMFFGLLLLLLSSDDSDSSSSLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLFFLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMDINNIDSGENNDNNLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENSNNNNDNSNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNGEENNDGNNGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLSSSDNNNNNNNSNNNNESLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNENNNNGDMLLLLMLLLLMLLLLMLLLLLLLLLLLLLLMMMLMLLLLLLLLLMLDGLLLLLMMLLLLLLMLLLLLLLLALLMLLLLLLLLLLFFFFFFFFFFFFFIIGDGGIQIGGDKLKLKKLLLLLLKKKKLLLLLMKLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLKAKLLLLMMLLLLLLLMFDIDMKMLLLLMKKKLLMLLMMLLLMMMKKLLLLLLMNNNNENNGELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEEENNSNSNSNNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLENNFFFFENNLLLLLLLLLLFFFLLLLFCGDLLALLLLLLLLLLLLLLLLLLLLLLLSDDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFSRNENNNNNNDGGNNNDNNNNNNNRRRRRNNGGDGNNNNNNNSNNNDNNNSNSGGGGDEDDNIEENNNNNGDEEEDDEEEEGGDGNNNNGGSNNNLLLLLLMLMLLLMLMMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLKLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLMLLLLLLLLLLLLLLLMALLLLLMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMMMLLMMMLLLLLMLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLKMMLLLLLLLLLLLGDDDGDGSLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLRFFFNENLLLLLLLLLLFLLLLNNGGNDGEGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLDGNSGDNEGLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFMMALLLLLLAALLLLLLLLLLLLMLLLMLLMNENLLLLLLLLLFLLLFFLLLSSSSDSLLLLLLLLLLLLLLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLENNNLLLLFFLLLLFLLLLLLDGGGDSSSSNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDLLLLMLFFLLLLMLLLLIIIIKKKKKKKKKKKKKKKKNSENNNNNNEENNNNNNGNNNNNNNNLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLFLFLLLLFLFLLLFLLLLLLLLLLLLLLENSSENNNNNNEGNNNNNNNNNNNNNNNNNLLLLLLLLFLLLLLLLLLLLLFLLLLLLLLSENSSNNNGGLLLLLLLLLLLLLLLLLLLLLLLLLLAENENNNNNNEGNNNNNNNNNNNNNNNNNLLFLLFL","n":["A","A16Float","A16UNorm","ALPHA","ALWAYS_DITHER","ARGB4444","ASTC","AVIF","Alpha8","AlphaType","AutoCanvasRestore","B","BBHFactory","BBoxHierarchy","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BGR101010x","BGR101010xXR","BGRA1010102","BGRA8888","BGRH","BGRV","BLACK","BLUE","BLUE","BMP","BT2020","BT2020_10bit_Full","BT2020_10bit_Limited","BT2020_12bit_Full","BT2020_12bit_Limited","BT2020_8bit_Full","BT2020_8bit_Limited","Bevel","Bitmap","BlendMode","BlendModeCoeff","Blender","BlurStyle","Borrows","Budgeted","Butt","CCW","COUNT","CW","CYAN","Canvas","Clamp","Clear","ClipOp","Close","Codec","CodecResult","CoeffCount","Color","Color","Color3f","Color4f","ColorBurn","ColorChannel","ColorChannelFlag","ColorDodge","ColorFilter","ColorInfo","ColorMatrix","ColorSpace","ColorSpacePrimaries","ColorSpaceTransferFn","ColorTable","ColorType","ConditionallySend","Conic","Contains","ContourMeasure","ContourMeasureIter","CouldNotRewind","CoverageMode","Cubic","CubicMap","CubicResampler","DA","DARK_GRAY","DATA_TYPE_CNT","DC","DNG","DYNAMIC_MSAA","Darken","Data","DataTable","DateTime","Decal","Default","Default","Difference","Difference","Difference","Difference","Document","Drawable","Dst","DstATop","DstIn","DstOut","DstOver","EMPTY_IRECT","ETC1_RGB8","ETC2_RGB8_UNORM","EncodedImageFormat","EncodedOrigin","EncodedText","ErrorInInput","EvenOdd","Exclusion","FACTORY_ID","Fill","FilterMode","FilterOptions","Flattenable","Font","FontArguments","FontHinting","FontMetrics","FontMgr","FontStyle","FontStyleSet","FourByteTag","Full","G","GIF","GRAY","GRAY","GRAY_ALPHA","GREEN","GREEN","GlyphId","GlyphId","Gray8","HALF","HEIF","HSV","Handle","HardLight","HighContrastConfig","Hue","ICO","IDA","IDC","IPoint","IRect","ISA","ISC","ISize","IVector","Identity","Image","ImageFilter","ImageGenerator","ImageInfo","IncompleteInput","Inner","InternalError","Intersect","Intersect","Intersect","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","InverseEvenOdd","InverseWinding","Iter","JPEG","JPEG","JPEGXL","JPEG_Full","KTX","LIGHT_GRAY","Last","Last","Last","Last","Last","Last","LastCoeffMode","LastEnum","LastEnum","LastEnum","LastEnum","LastMode","LastSeparableMode","LastTileMode","Lighten","Line","Linear","Linear","Linear","Luminosity","M44","MAGENTA","MAX_CUSTOM_ATTRIBUTES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_POINTS","MILESTONE","MaskFilter","Matrix","Max_EnumValue","MipmapMode","Mirror","Miter","Modulate","Move","Multiply","N32","NEARLY_ZERO","NativeFlattenable","Nearest","Nearest","Nearest","None","None","None","Normal","Normal","ONE","One","OpBuilder","Opaque","Outer","Overlay","OwnedCanvas","PKM","PMColor","PNG","Paint","PaintCap","PaintJoin","PaintStyle","Path","PathBuilder","PathDirection","PathEffect","PathFillType","PathMeasure","PathOp","PathSegmentMask","PathVerb","Picture","PictureRecorder","Pixel","PixelGeometry","PixelRef","Pixmap","Plus","Point","Point3","Premul","Quad","QuickReject","R","R16G16B16A16UNorm","R16G16Float","R16G16UNorm","R8G8UNorm","R8UNorm","RCHandle","RED","RED","RG","RGB","RGB","RGB101010x","RGB565","RGB888x","RGBA","RGBA1010102","RGBA10x6","RGBA8888","RGBAF16","RGBAF16Norm","RGBAF32","RGBH","RGBV","RRect","RSXform","Rec601","Rec601_Limited","Rec709","Rec709_Full","Rec709_Limited","Rect","RefHandle","Region","Repeat","ReverseDifference","ReverseDifference","Round","Round","RoundOut","RuntimeEffect","SA","SC","SRGBA8888","SamplingMode","SamplingOptions","Saturation","Scalar","Scalars","Screen","Sendable","Shader","Shaper","Size","Slight","SoftLight","Solid","Square","Src","SrcATop","SrcIn","SrcOut","SrcOver","Stroke","StrokeAndFill","StrokeRec","Success","Surface","SurfaceProps","SurfacePropsFlags","TRANSPARENT","TextBlob","TextBlobBuilder","TextBlobIter","TextBlobRun","TextEncoding","TextureCompressionType","TileMode","Typeface","USE_DEVICE_INDEPENDENT_FONTS","UTF16","UTF32","UTF8","Unichar","Unimplemented","Union","Union","Unknown","Unknown","Unknown","Unpremul","V2","V3","V4","Vector","Vector3","Vertices","WBMP","WEBP","WHITE","Winding","XOR","XYZD50Hash","Xor","Xor","YELLOW","YUVAInfo","YUVAPixmapInfo","YUVAPixmaps","YUVColorSpace","ZERO","Zero","a","a","a","a","abandon","abandon","abandoned","add","add","add","add","add","add","add","add","add","add","add","add_arc","add_arc","add_arc","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_circle","add_circle","add_circle","add_font_feature","add_oval","add_oval","add_oval","add_path","add_path","add_path","add_path_matrix","add_placeholder","add_poly","add_polygon","add_polygon","add_rect","add_rect","add_rect","add_round_rect","add_rrect","add_rrect","add_rrect","add_shadow","add_text","addr","addr_at","adjust","advance","advance_x","alias","all","all","all","alloc_n32_pixels","alloc_n32_pixels","alloc_pixels","alloc_pixels","alloc_pixels_flags","alloc_pixels_flags","alloc_pixels_info","alloc_pixels_info","alloc_run","alloc_run","alloc_run_pos","alloc_run_pos","alloc_run_pos_h","alloc_run_pos_h","alloc_run_rsxform","alloc_run_rsxform","alloc_run_text","alloc_run_text","alloc_run_text_pos","alloc_run_text_pos","alloc_run_text_pos_h","alloc_run_text_pos_h","alloc_run_text_rsxform","alloc_run_text_rsxform","allocate","allow_blender","allow_color_filter","allow_shader","alpha","alpha_f","alpha_table","alpha_table","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alphabetic_baseline","annotate","append","append_float","append_float_array","append_int","append_typeface","apply_bones","apply_rounding_hack","apply_to_canvas","apply_to_paint","apply_to_path","apply_to_path_inplace","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_filtered_bounds","approximate_filtered_bounds","approximate_op_count","approximate_op_count","approximate_op_count_nested","approximate_op_count_nested","approximate_size","arc_to","arc_to","arc_to","arc_to_radius","arc_to_radius","arc_to_rotated","arc_to_tangent","arc_to_tangent","arc_to_tangent","are_finite","area","arithmetic","arithmetic","arithmetic","as_a_dash","as_array","as_array","as_array","as_array","as_array_mut","as_blend_mode","as_bytes","as_bytes","as_coeff","as_direct_context","as_gl_format","as_gl_format_enum","as_image","as_image","as_image_filter","as_image_filter","as_mtl_format","as_mut_array","as_mut_array","as_mut_array","as_raw","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_scalars","as_slice","as_str","as_utf16_unchecked","as_utf32_unchecked","as_vk_format","as_winding","as_winding","ascent","at","at","at_end","at_size","at_size","at_str","at_str","at_t","at_t","avg_char_width","b","b","b","b","b","b","backend","backend","backend","backend","backend","backend","backend_format","backend_format","backend_texture","background","baseline_shift","begin_recording","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blend_mode","blend_mode_or","blender","blenders","blue_table","blue_table","blur","blur","blur","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom","bottom","bottom","bottom","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","build","bytes","bytes_mut","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","c","c","c","can_compute_fast_bounds","can_send","can_send","canvas","canvas","cap","cap_height","center","center_x","center_y","channel_mask","check_async_work_completion","children","circle","clear_background_color","clear_caches","clear_foreground_color","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_for_placeholder","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_typeface","clone_with_arguments","clone_with_pixel_geometry","close","close","close","cmp","cmp","codec","codecs","col","col_major","color","color","color4f","color_filter","color_filter","color_filter","color_filter_node","color_filters","color_info","color_info","color_matrix","color_matrix_filter","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type_supported_as_image","color_type_supported_as_surface","colors","colors","colors","cols","combine","combine","combine","combine","combine","complement","complement","compose","compose","compose","compose","composed","compressed_backend_format","compressed_backend_format","compute_bounds","compute_bounds","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_fast_bounds","compute_from_t","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_min_byte_size","compute_min_byte_size","compute_offset","compute_offset","compute_region_complexity","compute_tight_bounds","compute_total_bytes","compute_total_bytes","compute_y_from_x","concat","conic_to","conic_to","conic_to","conservatively_contains_rect","consume","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains_color_font_or_bitmap","contains_emoji","contains_no_empty_check","contains_point","contains_rect","contains_region","contour_measure","contrast","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","copied","copy_range","copy_range","copy_table_data","corner_path","corner_path_effect","count","count","count","count","count","count","count","count","count_families","count_families","count_glyphs","count_inputs","count_points","count_str","count_tables","count_text","count_verbs","crop","cross","cross","cross","cross","cross_product","cross_product","cubic","cubic_to","cubic_to","cubic_to","cull_rect","cull_rect","current_font","current_language","current_level","current_script","d","d","dash","dash_path_effect","data_type","data_type","day","day_of_week","decode","decode_to_raster","decoration","decoration_color","decoration_mode","decoration_mut","decoration_style","decoration_thickness_multiplier","decoration_type","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_backend_format","default_emoji_fallback","default_fallback","default_fallback_char","delete_backend_texture","deref","deref","deref","deref_mut","descent","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detach","detach","detach","detach","detach_as_data","detach_as_stream","did_exceed_max_lines","difference","difference","dilate","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","direct_context","disable_font_fallback","discrete","discrete_path_effect","displacement_map_effect","distance","distance_to_origin","distant_lit_diffuse_lighting","distant_lit_specular_lighting","div","div","div","div","div_assign","div_assign","div_assign","document","dot","dot","dot","dot","dot","dot_product","dot_product","dot_with_normal","draw","draw","draw","draw_at","drawable","draws_nothing","draws_nothing","drop","drop","drop","dump","dump","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","dump_hex","e","edging","effective_align","ellipsis","ellipsized","empty","empty","empty","empty","empty","enable_data_type","enable_font_fallback","encode","encode","encode","encode","encode","encode","encode_to_data","encode_to_data_with_context","encode_to_data_with_quality","encoded_data","encoded_data","encoded_data","end_of_current_run","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equals","equals","equals","equals","equals","equals_by_fonts","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erase","erase","erase","erase_4f","erase_4f","erase_4f","erase_argb","erase_argb","erase_color","erase_color","erase_color_4f","erase_color_4f","erode","extend","extend","extended_visit","extensions","extensions_mut","extract_alpha","extract_alpha","extract_subset","extract_subset","extract_subset","f","fallback_manager","family_name","family_name","family_name","family_name","family_names","family_names","fill_type","fill_type","fill_type","filter","filter_bounds","filter_color","filter_color4f","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","find_child","find_input","find_typefaces","find_typefaces_with_font_arguments","find_uniform","finish_recording_as_drawable","finish_recording_as_picture","fits_in_bytes","flags","flags","flags","flags","flush","flush","flush_and_submit","flush_and_submit","flush_and_submit_image","flush_and_submit_surface","flush_image","flush_image_with_info","flush_submit_and_sync_cpu","flush_surface","flush_surface_with_access","flush_surface_with_texture_state","flush_with_info","flush_with_info","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","font","font","font_arguments","font_arguments","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_parameters","font_size","font_size","font_style","font_style","font_style","font_style","force_strut_height","foreground","fractal_perlin_noise","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adopted_texture","from_argb","from_argb","from_backend_render_target","from_backend_texture","from_bitmap","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bounds","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes_rgba","from_ca_metal_layer","from_chars","from_color_info","from_color_info","from_compressed","from_data","from_data","from_data","from_data","from_data","from_data_type","from_encoded","from_encoded","from_encoded","from_encoded_with_alpha_type","from_external_memory","from_external_pixmaps","from_filename","from_filename","from_generator","from_irect","from_isize","from_isize","from_iter","from_iter","from_iwh","from_ltrb","from_ltrb","from_mtk_view","from_name","from_name","from_name","from_nv12_textures_copy","from_paint","from_path","from_path","from_picture","from_picture","from_picture_with_props","from_pixmap_cross_context","from_point_and_size","from_pos_text","from_pos_text","from_pos_text_h","from_pos_text_h","from_pt_size","from_radians","from_raster_data","from_rect","from_rgb","from_rsxform","from_rsxform","from_shader","from_shader","from_size","from_size","from_slice","from_slice","from_slices","from_slices","from_str","from_str","from_str","from_str","from_str","from_stream","from_stream","from_stream","from_svg","from_table","from_text","from_text","from_texture","from_typeface","from_typeface_with_params","from_vk","from_wh","from_wh","from_xywh","from_xywh","from_yuva_pixmaps","from_yuva_textures","g","g","g","g","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","get_actual_text_range","get_addr","get_addr","get_alpha_f","get_alpha_f","get_alpha_f","get_backend_render_target","get_backend_texture","get_boundary_path","get_bounds","get_closest_glyph_cluster_at","get_closest_utf16_glyph_info_at","get_col_major","get_color","get_color","get_color","get_color_4f","get_color_4f","get_color_4f","get_font_at","get_font_at_utf16_offset","get_fonts","get_glyph_cluster_at","get_glyph_info_at_utf16_offset","get_glyph_position_at_coordinate","get_input","get_intercepts","get_intercepts","get_intercepts","get_kerning_pair_adjustments","get_line_metrics","get_line_metrics_at","get_line_number_at","get_line_number_at_utf16_offset","get_matrix","get_paragraph_style","get_path","get_path","get_path_at","get_pixels","get_pixels","get_point","get_points","get_pos","get_rects_for_placeholders","get_rects_for_range","get_row_major","get_row_major","get_subset","get_subset","get_table_data","get_table_size","get_text","get_verbs","get_vk_drawable_info","get_widths","get_widths_bounds","get_word_boundary","get_x_pos","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","glyph_indices","glyphs","glyphs","gpu","gradient_shader","graphics","grayscale","green_table","green_table","h","half_leading","half_leading","has","has_alpha","has_background","has_bones","has_colors","has_equal_effect","has_extension","has_foreground","has_indices","has_mip_maps","has_mipmaps","has_mipmaps","has_tex_coords","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height_64","height_override","height_override","high_contrast","high_contrast_config","high_contrast_filter","hinting","hinting_is_on","hour","icu","id","id","ideographic_baseline","image","image","image_filter","image_filter","image_filters","image_info","image_info","image_snapshot","image_snapshot_with_bounds","images","inc_reserve","inc_reserve","inc_reserve","index","index","index","index","index","index_count","index_mut","indices","indices","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","info","info","info","info","info","init_pixmaps_from_single_allocation","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","input","input_size","inputs","inputs","insert","insert","inset","inset","install_pixels","install_pixels","interpolate","intersect","intersect","intersect2","intersect_no_empty_check_","intersection","intersection","intersects","intersects","intersects","intersects","intersects2","intersects_rect","intersects_region","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_image_filter","into_image_filter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invert","invert_style","is_a_image","is_all","is_all","is_alpha_only","is_alpha_unchanged","is_always_dither","is_always_opaque","is_anti_alias","is_array","is_baseline_snap","is_bgr","is_bold","is_closed","is_closed","is_color","is_complex","is_convex","is_cubic_degenerate","is_device_lost","is_dither","is_embedded_bitmaps","is_embolden","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty_64","is_even_odd","is_fill_style","is_finite","is_finite","is_finite","is_finite","is_finite","is_fixed_pitch","is_force_auto_hinting","is_format","is_framebuffer_only","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_h","is_hairline_style","is_immutable","is_immutable","is_immutable","is_immutable","is_initialized","is_interpolatable","is_inverse","is_inverse_fill_type","is_italic","is_last_contour_closed","is_lazy_generated","is_line","is_line_degenerate","is_linear","is_linear_metrics","is_null","is_null","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_oval","is_placeholder","is_protected","is_protected","is_protected","is_protected","is_quad_degenerate","is_ready_to_draw","is_ready_to_draw","is_rect","is_rect","is_rgb","is_rrect","is_same_texture","is_sorted","is_src_over","is_srgb","is_srgb","is_subpixel","is_supported","is_texture_backed","is_texture_generator","is_texture_generator","is_use_device_independent_fonts","is_v","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_volatile","is_volatile","is_volatile","is_zero","is_zero","is_zero","is_zero","iset","iter","iter","iter","iter","iter_names","iter_names","join","join","join","join2","join_non_empty_arg","join_possibly_empty_rect","jpeg_encoder","label","last_pt","layout","leading","leading","left","left","left","left","legacy_make_typeface","legacy_make_typeface","len","length","length","length","length","length","length","length","length_squared","length_squared","length_squared","length_xy","length_xyz","letter_spacing","line","line_2d","line_2d_path_effect","line_number","line_to","line_to","line_to","linear_gradient","linear_gradient_with_interpolation","locale","longest_line","look_at","luma","luma_color_filter","magnifier","make","make","make","make","make_blender","make_color_filter","make_color_space","make_deserialize","make_for_blender","make_for_color_filer","make_for_shader","make_non_texture_image","make_picture_snapshot","make_raster_image","make_scale","make_shader","make_subset","make_transform","map","mark_dirty","mask_filter","match_face_style","match_face_style","match_family","match_family","match_family_style","match_family_style","match_family_style_character","match_family_style_character","match_one_attribute","match_style","match_style","matches_color_type","matches_color_type","matches_color_type","matrix","matrix","matrix","matrix_convolution","max_aniso","max_char_width","max_intrinsic_width","max_lines","max_render_target_size","max_surface_sample_count_for_color_type","max_texture_size","max_width","measure_str","measure_text","merge","metal_texture_info","metal_texture_info","metrics","min_intrinsic_width","min_row_bytes","min_row_bytes","minute","mipmap","mipmap","mipmapped","mipmapped","miter","mode","mode","mode","month","move_to","move_to","move_to","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","n32","name","name","name","name","named_transfer_fn","nan","native_deserialize","native_flattenable","native_transmutable","nearly_equal","nearly_equal","nearly_zero","nearly_zero","need_to_apply","needs_ctm","neg","neg","neg","neg","neg","neg","negate","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_a8","new_a8","new_bidi_run_iterator","new_bytes","new_bytes","new_color_space","new_color_space_with_context","new_copy","new_copy","new_copy","new_core_text","new_cross_context_from_pixmap","new_cstr","new_cstr","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_family_name_iterator","new_fill","new_font_mgr_run_iterator","new_from","new_from_data","new_from_data","new_gl","new_gl","new_gl","new_gl","new_gl_with_label","new_hairline","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_identity","new_lighting","new_load_with","new_load_with_cstr","new_metal","new_metal","new_metal","new_metal","new_metal_with_label","new_n32","new_n32","new_n32_premul","new_n32_premul","new_native","new_null","new_path","new_path","new_per_channel","new_per_channel","new_placeholder","new_placeholder","new_primitive","new_raster","new_raster_direct","new_raster_from_compressed","new_raster_n32_premul","new_render_target","new_s32","new_s32","new_script_run_iterator","new_shape_dont_wrap_or_reorder","new_shape_then_wrap","new_shaper_driven_wrapper","new_srgb","new_srgb","new_srgb_linear","new_srgb_linear","new_std_language_run_iterator","new_str","new_str","new_style_set","new_style_set","new_styleset","new_styleset","new_subset","new_subset","new_subset","new_subset_with_context","new_surface","new_surface_with_dimensions","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","new_typeface","new_typeface","new_uninitialized","new_uninitialized","new_unknown","new_unknown","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_with_label","new_vulkan_ycbcr","new_with_filter","new_zero_initialized","new_zero_initialized","next","next","next_contour","normalize","normalize","normalize","normalize","normalize","normalize_perspective","normalize_vector","normalized","not","not","nothing_to_draw","notify_added_to_cache","notify_added_to_cache","notify_content_will_change","notify_drawing_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","num_channels_in_plane","num_planes","num_planes","num_planes","num_planes","num_planes","offset","offset","offset","offset","offset","offset","offset","offset","offset_points","offset_to","offset_to","oomed","op","op","op_rect","op_rect_region","op_region","op_region_rect","origin","origin","origin","origin_matrix","outset","outset","oval","oval_with_start_index","overdraw","overdraw_color_filter","paint","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","partial_cmp","path","path_1d","path_1d_path_effect","path_2d","path_2d_path_effect","path_effect","path_effect","path_measure","path_types","path_utils","pdf","peek_pixels","peek_pixels","peek_pixels","peek_pixels","peek_style","perform_deferred_cleanup","perlin_noise_shader","perspective","picture_recorder","pixel_geometry","pixel_ref","pixel_ref","pixel_ref_origin","pixel_ref_origin","pixels","pixels","pixels","pixels","pixels","pixmap","pixmap","pixmaps_info","plane","plane_config","plane_dimensions","plane_format","plane_formats","plane_info","plane_infos","plane_subsampling_factors","planes","playback","playback","png_encoder","point_lit_diffuse_lighting","point_lit_specular_lighting","points","polygon","polyline_to","polyline_to","pop","pos_tan","pos_tan","positions","positions","positions","positions","post_concat","post_concat","post_script_name","post_translate","post_translate","pre_concat","pre_concat","pre_concat_16","pre_multiply_argb","pre_multiply_color","pre_scale","pre_scale_xyz","pre_translate","precompile_shader","print_statistics","private","props","purge_caches","purge_harf_buzz_cache","purge_unlocked_resource_bytes","purge_unlocked_resources","push_style","quad_to","quad_to","quad_to","query_yuva_info","query_yuva_info","queue_family_index","quick_contains","quick_reject","quick_reject_rect","quick_reject_region","r","r","r","r_arc_to_rotated","r_conic_to","r_conic_to","r_conic_to","r_cubic_to","r_cubic_to","r_cubic_to","r_line_to","r_line_to","r_line_to","r_move_to","r_quad_to","r_quad_to","r_quad_to","radial_gradient","radial_gradient_with_interpolation","radians_to_degrees","rc","read","read_from_memory","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","recommended_rgba_color_type","recording_canvas","recording_context","rect","rect_stays_rect","rect_to_rect","red_table","red_table","region","register_typeface","reinterpret_color_space","release","release_resources_and_abandon","remove","remove","remove","render","replace_backend_texture","replace_backend_texture_with_mode","replace_tab_characters","require_base_type","require_type_equality","res_scale","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset_font_features","reset_gl_texture_bindings","reset_shadows","resolve","resolve","resolve_msaa","resource_cache_limit","resource_cache_purgeable_bytes","resource_cache_usage","restore","reverse_add_path","rewind","rgb_to_yuv","right","right","right","right","rotate","rotate_x","rotate_y","rotate_z","round","round_in","round_out","round_out","round_out","row","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_iter","row_major","rows","rrect","rrect","rrect_with_start_index","runtime_effect","s","sample_count","sampling","sampling_options","save","scalar","scale","scale","scale","scale_pixels","scale_pixels","scale_x","scaled","scaled","scos","second","segment","segment","segment_masks","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_stream","set","set","set","set","set","set","set","set","set","set_44","set_abs","set_alpha","set_alpha_f","set_alpha_type","set_alpha_type","set_anti_alias","set_apply_rounding_hack","set_argb","set_asset_font_manager","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_background_color","set_background_paint","set_baseline_shift","set_baseline_snap","set_blend_mode","set_blender","set_bounds","set_bounds2","set_bounds_check","set_bounds_no_check","set_col","set_col_major","set_color","set_color","set_color4f","set_color_filter","set_color_space","set_concat","set_concat","set_concat_16","set_container_size","set_decoration","set_decoration_color","set_decoration_mode","set_decoration_style","set_decoration_thickness_multiplier","set_decoration_type","set_default_font_manager","set_default_font_manager_and_family_names","set_dither","set_dynamic_font_manager","set_edging","set_ellipsis","set_embedded_bitmaps","set_embolden","set_empty","set_empty","set_empty","set_empty","set_empty","set_fill_style","set_fill_type","set_fill_type","set_fill_type","set_font_arguments","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_font_style","set_force_auto_hinting","set_force_strut_height","set_foreground_color","set_foreground_paint","set_glyph","set_hairline_style","set_half_leading","set_half_leading","set_height","set_height","set_height","set_height_override","set_height_override","set_hinting","set_identity","set_identity","set_identity","set_image_filter","set_immutable","set_immutable","set_immutable","set_immutable","set_info","set_info","set_irect","set_is_volatile","set_is_volatile","set_is_volatile","set_iwh","set_last_pt","set_leading","set_length","set_length_xy","set_letter_spacing","set_linear_metrics","set_locale","set_ltrb","set_ltrb","set_mask_filter","set_max_lines","set_metrics","set_mutable_state","set_mutable_state","set_normalize","set_path","set_path","set_path_effect","set_pixel_ref","set_pixel_ref","set_placeholder","set_rc","set_rect","set_rects","set_region","set_replace_tab_characters","set_res_scale","set_resource_cache_limit","set_resource_cache_limits","set_rotate","set_rotate_unit","set_rotate_unit_sin_cos","set_row","set_row_major","set_row_major","set_saturation","set_scale","set_scale","set_scale_x","set_shader","set_size","set_size","set_skew_x","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_params","set_stroke_style","set_stroke_width","set_strut_enabled","set_strut_style","set_style","set_subpixel","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_translate","set_typeface","set_typeface","set_vulkan_image_layout","set_vulkan_image_layout","set_wh","set_wh","set_word_spacing","set_xywh","set_xywh","shader","shader","shader_mask_filter","shaders","shadows","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","shaper","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shrink_to_fit","simplify","simplify","siting_xy","size","size","size","size","size","size_in_bytes","skew_x","snap_gpu_draw_handler","snapshot","snapshot","sort","sort","sorted","sorted","source","spacing","spot_lit_diffuse_lighting","spot_lit_specular_lighting","ssin","stencil_bits","store_vk_pipeline_cache_data","str_to_glyphs","str_to_glyphs","str_to_glyphs_vec","stroke_cap","stroke_join","stroke_miter","stroke_rec","stroke_width","strut_enabled","strut_style","style","style","style","style","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","submit","subsampling","sum","supported","supports_distance_field_text","supports_protected_content","surface","surfaces","svg","swap","swap","swap","swap","swap_rb","swap_rb_inplace","sweep_gradient","sweep_gradient_with_interpolation","symmetric_difference","symmetric_difference","table_color_filter","table_tags","tex_coords","tex_coords","text_align","text_baseline","text_direction","text_height_behavior","text_style","text_to_glyphs","text_to_glyphs","text_to_glyphs_vec","textlayout","texture","texture","texture_origin","texture_origin","texture_size","textures","tight_bounds","tight_bounds","tile","tiled_image_utils","time_zone_minutes","to_a_color_filter","to_a_color_matrix","to_a_color_mode","to_bytes","to_ceil","to_color","to_color","to_floor","to_font_data","to_hsv","to_hsv","to_m33","to_non_inverse","to_non_texture_image","to_opaque","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","to_quad","to_quad","to_raster_image","to_raw_shader","to_rgb","to_round","to_shader","to_shader","to_shader","to_shader","to_shader","to_string","to_svg","to_svg_with_encoding","to_texture_2d","to_tri_strip","to_xyzd50_hash","to_xyzd50_hash","toggle","toggle","toggle_inverse_fill_type","toggle_inverse_fill_type","toggle_inverse_fill_type","top","top","top","top","top","transform","transform_with_perspective_clip","translate","translate","translate","translated","transpose","trim","trim_path_effect","try_alloc_n32_pixels","try_alloc_n32_pixels","try_alloc_pixels","try_alloc_pixels","try_alloc_pixels_flags","try_alloc_pixels_flags","try_alloc_pixels_info","try_alloc_pixels_info","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbulence_perlin_noise","turn_hinting_off","turn_on","two_point_conical_gradient","two_point_conical_gradient_with_interpolation","tx","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","typeface","typeface","typeface","typeface","unichar_to_glyph","unichar_to_glyph","unichar_to_glyphs","unichars_to_glyphs","uniform_size","uniforms","union","union","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","units_per_em","unlimited_lines","unresolved_codepoints","unresolved_glyphs","unsafe_send_sync","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","update_bounds_cache","use_cubic","utf8_starts","utf8_starts","utils","v","valid_row_bytes","valid_row_bytes","validate","validate_alpha_type","value","variant_name","variation_design_parameters","variation_design_position","vertex_count","vertices","visit","vk_image_layout","vulkan_image_info","vulkan_image_info","w","webp_encoder","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width_64","with_a","with_adjustment","with_alpha_type","with_alpha_type","with_alpha_type","with_alpha_type","with_color_filter","with_color_space","with_color_space","with_color_space","with_color_space","with_color_spin","with_color_spin","with_color_type","with_color_type","with_color_type","with_color_type","with_default_mipmaps","with_dimensions","with_dimensions","with_dimensions","with_inset","with_inset","with_linear_gamma","with_linear_gamma","with_local_matrix","with_local_matrix","with_matrix","with_matrix","with_offset","with_offset","with_offset","with_offset_to","with_offset_to","with_outset","with_outset","with_size","with_srgb_gamma","with_srgb_gamma","with_subsampling","with_transform","with_transform_with_perspective_clip","with_working_color_space","with_working_color_space","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap_mut","wrap_ref","wrap_send","wrap_send","wrapper","writable_addr","writable_addr_at","write","write_pixels_from_bitmap","write_pixels_from_pixmap","write_to_memory","x","x","x","x","x","x","x","x","x","x","x","x","x_height","x_max","x_min","y","y","y","y","y","y","y","y","y","y","y","y","year","yuv_color_space","yuv_color_space","yuv_color_space","yuv_to_rgb","yuva_info","yuva_info","yuva_info","yuva_info","yuva_info","yuva_pixmap_info","yuva_pixmaps","z","z","z","z","z","link_to_destination","named_destination","rect_with_url","arithmetic","AutoCanvasRestore","AutoRestoredCanvas","Canvas","F16_COLOR_TYPE","Fast","GlyphPositions","INIT_WITH_PREVIOUS","Lattice","Lines","OwnedCanvas","PRESERVE_LCD_TEXT","PointMode","Points","Points","Polygon","RSXforms","SaveLayerFlags","SaveLayerRec","SetMatrix","SrcRectConstraint","Strict","TopLayerPixels","access_top_layer_pixels","all","all","annotate_link_to_destination","annotate_named_destination","annotate_rect_with_url","backdrop","base_layer_size","base_props","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","clear","clip_irect","clip_mask","clip_matrix","clip_path","clip_rect","clip_region","clip_rrect","clip_shader","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","colors","complement","complement","concat","concat_44","contains","contains","default","default","deref","deref","device_clip_bounds","difference","difference","direct_context","discard","draw_annotation","draw_arc","draw_circle","draw_color","draw_drawable","draw_drawable_at","draw_drrect","draw_glyphs_at","draw_glyphs_utf8","draw_image","draw_image_lattice","draw_image_nine","draw_image_rect","draw_image_rect_with_sampling_options","draw_image_with_sampling_options","draw_irect","draw_line","draw_oval","draw_paint","draw_patch","draw_path","draw_picture","draw_point","draw_points","draw_rect","draw_region","draw_round_rect","draw_rrect","draw_shadow","draw_str","draw_str_align","draw_text_align","draw_text_blob","draw_vertices","drop","drop","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bitmap","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_raster_direct","from_raster_direct_n32","guard","hash","hash","hash","image_info","info","inner","inner_mut","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_all","is_clip_empty","is_clip_rect","is_empty","is_empty","iter","iter","iter_names","iter_names","lattice","local_clip_bounds","local_to_device","local_to_device_as_3x3","new","new_null","new_surface","not","origin","paint","partial_cmp","peek_pixels","pixels","props","quick_reject","quick_reject","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","rect_types","remove","remove","reset_matrix","restore","restore","restore_to_count","rotate","row_bytes","save","save_count","save_layer","save_layer_alpha","save_layer_alpha_f","scale","set","set","set_matrix","set_matrix","set_matrix","skew","sub","sub_assign","surface","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","top_props","total_matrix","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unwrap","wrap","write_pixels","write_pixels_from_bitmap","x_divs","y_divs","Default","FixedColor","Lattice","RectType","Transparent","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone_into","colors","default","eq","equivalent","fmt","fmt","from","from","hash","into","into","rect_types","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x_divs","y_divs","ASTC","AVIF","BMP","BottomLeft","BottomRight","BottomUp","Codec","CouldNotRewind","DEFAULT","DNG","EncodedImageFormat","EncodedOrigin","ErrorInInput","FrameInfo","GIF","HEIF","ICO","IncompleteInput","InternalError","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","JPEG","JPEGXL","KTX","LAST","LeftBottom","LeftTop","No","Options","PKM","PNG","PreferAnimation","PreferStillImage","Result","RightBottom","RightTop","ScanlineOrder","SelectionPolicy","Success","TopDown","TopLeft","TopRight","Unimplemented","WBMP","WEBP","Yes","ZeroInitialized","alpha_type","blend","bmp_decoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codec_animation","codecs","default","default","dimensions","disposal_method","duration","encoded_format","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_index","from","from","from","from","from","from","from","from_data","from_data_with_decoders","from_stream","fully_received","get_frame_count","get_frame_info","get_image","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_repetition_count","get_scaled_dimensions","get_scanlines","get_yuva_planes","gif_decoder","has_alpha_within_bounds","hash","hash","hash","hash","ico_decoder","incremental_decode","info","inner","inner","inner_mut","inner_mut","into","into","into","into","into","into","into","jpeg_decoder","next_scanline","origin","outbound_scanline","pixmap_utils","png_decoder","prior_frame","query_yuva_info","rect","required_frame","result_to_string","scanline_order","skip_scanlines","start_incremental_decode","start_scanline_decode","subset","swaps_width_height","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","valid_subset","wbmp_decoder","webp_decoder","wrap","wrap","zero_initialized","decode_stream","decoder","Blend","DisposalMethod","Keep","RestoreBGColor","RestorePrevious","Src","SrcOver","Decoder","fmt","from_stream","id","is_format","decode_stream","decoder","decode_stream","decoder","decode_stream","decoder","orient","swap_width_height","decode_stream","decoder","decode_stream","decoder","decode_stream","decoder","ColorFilter","color_filters","composed","filter_color","filter_color4f","fmt","from_argb","from_table","high_contrast","is_alpha_unchanged","luma","new_lighting","overdraw","to_a_color_matrix","to_a_color_mode","with_working_color_space","blend","blend_with_color_space","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","lighting","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","table","table_argb","table_from_color_table","blend","blend_with_color_space","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","lighting","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","table","table_argb","table_from_color_table","ColorMatrix","default","eq","fmt","get_row_major","new","post_concat","post_translate","pre_concat","rgb_to_yuv","set_concat","set_identity","set_row_major","set_saturation","set_scale","yuv_to_rgb","new_lighting","BLACK","BLUE","CYAN","DARK_GREY","GREEN","GREY","LIGHT_GREY","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","ContourMeasure","ContourMeasureIter","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","complement","contains","contains","default","difference","difference","empty","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_path","get_matrix","hash","insert","insert","intersection","intersection","intersects","intersects","into","into_iter","is_all","is_all","is_closed","is_empty","is_empty","iter","iter","iter_names","iter_names","length","new","next","not","partial_cmp","pos_tan","remove","remove","reset","segment","set","set","sub","sub_assign","symmetric_difference","symmetric_difference","to_owned","toggle","toggle","try_from","try_into","type_id","union","union","new","new","new","Document","abort","begin_page","borrow","borrow_mut","canvas","close","end_page","fmt","from","into","page","pages","state","try_from","try_into","type_id","OnPage","Open","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Drawable","GPUDrawHandler","approximate_bytes_used","bounds","draw","draw_at","fmt","generation_id","gpu_draw_handler","make_picture_snapshot","notify_drawing_changed","snap_gpu_draw_handler","GPUDrawHandler","draw","fmt","bitmap","image","pixmap","Alias","AntiAlias","Edging","Font","SubpixelAntiAlias","borrow","borrow_mut","clone","clone_into","count_str","count_text","default","edging","eq","equivalent","fmt","fmt","from","from_typeface","from_typeface_with_params","get_bounds","get_intercepts","get_path","get_pos","get_widths","get_widths_bounds","get_x_pos","hash","hinting","into","is_baseline_snap","is_embedded_bitmaps","is_embolden","is_force_auto_hinting","is_linear_metrics","is_subpixel","measure_str","measure_text","metrics","new","scale_x","set_baseline_snap","set_edging","set_embedded_bitmaps","set_embolden","set_force_auto_hinting","set_hinting","set_linear_metrics","set_scale_x","set_size","set_skew_x","set_subpixel","set_typeface","size","skew_x","spacing","str_to_glyphs","str_to_glyphs_vec","text_to_glyphs","text_to_glyphs_vec","to_owned","try_from","try_into","type_id","typeface","unichar_to_glyph","unichar_to_glyphs","with_size","FontArguments","Palette","VariationPosition","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collection_index","coordinates","default","drop","fmt","fmt","fmt","from","from","from","index","inner","inner_mut","into","into","into","new","overrides","palette","palette","set_collection_index","set_palette","set_variation_design_position","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","variation_design_position","variation_position","wrap","Override","borrow","borrow_mut","clone","clone_into","color","default","eq","equivalent","fmt","from","index","inner","inner_mut","into","to_owned","try_from","try_into","type_id","unwrap","wrap","Coordinate","axis","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","inner","inner_mut","into","to_owned","try_from","try_into","type_id","unwrap","value","wrap","BOUNDS_INVALID","Flags","FontMetrics","STRIKEOUT_POSITION_IS_VALID","STRIKEOUT_THICKNESS_IS_VALID","UNDERLINE_POSITION_IS_VALID","UNDERLINE_THICKNESS_IS_VALID","all","all","ascent","avg_char_width","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","bottom","cap_height","clone","clone","clone_into","clone_into","cmp","complement","complement","contains","contains","default","default","descent","difference","difference","empty","empty","eq","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","has_bounds","hash","inner","inner_mut","insert","insert","intersection","intersection","intersects","intersects","into","into","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","leading","max_char_width","not","partial_cmp","remove","remove","set","set","strikeout_position","strikeout_thickness","sub","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","top","try_from","try_from","try_into","try_into","type_id","type_id","underline_position","underline_thickness","union","union","unwrap","wrap","x_height","x_max","x_min","VariationAxis","def","max","min","tag","variation","Axis","borrow","borrow_mut","clone","clone_into","def","default","eq","fmt","from","inner","inner_mut","into","is_hidden","max","min","new","set_hidden","tag","to_owned","try_from","try_into","type_id","unwrap","wrap","BLACK","BOLD","CONDENSED","EXPANDED","EXTRA_BLACK","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","FontStyle","INVISIBLE","Italic","LIGHT","MEDIUM","NORMAL","NORMAL","Oblique","SEMI_BOLD","SEMI_CONDENSED","SEMI_EXPANDED","Slant","THIN","ULTRA_CONDENSED","ULTRA_EXPANDED","Upright","Weight","Width","bold","bold_italic","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","italic","new","normal","partial_cmp","partial_cmp","slant","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","weight","width","wrap","wrap","wrap","AllResources","BackendAPI","BackendApi","BackendDrawableInfo","BackendFormat","BackendRenderTarget","BackendTexture","BottomLeft","BottomLeft","Budgeted","Context","ContextOptions","Dawn","Direct3D","DirectContext","DirectContextId","DriverBugWorkarounds","FlushInfo","MAX_PLANES","Metal","Metal","Mipmapped","Mock","Mock","MutableTextureState","NO","No","No","No","No","No","No","OpenGL","OpenGL_GrBackend","Origin","Protected","PurgeResourceOptions","RecordingContext","Renderable","ResourceCacheLimits","ResourceCacheUsage","ScratchResourcesOnly","SemaphoresSubmitted","SurfaceOrigin","SyncCpu","TopLeft","TopLeft","Unsupported","Unsupported","Vulkan","Vulkan","YES","YUVABackendTextureInfo","YUVABackendTextures","Yes","Yes","Yes","Yes","Yes","Yes","abandon","abandoned","add_and_true_to_loop_condition","applyOverrides","as_direct_context","as_gl_format","as_gl_format_enum","as_mtl_format","as_vk_format","backend","backend","backend","backend","backend","backend","backend_format","backend_format","backend_formats","backend_render_targets","backend_textures","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_mask","check_async_work_completion","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_type_supported_as_image","color_type_supported_as_surface","compressed_backend_format","compressed_backend_format","context_options","copied","default","default","default_backend_format","delete_backend_texture","deref","deref_mut","destruct","dimensions","dimensions","direct_contexts","disable_blend_equation_advanced","disable_discard_framebuffer","disable_dual_source_blending_support","disable_texture_storage","disallow_large_instanced_draw","emulate_abs_int_function","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","flush","flush_and_submit","flush_and_submit_image","flush_and_submit_surface","flush_image","flush_image_with_info","flush_on_framebuffer_change","flush_submit_and_sync_cpu","flush_surface","flush_surface_with_access","flush_surface_with_texture_state","flush_with_info","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_update_scissor_state_when_binding_fbo0","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_vk","get_vk_drawable_info","gl","gl_clear_broken","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","has_mip_maps","has_mipmaps","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","id","images","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_device_lost","is_framebuffer_only","is_protected","is_protected","is_same_texture","is_valid","is_valid","is_valid","is_valid","label","max_fragment_uniform_vectors_32","max_msaa_sample_count_4","max_render_target_size","max_resource_bytes","max_resources","max_surface_sample_count_for_color_type","max_texture_size","metal_texture_info","metal_texture_info","mipmapped","mipmapped","mtl","new","new","new","new","new","new1","new_gl","new_gl","new_gl","new_gl","new_gl_with_label","new_metal","new_metal","new_metal","new_metal","new_metal_with_label","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_with_label","new_vulkan_ycbcr","num_planes","num_planes","oomed","pack_parameters_workaround_with_pack_buffer","perform_deferred_cleanup","plane_format","plane_formats","precompile_shader","purge_unlocked_resource_bytes","purge_unlocked_resources","queue_family_index","release_resources_and_abandon","remove_pow_with_constant_exponent","reset","reset_gl_texture_bindings","resource_bytes","resource_cache_limit","resource_cache_purgeable_bytes","resource_cache_usage","resource_count","rewrite_do_while_loops","sample_count","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_mutable_state","set_mutable_state","set_resource_cache_limit","set_resource_cache_limits","set_vulkan_image_layout","set_vulkan_image_layout","stencil_bits","store_vk_pipeline_cache_data","submit","supports_distance_field_text","supports_protected_content","surfaces","texture","texture_origin","texture_origin","textures","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_texture_2d","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbind_attachments_on_bound_render_fbo_delete","unfold_short_circuit_as_ternary_operation","unwrap","unwrap","unwrap","vk","vk_image_layout","vulkan_image_info","vulkan_image_info","width","width","wrap","wrap","wrap","yuv_color_space","yuva_info","yuva_info","as_gl_format","as_gl_format_enum","as_vk_format","get_vk_ycbcr_conversion_info","make_gl","make_vk","make_vk_ycbcr","get_gl_framebuffer_info","get_vk_image_info","make_gl","make_vk","set_vk_image_layout","get_gl_texture_info","get_vk_image_info","gl_texture_parameters_modified","make_gl","make_vk","set_vk_image_layout","BackendBinary","BackendSource","ContextOptions","Default","Enable","No","ShaderCacheStrategy","SkSL","Yes","allow_msaa_on_new_intel","allow_multiple_glyph_cache_textures","allow_path_mask_caching","always_use_text_storage_when_available","avoid_stencil_buffers","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_map_threshold","clone","clone","clone_into","clone_into","default","disable_coverage_counting_paths","disable_distance_field_paths","disable_driver_correctness_workarounds","disable_gpu_yuv_conversion","disable_tessellation_path_renderer","do_manual_mipmapping","driver_bug_workarounds","enable_experimental_hardware_tessellation","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","glyph_cache_texture_maximum_bytes","glyphs_as_paths_font_size","hash","hash","inner","inner_mut","internal_multisample_count","into","into","into","max_cached_vulkan_secondary_command_buffers","max_texture_size_override","min_distance_field_font_size","minimum_staging_buffer_size","new","prefer_external_images_over_es3","reduce_ops_task_splitting","reduced_shader_variations","runtime_program_cache_size","shader_cache_strategy","skip_gl_error_checks","support_bilerp_from_glyph_atlas","suppress_mipmap_support","suppress_prints","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","use_draw_instead_of_clear","wrap","make_gl","make_vulkan","ALPHA8","BGRA8","BLEND","BackendState","COMPRESSED_ETC1_RGB8","COMPRESSED_RGB8_BC1","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_BC1","DEPTH24_STENCIL8","Enum","Extensions","FIXED_FUNCTION","Format","FramebufferInfo","GL","GLES","Interface","LUMINANCE16F","LUMINANCE8","LUMINANCE8_ALPHA8","Last","LastColorFormat","MISC","MSAA_ENABLE","None","PIXEL_STORE","PROGRAM","R16","R16F","R8","RENDER_TARGET","RG16","RG16F","RG8","RGB10_A2","RGB565","RGB8","RGBA16","RGBA16F","RGBA4","RGBA8","RGBX8","SRGB8_ALPHA8","STENCIL","STENCIL_INDEX16","STENCIL_INDEX8","Standard","SurfaceInfo","TEXTURE_BINDING","TextureInfo","UInt","Unknown","VERTEX","VIEW","WebGL","add","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","contains","default","default","default","difference","empty","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extensions","extensions_mut","fboid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_fboid","from_iter","from_name","from_target_and_id","has","has_extension","hash","hash","hash","id","inner","inner","inner","inner_mut","inner_mut","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","into_iter","is_all","is_empty","is_initialized","is_protected","is_protected","iter","iter_names","level_count","new_load_with","new_load_with_cstr","new_native","not","partial_cmp","protected","protected","protected","remove","remove","reset","sample_count","set","sub","sub_assign","symmetric_difference","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","unwrap","unwrap","validate","wrap","wrap","wrap","adopt_texture_from","borrow_texture_from","cross_context_texture_from_pixmap","get_backend_texture_from_image","subset_texture_from","texture_from_compressed_texture_data","texture_from_image","texture_from_yuva_pixmaps","texture_from_yuva_textures","BackendContext","Handle","PixelFormat","StorageMode","SurfaceInfo","TextureInfo","TextureUsage","borrow","borrow_mut","clone","clone_into","default","default","eq","equivalent","fmt","fmt","fmt","format","from","inner","inner_mut","into","level_count","new","new","protected","sample_count","storage_mode","texture","to_owned","try_from","try_into","type_id","unwrap","usage","wrap","get_backend_render_target","get_backend_texture","render_target","resolve_msaa","wrap_backend_render_target","wrap_backend_texture","wrap_ca_metal_layer","wrap_mtk_view","A1R5G5B5_UNORM_PACK16","A2B10G10R10_SINT_PACK32","A2B10G10R10_SNORM_PACK32","A2B10G10R10_SSCALED_PACK32","A2B10G10R10_UINT_PACK32","A2B10G10R10_UNORM_PACK32","A2B10G10R10_USCALED_PACK32","A2R10G10B10_SINT_PACK32","A2R10G10B10_SNORM_PACK32","A2R10G10B10_SSCALED_PACK32","A2R10G10B10_UINT_PACK32","A2R10G10B10_UNORM_PACK32","A2R10G10B10_USCALED_PACK32","A4B4G4R4_UNORM_PACK16_EXT","A4R4G4B4_UNORM_PACK16_EXT","A8B8G8R8_SINT_PACK32","A8B8G8R8_SNORM_PACK32","A8B8G8R8_SRGB_PACK32","A8B8G8R8_SSCALED_PACK32","A8B8G8R8_UINT_PACK32","A8B8G8R8_UNORM_PACK32","A8B8G8R8_USCALED_PACK32","ASTC_10x10_SFLOAT_BLOCK_EXT","ASTC_10x10_SRGB_BLOCK","ASTC_10x10_UNORM_BLOCK","ASTC_10x5_SFLOAT_BLOCK_EXT","ASTC_10x5_SRGB_BLOCK","ASTC_10x5_UNORM_BLOCK","ASTC_10x6_SFLOAT_BLOCK_EXT","ASTC_10x6_SRGB_BLOCK","ASTC_10x6_UNORM_BLOCK","ASTC_10x8_SFLOAT_BLOCK_EXT","ASTC_10x8_SRGB_BLOCK","ASTC_10x8_UNORM_BLOCK","ASTC_12x10_SFLOAT_BLOCK_EXT","ASTC_12x10_SRGB_BLOCK","ASTC_12x10_UNORM_BLOCK","ASTC_12x12_SFLOAT_BLOCK_EXT","ASTC_12x12_SRGB_BLOCK","ASTC_12x12_UNORM_BLOCK","ASTC_4x4_SFLOAT_BLOCK_EXT","ASTC_4x4_SRGB_BLOCK","ASTC_4x4_UNORM_BLOCK","ASTC_5x4_SFLOAT_BLOCK_EXT","ASTC_5x4_SRGB_BLOCK","ASTC_5x4_UNORM_BLOCK","ASTC_5x5_SFLOAT_BLOCK_EXT","ASTC_5x5_SRGB_BLOCK","ASTC_5x5_UNORM_BLOCK","ASTC_6x5_SFLOAT_BLOCK_EXT","ASTC_6x5_SRGB_BLOCK","ASTC_6x5_UNORM_BLOCK","ASTC_6x6_SFLOAT_BLOCK_EXT","ASTC_6x6_SRGB_BLOCK","ASTC_6x6_UNORM_BLOCK","ASTC_8x5_SFLOAT_BLOCK_EXT","ASTC_8x5_SRGB_BLOCK","ASTC_8x5_UNORM_BLOCK","ASTC_8x6_SFLOAT_BLOCK_EXT","ASTC_8x6_SRGB_BLOCK","ASTC_8x6_UNORM_BLOCK","ASTC_8x8_SFLOAT_BLOCK_EXT","ASTC_8x8_SRGB_BLOCK","ASTC_8x8_UNORM_BLOCK","ATTACHMENT_OPTIMAL_KHR","Alloc","AllocFlag","B10G11R11_UFLOAT_PACK32","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR","B16G16R16G16_422_UNORM","B16G16R16G16_422_UNORM_KHR","B4G4R4A4_UNORM_PACK16","B5G5R5A1_UNORM_PACK16","B5G6R5_UNORM_PACK16","B8G8R8A8_SINT","B8G8R8A8_SNORM","B8G8R8A8_SRGB","B8G8R8A8_SSCALED","B8G8R8A8_UINT","B8G8R8A8_UNORM","B8G8R8A8_USCALED","B8G8R8G8_422_UNORM","B8G8R8G8_422_UNORM_KHR","B8G8R8_SINT","B8G8R8_SNORM","B8G8R8_SRGB","B8G8R8_SSCALED","B8G8R8_UINT","B8G8R8_UNORM","B8G8R8_USCALED","BC1_RGBA_SRGB_BLOCK","BC1_RGBA_UNORM_BLOCK","BC1_RGB_SRGB_BLOCK","BC1_RGB_UNORM_BLOCK","BC2_SRGB_BLOCK","BC2_UNORM_BLOCK","BC3_SRGB_BLOCK","BC3_UNORM_BLOCK","BC4_SNORM_BLOCK","BC4_UNORM_BLOCK","BC5_SNORM_BLOCK","BC5_UNORM_BLOCK","BC6H_SFLOAT_BLOCK","BC6H_UFLOAT_BLOCK","BC7_SRGB_BLOCK","BC7_UNORM_BLOCK","BackendContext","Bool32","Buffer","COLOR_ATTACHMENT_OPTIMAL","CONCURRENT","COSITED_EVEN","COSITED_EVEN_KHR","CUBIC_EXT","CUBIC_IMG","ChromaLocation","CommandBuffer","D16_UNORM","D16_UNORM_S8_UINT","D24_UNORM_S8_UINT","D32_SFLOAT","D32_SFLOAT_S8_UINT","DEPTH_ATTACHMENT_OPTIMAL","DEPTH_ATTACHMENT_OPTIMAL_KHR","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_OPTIMAL","DEPTH_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR","DEPTH_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_STENCIL_READ_ONLY_OPTIMAL","DRM_FORMAT_MODIFIER_EXT","DUAL_SRC_BLEND","Device","Device","DeviceMemory","DeviceSize","DrawableInfo","E5B9G9R9_UFLOAT_PACK32","EAC_R11G11_SNORM_BLOCK","EAC_R11G11_UNORM_BLOCK","EAC_R11_SNORM_BLOCK","EAC_R11_UNORM_BLOCK","ETC2_R8G8B8A1_SRGB_BLOCK","ETC2_R8G8B8A1_UNORM_BLOCK","ETC2_R8G8B8A8_SRGB_BLOCK","ETC2_R8G8B8A8_UNORM_BLOCK","ETC2_R8G8B8_SRGB_BLOCK","ETC2_R8G8B8_UNORM_BLOCK","EXCLUSIVE","EXT_DEBUG_REPORT","ExtensionFlags","Extent2D","FRAGMENT_DENSITY_MAP_OPTIMAL_EXT","FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR","FeatureFlags","Filter","Flags","Format","FormatFeatureFlags","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR","G16B16G16R16_422_UNORM","G16B16G16R16_422_UNORM_KHR","G16_B16R16_2PLANE_420_UNORM","G16_B16R16_2PLANE_420_UNORM_KHR","G16_B16R16_2PLANE_422_UNORM","G16_B16R16_2PLANE_422_UNORM_KHR","G16_B16R16_2PLANE_444_UNORM_EXT","G16_B16_R16_3PLANE_420_UNORM","G16_B16_R16_3PLANE_420_UNORM_KHR","G16_B16_R16_3PLANE_422_UNORM","G16_B16_R16_3PLANE_422_UNORM_KHR","G16_B16_R16_3PLANE_444_UNORM","G16_B16_R16_3PLANE_444_UNORM_KHR","G8B8G8R8_422_UNORM","G8B8G8R8_422_UNORM_KHR","G8_B8R8_2PLANE_420_UNORM","G8_B8R8_2PLANE_420_UNORM_KHR","G8_B8R8_2PLANE_422_UNORM","G8_B8R8_2PLANE_422_UNORM_KHR","G8_B8R8_2PLANE_444_UNORM_EXT","G8_B8_R8_3PLANE_420_UNORM","G8_B8_R8_3PLANE_420_UNORM_KHR","G8_B8_R8_3PLANE_422_UNORM","G8_B8_R8_3PLANE_422_UNORM_KHR","G8_B8_R8_3PLANE_444_UNORM","G8_B8_R8_3PLANE_444_UNORM_KHR","GENERAL","GEOMETRY_SHADER","GetProc","GetProcOf","GetProcResult","GraphicsBackendMemory","ITU_FULL","ITU_FULL_KHR","ITU_NARROW","ITU_NARROW_KHR","Image","ImageInfo","ImageLayout","ImageTiling","ImageUsageFlags","Instance","Instance","KHR_ANDROID_SURFACE","KHR_SURFACE","KHR_SWAPCHAIN","KHR_WIN32_SURFACE","KHR_XCB_SURFACE","LAZILY_ALLOCATED","LINEAR","LINEAR","MAPPABLE","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MIDPOINT","MIDPOINT_KHR","NEAREST","NONCOHERENT","NULL_HANDLE","NV_GLSL_SHADER","NullHandle","OPTIMAL","Offset2D","PREINITIALIZED","PRESENT_SRC_KHR","PVRTC1_2BPP_SRGB_BLOCK_IMG","PVRTC1_2BPP_UNORM_BLOCK_IMG","PVRTC1_4BPP_SRGB_BLOCK_IMG","PVRTC1_4BPP_UNORM_BLOCK_IMG","PVRTC2_2BPP_SRGB_BLOCK_IMG","PVRTC2_2BPP_UNORM_BLOCK_IMG","PVRTC2_4BPP_SRGB_BLOCK_IMG","PVRTC2_4BPP_UNORM_BLOCK_IMG","PhysicalDevice","PhysicalDeviceFeatures","PhysicalDeviceFeatures2","QUEUE_FAMILY_IGNORED","Queue","R10X6G10X6B10X6A10X6_UNORM_4PACK16","R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR","R10X6G10X6_UNORM_2PACK16","R10X6G10X6_UNORM_2PACK16_KHR","R10X6_UNORM_PACK16","R10X6_UNORM_PACK16_KHR","R12X4G12X4B12X4A12X4_UNORM_4PACK16","R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR","R12X4G12X4_UNORM_2PACK16","R12X4G12X4_UNORM_2PACK16_KHR","R12X4_UNORM_PACK16","R12X4_UNORM_PACK16_KHR","R16G16B16A16_SFLOAT","R16G16B16A16_SINT","R16G16B16A16_SNORM","R16G16B16A16_SSCALED","R16G16B16A16_UINT","R16G16B16A16_UNORM","R16G16B16A16_USCALED","R16G16B16_SFLOAT","R16G16B16_SINT","R16G16B16_SNORM","R16G16B16_SSCALED","R16G16B16_UINT","R16G16B16_UNORM","R16G16B16_USCALED","R16G16_SFLOAT","R16G16_SINT","R16G16_SNORM","R16G16_SSCALED","R16G16_UINT","R16G16_UNORM","R16G16_USCALED","R16_SFLOAT","R16_SINT","R16_SNORM","R16_SSCALED","R16_UINT","R16_UNORM","R16_USCALED","R32G32B32A32_SFLOAT","R32G32B32A32_SINT","R32G32B32A32_UINT","R32G32B32_SFLOAT","R32G32B32_SINT","R32G32B32_UINT","R32G32_SFLOAT","R32G32_SINT","R32G32_UINT","R32_SFLOAT","R32_SINT","R32_UINT","R4G4B4A4_UNORM_PACK16","R4G4_UNORM_PACK8","R5G5B5A1_UNORM_PACK16","R5G6B5_UNORM_PACK16","R64G64B64A64_SFLOAT","R64G64B64A64_SINT","R64G64B64A64_UINT","R64G64B64_SFLOAT","R64G64B64_SINT","R64G64B64_UINT","R64G64_SFLOAT","R64G64_SINT","R64G64_UINT","R64_SFLOAT","R64_SINT","R64_UINT","R8G8B8A8_SINT","R8G8B8A8_SNORM","R8G8B8A8_SRGB","R8G8B8A8_SSCALED","R8G8B8A8_UINT","R8G8B8A8_UNORM","R8G8B8A8_USCALED","R8G8B8_SINT","R8G8B8_SNORM","R8G8B8_SRGB","R8G8B8_SSCALED","R8G8B8_UINT","R8G8B8_UNORM","R8G8B8_USCALED","R8G8_SINT","R8G8_SNORM","R8G8_SRGB","R8G8_SSCALED","R8G8_UINT","R8G8_UNORM","R8G8_USCALED","R8_SINT","R8_SNORM","R8_SRGB","R8_SSCALED","R8_UINT","R8_UNORM","R8_USCALED","READ_ONLY_OPTIMAL_KHR","RGB_IDENTITY","RGB_IDENTITY_KHR","Rect2D","RenderPass","S8_UINT","SAMPLE_RATE_SHADING","SHADER_READ_ONLY_OPTIMAL","SHADING_RATE_OPTIMAL_NV","SHARED_PRESENT_KHR","STENCIL_ATTACHMENT_OPTIMAL","STENCIL_ATTACHMENT_OPTIMAL_KHR","STENCIL_READ_ONLY_OPTIMAL","STENCIL_READ_ONLY_OPTIMAL_KHR","SamplerYcbcrModelConversion","SamplerYcbcrRange","SharingMode","SurfaceInfo","TRANSFER_DST_OPTIMAL","TRANSFER_SRC_OPTIMAL","UNDEFINED","UNDEFINED","Version","X8_D24_UNORM_PACK32","YCBCR_2020","YCBCR_2020_KHR","YCBCR_601","YCBCR_601_KHR","YCBCR_709","YCBCR_709_KHR","YCBCR_IDENTITY","YCBCR_IDENTITY_KHR","YcbcrConversionInfo","_bindgen_opaque_blob","_bindgen_opaque_blob","all","all","all","alloc","backend_memory","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chroma_filter","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","color_attachment_index","compatible_render_pass","complement","complement","complement","contains","contains","contains","current_queue_family","default","default","default","default","default","deref","difference","difference","difference","draw_bounds","drop","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extent","external_format","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_explicit_reconstruction","format","format","format","format","format_features","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_device_memory","from_info","from_info_with_queue_index","from_iter","from_iter","from_iter","from_name","from_name","from_name","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","image","image_tiling","image_usage_flags","image_usage_flags","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_valid","iter","iter","iter","iter_names","iter_names","iter_names","layout","level_count","level_count","major","memory","minor","mutable_texture_states","name","new","new","new","new","new_with_extensions","new_with_format","not","not","not","offset","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","patch","protected","protected","remove","remove","remove","sample_count","sample_count","secondary_command_buffer","set","set","set","set_max_api_version","set_protected_context","sharing_mode","sharing_mode","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","tiling","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","width","wrap","wrap","wrap","wrap","wrap","wrap","wrap","x","x_chroma_offset","y","y_chroma_offset","ycbcr_conversion_info","ycbcr_conversion_info","ycbcr_model","ycbcr_range","get_vk_image_layout","get_vk_queue_family_index","new_vulkan","Colors","ColorsInSpace","Flags","GradientShaderColors","INTERPOLATE_COLORS_IN_PREMUL","Interpolation","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","color_space","complement","complement","contains","contains","default","difference","difference","empty","empty","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","hash","hash","hue_method","in_premul","inner","inner_mut","insert","insert","interpolation","intersection","intersection","intersects","intersects","into","into","into","into_iter","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter_names","iter_names","len","linear","linear_with_interpolation","not","partial_cmp","radial","radial_with_interpolation","remove","remove","set","set","sub","sub_assign","sweep","sweep_with_interpolation","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","two_point_conical","two_point_conical_with_interpolation","type_id","type_id","type_id","union","union","unwrap","wrap","ColorSpace","Decreasing","Destination","HSL","HWB","HueMethod","InPremul","Increasing","LCH","Lab","Longer","No","OKLCH","OKLab","SRGB","SRGBLinear","Shorter","Yes","font_cache_count_limit","font_cache_count_used","font_cache_limit","font_cache_used","init","purge_all_caches","purge_font_cache","purge_pinned_font_cache","purge_resource_cache","resource_cache_single_allocation_byte_limit","resource_cache_total_bytes_limit","resource_cache_total_bytes_used","set_font_cache_count_limit","set_font_cache_limit","set_resource_cache_single_allocation_byte_limit","set_resource_cache_total_bytes_limit","InvertBrightness","InvertLightness","InvertStyle","Last","NoInvert","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","to_owned","try_from","try_into","type_id","HighContrastConfig","borrow","borrow_mut","clone","clone_into","contrast","default","eq","fmt","from","grayscale","high_contrast_config","inner","inner_mut","into","invert_style","is_valid","new","new","to_owned","try_from","try_into","type_id","unwrap","wrap","InvertBrightness","InvertLightness","InvertStyle","NoInvert","init","Allow","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BitDepth","CachingHint","CompressionType","CubicResampler","Disallow","ETC2_RGB8_UNORM","F16","Image","None","U8","alpha_type","b","backend_texture","borrow","borrow","borrow_mut","borrow_mut","bounds","c","catmull_rom","clone","clone","clone_into","clone_into","color_space","color_type","decode_to_raster","dimensions","encode","encode_to_data","encode_to_data_with_context","encode_to_data_with_quality","encoded_data","eq","eq","equivalent","flush","flush_and_submit","flush_with_info","fmt","fmt","fmt","from","from","from_adopted_texture","from_bitmap","from_compressed","from_encoded","from_encoded_with_alpha_type","from_generator","from_nv12_textures_copy","from_picture","from_picture_with_props","from_pixmap_cross_context","from_raster_data","from_texture","from_yuva_pixmaps","from_yuva_textures","has_mipmaps","hash","height","image_info","images","inner","inner_mut","into","into","is_alpha_only","is_lazy_generated","is_opaque","is_texture_backed","is_valid","make_color_space","make_non_texture_image","make_raster_image","make_subset","mitchell","new_color_space","new_color_space_with_context","new_cross_context_from_pixmap","new_raster_from_compressed","new_subset","new_subset_with_context","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_with_filter","peek_pixels","read_pixels","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","reinterpret_color_space","scale_pixels","texture_size","to_non_texture_image","to_owned","to_owned","to_raster_image","to_raw_shader","to_shader","try_from","try_from","try_into","try_into","type_id","type_id","unique_id","unwrap","width","with_default_mipmaps","wrap","BitDepth","F16","U8","deferred_from_encoded_data","deferred_from_generator","deferred_from_picture","make_with_filter","raster_from_bitmap","raster_from_compressed_texture_data","raster_from_data","Forward","ImageFilter","MapDirection","Reverse","arithmetic","blur","borrow","borrow_mut","can_compute_fast_bounds","clone","clone_into","color_filter","color_filter_node","compose","compute_fast_bounds","count_inputs","crop","dilate","displacement_map_effect","distant_lit_diffuse_lighting","distant_lit_specular_lighting","eq","equivalent","erode","filter_bounds","fmt","fmt","from","from_picture","get_input","hash","input","inputs","into","magnifier","matrix_convolution","merge","offset","point_lit_diffuse_lighting","point_lit_specular_lighting","spot_lit_diffuse_lighting","spot_lit_specular_lighting","tile","to_a_color_filter","to_owned","try_from","try_into","type_id","with_local_matrix","ArithmeticFPInputs","CropRect","Dither","NO_CROP_RECT","No","Yes","arithmetic","blend","blur","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_filter","compose","crop","default","dilate","displacement_map","distant_lit_diffuse","distant_lit_specular","drop_shadow","drop_shadow_only","empty","enforce_pm_color","eq","eq","eq","equivalent","erode","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","image","into","into","into","k","magnifier","matrix_convolution","matrix_transform","merge","new","offset","picture","point_lit_diffuse","point_lit_specular","rect","shader","shader_with_dither","spot_lit_diffuse","spot_lit_specular","tile","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BitDepth","F16","U8","borrow","borrow_mut","clone","clone_into","deferred_from_encoded_data","deferred_from_generator","deferred_from_picture","eq","equivalent","fmt","from","hash","into","make_with_filter","raster_from_bitmap","raster_from_compressed_texture_data","raster_from_data","to_owned","try_from","try_into","type_id","AlphaOption","BlendOnBlack","BothDirections","Downsample","Horizontal","Ignore","No","Options","alpha_option","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","downsample","encode","encode_image","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","into","into","quality","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","xmp_metadata","new","new","AFFINE","AffineMember","ApplyPerspectiveClip","Center","End","Fill","IDENTITY","IDENTITY","Matrix","Member","No","PERSPECTIVE","Persp0","Persp1","Persp2","SCALE","ScaleToFit","ScaleX","ScaleX","ScaleY","ScaleY","SkewX","SkewX","SkewY","SkewY","Start","TRANSLATE","TransX","TransX","TransY","TransY","TypeMask","Yes","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cheap_equal_to","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","complement","concat","contains","contains","decompose_scale","default","difference","difference","dirty_matrix_type_cache","dump","empty","empty","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend","fixed_step_in_x","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_affine","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_poly_to_poly","from_rect_to_rect","get_9","get_type","has_perspective","hash","hash","hash","i","index","index","index","index_mut","index_mut","index_mut","inner","inner_mut","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into_iter","invalid_matrix","invert","is_all","is_all","is_empty","is_empty","is_finite","is_fixed_step_in_x","is_identity","is_scale_translate","is_similarity","is_translate","iter","iter","iter_names","iter_names","map_homogeneous_points","map_homogeneous_points_2d","map_origin","map_point","map_points","map_points_inplace","map_radius","map_rect","map_rect_scale_translate","map_rect_to_quad","map_rect_with_perspective_clip","map_vector","map_vectors","map_vectors_inplace","map_xy","max_scale","min_max_scales","min_scale","mul","new_all","new_identity","new_scale","new_trans","normalize_perspective","not","partial_cmp","persp_x","persp_y","post_concat","post_idiv","post_rotate","post_scale","post_skew","post_translate","pre_concat","pre_rotate","pre_scale","pre_skew","pre_translate","preserves_axis_alignment","preserves_right_angles","rc","rect_stays_rect","rect_to_rect","remove","remove","reset","rotate_deg","rotate_deg_pivot","rotate_rad","scale","scale_x","scale_y","set","set","set_9","set_affine","set_affine_identity","set_all","set_concat","set_identity","set_persp_x","set_persp_y","set_poly_to_poly","set_rect_to_rect","set_rotate","set_rsxform","set_scale","set_scale_translate","set_scale_x","set_scale_y","set_sin_cos","set_skew","set_skew_x","set_skew_y","set_translate","set_translate_x","set_translate_y","skew","skew_x","skew_y","sub","sub_assign","symmetric_difference","symmetric_difference","to_affine","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","translate","translate_x","translate_y","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unwrap","wrap","DOT22","HLG","LINEAR","PQ","REC2020","SRGB","NUM_COLORS","new","Bevel","Butt","Cap","Fill","Join","Miter","Paint","Round","Round","Square","Stroke","StrokeAndFill","Style","alpha","alpha_f","as_blend_mode","blend_mode","blend_mode_or","blender","color","color4f","color_filter","fmt","image_filter","is_anti_alias","is_dither","is_src_over","mask_filter","new","nothing_to_draw","path_effect","reset","set_alpha","set_alpha_f","set_anti_alias","set_argb","set_blend_mode","set_blender","set_color","set_color4f","set_color_filter","set_dither","set_image_filter","set_mask_filter","set_path_effect","set_shader","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_width","set_style","shader","stroke_cap","stroke_join","stroke_miter","stroke_width","style","AddPathMode","Append","ArcSize","CCW","CONIC","CUBIC","CW","Close","Conic","Cubic","Direction","Done","EvenOdd","Extend","FillType","InverseEvenOdd","InverseWinding","Iter","LINE","Large","Line","MAX_POINTS","Move","Path","QUAD","Quad","RawIter","SegmentMask","Small","Verb","Winding","add_arc","add_circle","add_oval","add_path","add_path_matrix","add_poly","add_rect","add_round_rect","add_rrect","all","all","approximate_bytes_used","arc_to","arc_to_rotated","arc_to_tangent","as_winding","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","circle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","cmp","complement","complement","compute_tight_bounds","conic_to","conic_weight","conic_weight","conservatively_contains_rect","contains","contains","contains","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","count_points","count_verbs","cubic_to","default","default","deserialize","difference","difference","drop","drop","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","empty","empty","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","fill_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_str","from_svg","generation_id","get_point","get_points","get_verbs","hash","hash","hash","hash","inc_reserve","insert","insert","interpolate","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_all","is_all","is_close_line","is_closed_contour","is_convex","is_cubic_degenerate","is_empty","is_empty","is_empty","is_finite","is_interpolatable","is_inverse_fill_type","is_last_contour_closed","is_line","is_line_degenerate","is_oval","is_quad_degenerate","is_rect","is_rrect","is_valid","is_volatile","iter","iter","iter_names","iter_names","last_pt","line","line_to","make_scale","make_transform","move_to","new","new","new","new_from","next","next","not","offset","op","oval","oval_with_start_index","partial_cmp","peek","points","polygon","quad_to","r_arc_to_rotated","r_conic_to","r_cubic_to","r_line_to","r_move_to","r_quad_to","rect","remove","remove","reset","reverse_add_path","rewind","rrect","rrect_with_start_index","segment_masks","serialize","set","set","set_fill_type","set_is_volatile","set_last_pt","set_path","set_path","shrink_to_fit","simplify","sub","sub_assign","swap","symmetric_difference","symmetric_difference","tight_bounds","to_owned","to_owned","to_owned","to_owned","to_svg","to_svg_with_encoding","toggle","toggle","toggle_inverse_fill_type","transform","transform_with_perspective_clip","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","update_bounds_cache","with_offset","with_transform","with_transform_with_perspective_clip","LastEnum","Morph","Rotate","Style","Translate","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","new","DashInfo","PathEffect","as_a_dash","borrow","borrow_mut","clone","clone_into","compose","corner_path","dash","discrete","eq","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","fmt","fmt","from","intervals","into","line_2d","needs_ctm","path_1d","path_2d","phase","sum","to_owned","trim","try_from","try_into","type_id","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","PathMeasure","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","complement","contains","contains","default","default","difference","difference","empty","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_path","hash","insert","insert","intersection","intersection","intersects","intersects","into","into_iter","is_all","is_all","is_closed","is_empty","is_empty","iter","iter","iter_names","iter_names","length","matrix","new","next_contour","not","partial_cmp","pos_tan","remove","remove","segment","set","set","set_path","sub","sub_assign","symmetric_difference","symmetric_difference","to_owned","toggle","toggle","try_from","try_into","type_id","union","union","CCW","CW","Close","Conic","Cubic","EvenOdd","InverseEvenOdd","InverseWinding","Line","Move","PathDirection","PathFillType","PathSegmentMask","PathVerb","Quad","Winding","fill_path_with_paint","AttributeList","Average","CompressionLevel","DateTime","Default","HighButSlow","LowButFast","Metadata","None","StructureElementNode","alt","append_child","append_float","append_float_array","append_int","attributes","attributes_mut","author","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","child_vector","clone","clone_into","compression_level","creation","creator","day","day_of_week","default","default","default","drop","encoding_quality","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","hash","hour","inner","inner_mut","into","into","into","keywords","lang","minute","modified","month","new","new_document","node_id","pdf_a","producer","raster_dpi","second","set_alt","set_child_vector","set_lang","set_node_id","set_type_string","structure_element_tree_root","subject","time_zone_minutes","title","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_string","unwrap","wrap","year","fractal_noise","turbulence","PictureRecorder","begin_recording","finish_recording_as_drawable","finish_recording_as_picture","fmt","new","recording_canvas","ALL","AVG","Comment","FilterFlag","NONE","Options","PAETH","SUB","UP","ZERO","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","comments","complement","complement","contains","contains","default","difference","difference","empty","empty","encode","encode_image","eq","eq","eq","equivalent","equivalent","equivalent","extend","filter_flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","hash","inner","inner_mut","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","keyword","new","not","partial_cmp","remove","remove","set","set","sub","sub_assign","symmetric_difference","symmetric_difference","text","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","unwrap","wrap","z_lib_level","Cliperator","Combine","Difference","Intersect","Intersects","Iterator","LastOp","Region","RegionOp","Replace","ReverseDifference","Spanerator","Union","XOR","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine","compute_region_complexity","contains","contains","contains","contains_point","contains_rect","contains_region","difference","difference","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_rect","get_boundary_path","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","intersect","intersect","intersects","intersects","intersects","intersects_rect","intersects_region","into","into","into","into","into_iter","into_iter","into_iter","is_complex","is_done","is_done","is_empty","is_rect","new","new","new","new","new_empty","next","next","next","next","next","op_rect","op_rect_region","op_region","op_region_rect","quick_contains","quick_reject","quick_reject","quick_reject_rect","quick_reject_region","read_from_memory","rect","rect","replace","replace","reset","reverse_difference","reverse_difference","rewind","rgn","set","set_empty","set_path","set_rect","set_rects","set_region","swap","to_owned","to_owned","to_owned","to_owned","translate","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","unwrap","unwrap","unwrap","wrap","wrap","wrap","write_to_memory","xor","xor","Complex","Corner","Empty","LastType","LowerLeft","LowerRight","NinePatch","Oval","RRect","Rect","SIZE_IN_MEMORY","Simple","Type","UpperLeft","UpperRight","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","contains","default","dump","dump_hex","dump_to_string","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get_type","hash","hash","height","inner","inner_mut","inset","into","into","into","is_complex","is_empty","is_nine_patch","is_oval","is_rect","is_simple","is_valid","new","new_empty","new_nine_patch","new_oval","new_rect","new_rect_radii","new_rect_xy","offset","outset","radii","read_from_memory","rect","set_empty","set_nine_patch","set_oval","set_rect","set_rect_radii","set_rect_xy","simple_radii","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","width","with_inset","with_offset","with_outset","wrap","write_to_memory","Blender","Blender","Child","ChildPtr","ChildType","ColorFilter","ColorFilter","Options","RuntimeEffect","Shader","Shader","Uniform","Variable","Varying","allow_blender","allow_color_filter","allow_shader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone_into","clone_into","clone_into","count","default","eq","eq","equivalent","equivalent","find_child","find_input","find_uniform","flags","fmt","fmt","fmt","fmt","fmt","fmt","force_unoptimized","from","from","from","from","from","from","hash","index","inner","inner_mut","input_size","inputs","into","into","into","is_array","is_color","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_shader","name","name","offset","size_in_bytes","source","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","uniform","uniform_size","uniforms","unwrap","wrap","ARRAY","COLOR","FRAGMENT","Flags","Float","Float2","Float2x2","Float3","Float3x3","Float4","Float4x4","HALF_PRECISION","Int","Int2","Int3","Int4","Type","VERTEX","all","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","not","partial_cmp","remove","remove","set","set","sub","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union","CubicResampler","FilterMode","FilterOptions","Linear","Linear","Linear","MipmapMode","Nearest","Nearest","Nearest","None","SamplingMode","SamplingOptions","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","cubic","default","eq","eq","equivalent","filter","fmt","fmt","from","from","from","from","from","from_aniso","hash","inner","inner_mut","into","into","is_aniso","max_aniso","mipmap","mipmap","new","sampling","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","use_cubic","wrap","GradientInfo","Shader","borrow","borrow_mut","clone","clone_into","color_count","color_offsets","colors","default","eq","fmt","fmt","fractal_perlin_noise","from","gradient_flags","image","into","is_a_image","is_opaque","linear_gradient","linear_gradient_with_interpolation","radial_gradient","radial_gradient_with_interpolation","shaders","sweep_gradient","sweep_gradient_with_interpolation","tile_mode","to_owned","try_from","try_into","turbulence_perlin_noise","two_point_conical_gradient","two_point_conical_gradient_with_interpolation","type_id","with_color_filter","with_local_matrix","with_working_color_space","blend","color","color_in_space","coord_clamp","empty","new","blend","color","color_in_space","coord_clamp","empty","fractal_noise","turbulence","AsNativeRunHandler","AsRunHandler","BiDiRunIterator","Feature","FontRunIterator","LanguageRunIterator","RunHandler","RunHandler","RunIterator","ScriptRunIterator","Shaper","TextBlobBuilderRunHandler","as_native_run_handler","as_native_run_handler","as_run_handler","as_run_handler","at_end","begin_line","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit_line","commit_run_buffer","commit_run_info","consume","current_font","current_language","current_level","current_script","default","end","end_of_current_run","end_point","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","icu","into","into","make_blob","new","new","new_bidi_run_iterator","new_core_text","new_font_mgr_run_iterator","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_primitive","new_script_run_iterator","new_shape_dont_wrap_or_reorder","new_shape_then_wrap","new_shaper_driven_wrapper","new_std_language_run_iterator","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","purge_caches","purge_harf_buzz_cache","run_buffer","run_handler","run_info","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","start","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","init","Buffer","RunHandler","RunInfo","advance","begin_line","bidi_level","borrow","borrow","borrow_mut","borrow_mut","clusters","commit_line","commit_run_buffer","commit_run_info","fmt","fmt","font","from","from","glyph_count","glyphs","into","into","new","offsets","point","positions","run_buffer","run_info","try_from","try_from","try_into","try_into","type_id","type_id","utf8_range","Fill","Fill","Hairline","Hairline","InitStyle","Stroke","StrokeAndFill","StrokeRec","Style","apply_to_paint","apply_to_path","apply_to_path_inplace","borrow","borrow","borrow_mut","borrow_mut","cap","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_paint","has_equal_effect","hash","hash","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","into","into","is_fill_style","is_hairline_style","join","miter","need_to_apply","new","new_fill","new_hairline","res_scale","set_fill_style","set_hairline_style","set_res_scale","set_stroke_params","set_stroke_style","style","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","BackendHandleAccess","BackendSurfaceAccess","ContentChangeMode","Discard","DiscardWrite","DiscardWrite_BackendHandleAccess","FlushRead","FlushRead_BackendHandleAccess","FlushWrite","FlushWrite_BackendHandleAccess","NoAccess","Present","Retain","Surface","borrow","borrow","borrow_mut","borrow_mut","canvas","clone","clone","clone_into","clone_into","direct_context","draw","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_backend_render_target","from_backend_texture","from_ca_metal_layer","from_mtk_view","generation_id","get_backend_render_target","get_backend_texture","hash","hash","height","image_info","image_snapshot","image_snapshot_with_bounds","into","into","new_null","new_raster","new_raster_direct","new_raster_n32_premul","new_render_target","new_surface","new_surface_with_dimensions","notify_content_will_change","peek_pixels","props","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","replace_backend_texture","replace_backend_texture_with_mode","resolve_msaa","surfaces","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","write_pixels_from_bitmap","write_pixels_from_pixmap","BackendSurfaceAccess","NoAccess","Present","null","raster","raster_n32_premul","wrap_pixels","BackendSurfaceAccess","NoAccess","Present","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","null","raster","raster_n32_premul","to_owned","try_from","try_into","type_id","wrap_pixels","Canvas","Dom","LoadError","borrow","borrow_mut","canvas","clone","clone_into","cmp","description","eq","equivalent","fmt","fmt","fmt","from","from_bytes","from_str","hash","into","partial_cmp","read","render","set_container_size","to_owned","to_string","try_from","try_into","type_id","CONVERT_TEXT_TO_PATHS","Canvas","Flags","NO_PRETTY_XML","RELATIVE_PATH_ENCODING","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","default","deref","difference","drop","empty","end","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","hash","insert","intersection","intersects","into","into","into_iter","is_all","is_empty","iter","iter_names","new","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","from_argb","from_table","ALL","ALL_TEXT_DECORATIONS","AboveBaseline","Affinity","All","AllAttributes","Alphabetic","Background","Baseline","BelowBaseline","Block","BlockIndex","BlockRange","Bottom","Center","Dashed","Decoration","Decorations","DisableAll","DisableFirstAscent","DisableLastDescent","Dotted","Double","Downstream","EMPTY_BLOCK","EMPTY_BLOCKS","EMPTY_INDEX","EMPTY_RANGE","EMPTY_TEXT","End","Font","FontArguments","FontCollection","FontFamilies","FontFeature","Foreground","Gaps","Ideographic","IncludeLineSpacingBottom","IncludeLineSpacingMiddle","IncludeLineSpacingTop","Justify","LINE_THROUGH","LTR","Left","LetterSpacing","LineMetrics","Max","Max","Middle","NO_DECORATION","None","OVERLINE","Paragraph","ParagraphBuilder","ParagraphCache","ParagraphStyle","Placeholder","PlaceholderAlignment","PlaceholderStyle","PositionWithAffinity","RTL","RangeExtensions","RectHeightStyle","RectWidthStyle","Right","Shadow","Solid","Start","Strut","StrutStyle","StyleMetrics","StyleType","TextAlign","TextBaseline","TextBox","TextDecoration","TextDecorationMode","TextDecorationStyle","TextDirection","TextHeightBehavior","TextIndex","TextRange","TextShadow","TextStyle","Through","Tight","Tight","Top","TypefaceFontProvider","TypefaceFontStyleSet","UNDERLINE","Upstream","Wavy","WordSpacing","abandon","add","add_font_feature","add_placeholder","add_shadow","add_text","affinity","alias","alignment","all","append_typeface","apply_rounding_hack","ascent","background","baseline","baseline","baseline_offset","baseline_shift","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","blocks_before","blur_sigma","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clear_background_color","clear_caches","clear_foreground_color","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_for_placeholder","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_typeface","cmp","color","color","color","complement","contains","contains","count","decoration","decoration_color","decoration_mode","decoration_mut","decoration_style","decoration_thickness_multiplier","decoration_type","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_emoji_fallback","default_fallback","default_fallback_char","deref","deref","deref_mut","deref_mut","descent","difference","direct","disable_font_fallback","effective_align","ellipsis","ellipsized","empty","empty","enable_font_fallback","end","end","end_excluding_whitespaces","end_including_newline","end_index","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","equals_by_fonts","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","fallback_manager","family_name","find_typefaces","find_typefaces_with_font_arguments","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_arguments","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_size","font_size","font_style","font_style","force_strut_height","foreground","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_paragraph_style","get_style_metrics","get_style_metrics_count","get_text","half_leading","half_leading","hard_break","has_background","has_foreground","has_shadow","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height_override","height_override","hinting_is_on","index","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","is_placeholder","iter","iter","iter_names","leading","left","letter_spacing","line_number","locale","match_one_attribute","max_lines","mode","name","new","new","new","new","new","new","new","new","new","new","new","new","new","not","offset","paragraph","paragraph_cache","paragraph_cache_mut","partial_cmp","peek_style","pop","position","print_statistics","push_style","range","range","rect","register_typeface","remove","replace_tab_characters","reset","reset","reset_font_features","reset_shadows","set","set_apply_rounding_hack","set_asset_font_manager","set_background_color","set_background_paint","set_baseline_shift","set_color","set_decoration","set_decoration_color","set_decoration_mode","set_decoration_style","set_decoration_thickness_multiplier","set_decoration_type","set_default_font_manager","set_default_font_manager_and_family_names","set_dynamic_font_manager","set_ellipsis","set_font_arguments","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_force_strut_height","set_foreground_color","set_foreground_paint","set_half_leading","set_half_leading","set_height","set_height","set_height","set_height_override","set_height_override","set_leading","set_letter_spacing","set_locale","set_max_lines","set_placeholder","set_replace_tab_characters","set_strut_enabled","set_strut_style","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_typeface","set_word_spacing","shadows","shift","start","start","start_index","strut_enabled","strut_style","style","style","style","sub","sub_assign","symmetric_difference","text_align","text_baseline","text_before","text_direction","text_height_behavior","text_style","text_style","text_style","thickness_multiplier","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn_hinting_off","turn_on","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typeface","union","unlimited_lines","unscaled_ascent","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","value","width","width","width","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","ExtendedVisitorInfo","FontInfo","GlyphClusterInfo","GlyphInfo","Paragraph","VisitorFlags","VisitorInfo","WHITE_SPACE","advance","advance_x","all","all","alphabetic_baseline","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","complement","complement","contains","contains","contains_color_font_or_bitmap","contains_emoji","count","count","did_exceed_max_lines","difference","difference","empty","empty","eq","eq","eq","eq","equivalent","extend","extended_visit","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","font","font","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","get_actual_text_range","get_closest_glyph_cluster_at","get_closest_utf16_glyph_info_at","get_font_at","get_font_at_utf16_offset","get_fonts","get_glyph_cluster_at","get_glyph_info_at_utf16_offset","get_glyph_position_at_coordinate","get_line_metrics","get_line_metrics_at","get_line_number_at","get_line_number_at_utf16_offset","get_path","get_path_at","get_rects_for_placeholders","get_rects_for_range","get_word_boundary","glyphs","glyphs","grapheme_cluster_text_range","grapheme_layout_bounds","hash","height","ideographic_baseline","inner","inner_mut","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into_iter","is_all","is_all","is_ellipsis","is_empty","is_empty","iter","iter","iter_names","iter_names","layout","line_number","longest_line","mark_dirty","max_intrinsic_width","max_width","min_intrinsic_width","new","not","origin","origin","paint","partial_cmp","position","positions","positions","remove","remove","set","set","sub","sub_assign","symmetric_difference","symmetric_difference","text_direction","text_range","text_range","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","unresolved_codepoints","unresolved_glyphs","unwrap","utf8_starts","utf8_starts","visit","wrap","NUM_IMAGE_KEY_VALUES","draw_image","draw_image_rect","get_image_key_values","Inverted","Mode","Normal","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","DoIncludeData","DontIncludeData","FactoryId","FontTableTag","IncludeDataIfLocal","LocalizedString","LocalizedStringsIter","SerializeBehavior","Typeface","TypefaceId","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone","clone_into","clone_into","clone_with_arguments","copy_table_data","count_glyphs","count_tables","deserialize","eq","eq","equal","equivalent","equivalent","family_name","fmt","fmt","fmt","fmt","font_style","from","from","from_data","from_name","get_kerning_pair_adjustments","get_table_data","get_table_size","hash","into","into","is_bold","is_fixed_pitch","is_italic","language","make_deserialize","new","new_family_name_iterator","next","post_script_name","serialize","serialize_stream","str_to_glyphs","string","table_tags","text_to_glyphs","to_font_data","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unichar_to_glyph","unichars_to_glyphs","unique_id","units_per_em","variation_design_parameters","variation_design_position","Camera3D","CustomTypefaceBuilder","DrawableAndBounds","FACTORY_ID","OrderedFontMgr","Patch3D","Path","TypefaceGlyph","View3D","append","axis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","default","deref","deref_mut","detach","dot_with","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_data","inner","inner","inner_mut","inner_mut","into","into","into","location","new","new","new_null_canvas","observer","origin","parse_path","patch_to_matrix","reset","reset","set_font_style","set_glyph","set_metrics","shadow_utils","text_utils","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","unwrap","unwrap","update","v","wrap","wrap","zenith","Absolute","PathEncoding","Relative","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","from_svg","hash","into","to_owned","to_svg","to_svg_with_encoding","try_from","try_into","type_id","ALL","CONCAVE_BLUR_ONLY","DIRECTIONAL_LIGHT","GEOMETRIC_ONLY","ShadowFlags","TRANSPARENT_OCCLUDER","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","compute_tonal_colors","contains","difference","draw_shadow","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","hash","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","local_bounds","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","Align","Center","Left","Right","borrow","borrow_mut","clone","clone_into","draw_str","draw_text","eq","equivalent","fmt","from","get_path","hash","into","to_owned","try_from","try_into","type_id","Bone","BoneIndices","BoneWeights","Builder","BuilderFlags","HAS_COLORS","HAS_TEX_COORDS","Last","MAX_CUSTOM_ATTRIBUTES","TriangleFan","TriangleStrip","Triangles","VertexMode","Vertices","all","all","apply_bones","approximate_size","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","cmp","colors","colors","complement","complement","contains","contains","decode","detach","difference","difference","empty","empty","encode","eq","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","has_bones","has_colors","has_indices","has_tex_coords","hash","hash","index_count","indices","indices","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into_iter","is_all","is_all","is_empty","is_empty","is_volatile","is_volatile","iter","iter","iter_names","iter_names","mode","new","new_copy","not","partial_cmp","positions","positions","remove","remove","set","set","sub","sub_assign","symmetric_difference","symmetric_difference","tex_coords","tex_coords","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","unique_id","vertex_count","Compression","Lossless","Lossy","Options","borrow","borrow_mut","clone","clone_into","compression","default","encode","encode_image","eq","fmt","from","into","quality","to_owned","try_from","try_into","type_id","NativeTransmutableWrapper","PointerWrapper","RefWrapper","ValueWrapper","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","unwrap","unwrap","unwrap","wrap","wrap","wrap","wrap_mut","wrap_ref","Centered","MAX_PLANES","PlaneConfig","S410","S411","S420","S422","S440","S444","Siting","Subsampling","UYV","UYVA","Unknown","Unknown","YUV","YUVA","YUVAInfo","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_total_bytes","default","dimensions","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","has_alpha","has_alpha","hash","hash","height","inner","inner_mut","into","into","new","num_channels_in_plane","num_channels_in_plane","num_planes","num_planes","origin","origin_matrix","plane_config","plane_dimensions","plane_dimensions","plane_subsampling_factors","plane_subsampling_factors","siting_xy","subsampling","subsampling_factors","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","width","with_dimensions","with_subsampling","wrap","yuv_color_space","DataType","Float16","Last","Last","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_color_type_for_data_type","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","into","into","num_channels_and_data_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DATA_TYPE_CNT","DataType","Float16","MAX_PLANES","MAX_PLANES","Unorm10_Unorm2","Unorm16","Unorm8","YUVAPixmapInfo","YUVAPixmaps","allocate","compute_total_bytes","data_type","data_type","fmt","fmt","from_data","from_data_type","from_external_memory","from_external_pixmaps","init_pixmaps_from_single_allocation","is_supported","new","num_planes","num_planes","pixmaps_info","plane","plane_info","plane_infos","planes","recommended_rgba_color_type","row_bytes","row_bytes_iter","yuv_color_space","yuva_info","yuva_info","yuva_pixmap_info","DataType","Float16","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","all","default","default_color_type_for_data_type","enable_data_type","fmt","num_channels_and_data_type","supported"],"q":[[0,"skia_safe"],[3550,"skia_safe::annotate"],[3553,"skia_safe::blenders"],[3554,"skia_safe::canvas"],[3862,"skia_safe::canvas::lattice"],[3895,"skia_safe::codec"],[4094,"skia_safe::codec::bmp_decoder"],[4096,"skia_safe::codec::codec_animation"],[4103,"skia_safe::codec::codecs"],[4108,"skia_safe::codec::gif_decoder"],[4110,"skia_safe::codec::ico_decoder"],[4112,"skia_safe::codec::jpeg_decoder"],[4114,"skia_safe::codec::pixmap_utils"],[4116,"skia_safe::codec::png_decoder"],[4118,"skia_safe::codec::wbmp_decoder"],[4120,"skia_safe::codec::webp_decoder"],[4122,"skia_safe::color_filter"],[4138,"skia_safe::color_filter::color_filters"],[4152,"skia_safe::color_filters"],[4166,"skia_safe::color_matrix"],[4182,"skia_safe::color_matrix_filter"],[4183,"skia_safe::colors"],[4195,"skia_safe::contour_measure"],[4291,"skia_safe::corner_path_effect"],[4292,"skia_safe::dash_path_effect"],[4293,"skia_safe::discrete_path_effect"],[4294,"skia_safe::document"],[4311,"skia_safe::document::state"],[4329,"skia_safe::drawable"],[4341,"skia_safe::drawable::gpu_draw_handler"],[4344,"skia_safe::encode"],[4347,"skia_safe::font"],[4415,"skia_safe::font_arguments"],[4466,"skia_safe::font_arguments::palette"],[4487,"skia_safe::font_arguments::variation_position"],[4507,"skia_safe::font_metrics"],[4626,"skia_safe::font_parameters"],[4632,"skia_safe::font_parameters::variation"],[4657,"skia_safe::font_style"],[4765,"skia_safe::gpu"],[5226,"skia_safe::gpu::backend_formats"],[5233,"skia_safe::gpu::backend_render_targets"],[5238,"skia_safe::gpu::backend_textures"],[5244,"skia_safe::gpu::context_options"],[5326,"skia_safe::gpu::direct_contexts"],[5328,"skia_safe::gpu::gl"],[5552,"skia_safe::gpu::images"],[5561,"skia_safe::gpu::mtl"],[5598,"skia_safe::gpu::surfaces"],[5606,"skia_safe::gpu::vk"],[6552,"skia_safe::gpu::vk::mutable_texture_states"],[6555,"skia_safe::gradient_shader"],[6684,"skia_safe::gradient_shader::interpolation"],[6702,"skia_safe::graphics"],[6718,"skia_safe::high_contrast_config"],[6737,"skia_safe::high_contrast_filter"],[6762,"skia_safe::high_contrast_filter::high_contrast_config"],[6766,"skia_safe::icu"],[6767,"skia_safe::image"],[6882,"skia_safe::image::images"],[6892,"skia_safe::image_filter"],[6941,"skia_safe::image_filters"],[7025,"skia_safe::images"],[7049,"skia_safe::jpeg_encoder"],[7091,"skia_safe::line_2d_path_effect"],[7092,"skia_safe::luma_color_filter"],[7093,"skia_safe::matrix"],[7381,"skia_safe::named_transfer_fn"],[7387,"skia_safe::overdraw_color_filter"],[7389,"skia_safe::paint"],[7447,"skia_safe::path"],[7734,"skia_safe::path_1d_path_effect"],[7754,"skia_safe::path_2d_path_effect"],[7755,"skia_safe::path_effect"],[7786,"skia_safe::path_measure"],[7881,"skia_safe::path_types"],[7897,"skia_safe::path_utils"],[7898,"skia_safe::pdf"],[7986,"skia_safe::perlin_noise_shader"],[7988,"skia_safe::picture_recorder"],[7995,"skia_safe::png_encoder"],[8122,"skia_safe::region"],[8269,"skia_safe::rrect"],[8370,"skia_safe::runtime_effect"],[8465,"skia_safe::runtime_effect::uniform"],[8575,"skia_safe::sampling_options"],[8634,"skia_safe::shader"],[8672,"skia_safe::shader::shaders"],[8677,"skia_safe::shader_mask_filter"],[8678,"skia_safe::shaders"],[8685,"skia_safe::shaper"],[8770,"skia_safe::shaper::icu"],[8771,"skia_safe::shaper::run_handler"],[8807,"skia_safe::stroke_rec"],[8870,"skia_safe::surface"],[8948,"skia_safe::surface::surfaces"],[8955,"skia_safe::surfaces"],[8976,"skia_safe::svg"],[9005,"skia_safe::svg::canvas"],[9079,"skia_safe::table_color_filter"],[9081,"skia_safe::textlayout"],[9792,"skia_safe::textlayout::paragraph"],[9984,"skia_safe::tiled_image_utils"],[9988,"skia_safe::trim_path_effect"],[10006,"skia_safe::typeface"],[10081,"skia_safe::utils"],[10166,"skia_safe::utils::parse_path"],[10187,"skia_safe::utils::shadow_utils"],[10252,"skia_safe::utils::text_utils"],[10273,"skia_safe::vertices"],[10423,"skia_safe::webp_encoder"],[10444,"skia_safe::wrapper"],[10464,"skia_safe::yuva_info"],[10548,"skia_safe::yuva_pixmap_info"],[10608,"skia_safe::yuva_pixmaps"],[10645,"skia_safe::yuva_pixmaps::yuva_pixmap_info"],[10680,"skia_bindings"],[10681,"skia_bindings"],[10682,"skia_bindings"],[10683,"skia_bindings"],[10684,"skia_bindings"],[10685,"core::marker"],[10686,"skia_bindings"],[10687,"skia_bindings"],[10688,"skia_bindings"],[10689,"core::ops::function"],[10690,"skia_bindings"],[10691,"core::iter::traits::iterator"],[10692,"core::fmt"],[10693,"core::fmt"],[10694,"skia_bindings"],[10695,"skia_bindings"],[10696,"skia_bindings"],[10697,"skia_bindings"],[10698,"skia_bindings"],[10699,"bitflags::iter"],[10700,"std::os::raw"],[10701,"skia_bindings"],[10702,"std::io"]],"d":["","pixel with a half float for alpha","pixel with a little endian uint16_t for alpha","","","pixel with 4 bits for alpha, red, green, blue; in 16-bit …","","","pixel with alpha in 8-bit byte","","","","","","","","pixel with 10 bits each for blue, green, red; in 32-bit …","pixel with 10 bits each for blue, green, red; in 32-bit …","10 bits for blue, green, red; 2 bits for alpha; in 32-bit …","pixel with 8 bits for blue, green, red, alpha; in 32-bit …","","","","","","","","","","","","","","","<code>Bitmap</code> describes a two-dimensional raster pixel array. …","","","Blender represents a custom blend function in the Skia …","","","","","","","","","<code>Canvas</code> provides an interface for drawing, and how the …","","","","","","","","","","","","","","","","","","","","","","<code>ColorTable</code> holds the lookup tables for each channel (ARGB) …","","","","All Sk* types are accessible via skia_safe::","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait representing encoded text.","","","","","","","","","","","","","","","","","","","","","","","","","","","pixel with grayscale level in 8-bit byte","","","","Wraps a native type that can be represented in Rust memory.","","","","","","","","","","","","","","<code>Image</code> describes a two dimensional array of pixels to draw. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum number of points an iterator will return for …","","MaskFilter is the base class for object that perform …","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","","","","","","","","","","","","","","","","","","Implement this trait to use a pixel type in …","","","","","","","","","All Sk* types are accessible via skia_safe::","","pixel with a little endian uint16_t for red, green, blue …","pixel with a half float for red and green","pixel with a little endian uint16_t for red and green","pixel with a uint8_t for red and green","","A wrapper type represented by a reference counted pointer …","","","","","","pixel with 10 bits each for red, green, blue; in 32-bit …","pixel with 5 bits red, 6 bits green, 5 bits blue, in …","pixel with 8 bits each for red, green, blue; in 32-bit word","","10 bits for red, green, blue; 2 bits for alpha; in 32-bit …","pixel with 10 used bits (most significant) followed by 6 …","pixel with 8 bits for red, green, blue, alpha; in 32-bit …","pixel with half floats for red, green, blue, alpha in …","pixel with half floats in <code>[0,1]</code> for red, green, blue, …","pixel using C float for red, green, blue, alpha; in …","","","","","","","","","","","A wrapper type that represents a native type with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Surface</code> is responsible for managing the pixels that a …","","","","","","","","","Skia                | GL_COMPRESSED_*     | MTLPixelFormat*…","","","","","","","","","","","uninitialized","","","","","","","","","","","","","","","","","","","Specifies the structure of planes for a YUV image with …","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","","","","","","","","","","","","","","","","","","","","","","","Appends arc to <code>Path</code>, as the start of new contour. Arc …","","","","","","","","","","","","Adds circle centered at (x, y) of size radius to <code>Path</code>, …","","","","Adds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …","","","Appends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.","Appends src to <code>Path</code>, transformed by matrix. Transformed …","","Adds contour created from line array, adding <code>pts.len() - 1</code> …","","","","Adds a new contour to the path, defined by the rect, and …","","Appends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…","","","Adds rrect to <code>Path</code>, creating a new closed contour. If dir …","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Sets <code>ImageInfo</code> to width, height, and native color type; …","Sets <code>ImageInfo</code> to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","","","","","","","","","","","","","","","","","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","","","","","","","","","","","","","","","Returns <code>AlphaType</code>.","","","","","","","","","","","","","","","Returns the approximate byte size of the <code>Path</code> in memory.","","","Returns the approximate bounds that would result from …","Returns the approximate bounds that would result from …","","","","","","","Appends arc to <code>Path</code>. Arc added is part of ellipse bounded …","","","","Appends arc to <code>Path</code>. Arc is implemented by one or more …","","","Appends arc to <code>Path</code>, after appending line if needed. Arc …","","","","","<code>arithmetic()</code>","","","","","","","","","","","","","","Returns a new image from the bitmap. If the bitmap is …","Returns a new image from the bitmap. If the bitmap is …","","","","","","","","","","","","","","","","","Treat a <code>&amp;[u16]</code> as UTF16 encoded text.","Treat a <code>&amp;[u32]</code> as UTF32 encoded text.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the back-end texture. If <code>Image</code> has no back-end …","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","Create a blur mask filter.","Create a blur mask filter.","<code>blur()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The y coordinate of the rectangle’s bottom edge.","The y coordinate of the rectangle’s bottom edge.","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","Returns minimum and maximum axes values of <code>Point</code> array. …","","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","Returns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.","","","","","Access the underlying pixels as a byte array. This is a …","","Returns number of bytes per pixel required by <code>ColorType</code>.","","","Returns number of bytes per pixel required by <code>ColorType</code>.","","","","","","","","Returns <code>true</code> if the handle can be sent to another thread.","","All Sk* types are accessible via skia_safe::","Returns <code>Canvas</code> that draws into <code>Surface</code>. Subsequent calls …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …","","","","","","","","","","All Sk* types are accessible via skia_safe::","","<code>color_filter()</code>","","","","","","","Returns <code>ColorSpace</code>, the range of colors, associated with …","","","","Returns <code>ColorSpace</code>, the range of colors, associated with …","","","Returns a smart pointer to <code>ColorSpace</code>, the range of …","","","","","","","","Returns <code>ColorType</code> if known; otherwise, returns …","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","<code>compose()</code>","","","Construct a color filter whose effect is to first apply …","","","","","Returns minimum memory required for pixel storage. Does …","","","","Returns minimum memory required for pixel storage. Does …","","","Returns <code>true </code>if all pixels are opaque. <code>ColorType</code> …","","Returns <code>true </code>if all pixels are opaque. <code>ColorType</code> …","","","","","","Returns minimum and maximum axes values of the lines and …","Given a per-plane row bytes, determine size to allocate …","Determine size to allocate for all planes. Optionally …","","","","","Adds conic from last point towards (x1, y1), to (x2, y2), …","Returns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…","","","Returns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …","Whether all set bits in a source flags value are also set …","","","","","","","","","","","","Whether all set bits in a source flags value are also set …","Checks if a given text blob contains colored font or bitmap","Checks if a given text blob contains glyph with emoji","","","","","All Sk* types are accessible via skia_safe::","","Approximates conic with quad array. Conic is constructed …","","","","","","","","","","","","","","","","","","","","","Returns the number of points in <code>Path</code>. <code>Point</code> count is …","","","","Returns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …","<code>crop()</code>","","","","","","","","","Adds cubic from last point towards (x1, y1), then towards …","","","","","","","","","","","","The per-YUV<code>[A]</code> channel data type.","","1..31","0..6, 0==Sunday","","","","","","","","","","See <code>Bitmap::new()</code>.","","","","","See <code>Self::new()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","<code>dilate()</code>","Returns <code>ISize { width(), height() }</code>.","","","","Dimensions of the full resolution image (after planes have …","Returns <code>ISize { width(), height() }</code>.","","","","Returns <code>ISize</code> <code>{ width(), height() }</code>.","","rust-skia helper, not in Skia","","","","<code>displacement_map()</code>","","","<code>distant_lit_diffuse()</code>","<code>distant_lit_specular()</code>","","","","","","","","All Sk* types are accessible via skia_safe::","","","","","","","","","","","Draws <code>Surface</code> contents to canvas, with its top-left corner …","","All Sk* types are accessible via skia_safe::","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","","","","See <code>Path::dump_as_data()</code>","","","","","Writes text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…","See <code>Path::dump_as_data()</code>","","","","","","","","","Get a flags value with all bits unset.","","Get a flags value with all bits unset.","Update to add support for pixmaps with <code>num_channels</code> …","","","","","","","","See <code>Self::encode_to_data_with_quality</code>","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","","","Returns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","<code>erode()</code>","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Shares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …","","Shares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …","","","","","","","","","","","Returns <code>PathFillType</code>, the rule used to fill <code>Path</code>.","","","","Converts the src color (in src colorspace), into the dst …","","","","","","","","","","","","","","","","See <code>Self::flush_with_info()</code>","","","Version of <code>flush()</code> that uses a default <code>gpu::FlushInfo</code>. …","","","","","","","","","","Flushes any pending uses of texture-backed images in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All Sk* types are accessible via skia_safe::","","","All Sk* types are accessible via skia_safe::","","","","","","","All Sk* types are accessible via skia_safe::","","All Sk* types are accessible via skia_safe::","","","All Sk* types are accessible via skia_safe::","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Image</code> from <code>backend_texture</code> associated with …","","","Wraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …","Wraps a GPU-backed texture into <code>Surface</code>. Caller must …","Creates <code>Image</code> from bitmap, sharing or copying bitmap …","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","","","","","","","Creates <code>Surface</code> from CAMetalLayer. Returned <code>Surface</code> takes …","","","","","","Use storage in Data as backing store for pixmaps’ …","","","","Like above but uses …","","","See <code>Self::from_encoded_with_alpha_type()</code>","Return an image backed by the encoded data, but attempt to …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Create a new <code>Data</code> referencing the file with the specified …","Create a new <code>Data</code> referencing the file with the specified …","Creates <code>Image</code> from data returned by <code>image_generator</code>. …","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","Creates <code>Surface</code> from MTKView. Returned <code>Surface</code> takes a …","","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","<code>self::picture()</code>","See <code>Self::from_picture_with_props()</code>","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","","","","","","","","","Creates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.","","","","","","","","","","","","","","","","","","Attempt to read size bytes into a <code>Data</code>. If the read …","","Attempt to read size bytes into a <code>Data</code>. If the read …","","","","","Creates <code>Image</code> from GPU texture associated with context. …","","","","","","","","Creates <code>Image</code> from <code>crate::YUVAPixmaps</code>.","Creates an <code>Image</code> from <code>YUV[A]</code> planar textures. This …","","","","","Returns a unique value corresponding to the pixels in …","","Returns a unique value corresponding to the pixels in …","(See Skia bug 1762.) Returns a non-zero, globally unique …","Returns unique value identifying the content of <code>Surface</code>. …","","","Returns the visible text on the line (excluding a possible …","Returns pixel address at <code>(x, y)</code>.","Returns pixel address at <code>(x, y)</code>.","Look up the pixel at <code>(x,y)</code> and return its alpha component, …","","Look up the pixel at <code>(x,y)</code> and return its alpha component, …","Retrieves the back-end render target. If <code>Surface</code> has no …","Retrieves the back-end texture. If <code>Surface</code> has no back-end …","","","Finds the closest glyph cluster for a visual text position","Finds the information associated with the closest glyph to …","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","Returns the font that is used to shape the text at the …","Returns the font used to shape the text at the given …","Returns the information about all the fonts used to shape …","Finds a glyph cluster for text index","Retrieves the information associated with the glyph …","Returns the index of the glyph that corresponds to the …","","","","","","","Returns line metrics info for the line","Finds the line number of the line that contains the given …","Finds the line number of the line that contains the given …","","","","Returns path for a text blob","Returns path for a given line","","","Returns <code>Point</code> at index in <code>Point</code> array. Valid range for …","Returns number of points in <code>Path</code>. Up to max points are …","","","Returns a vector of bounding boxes that enclose all text …","","","Returns the bounds of this bitmap, offset by its <code>PixelRef</code> …","Returns the bounds of this bitmap, offset by its <code>PixelRef</code> …","","","","Returns the number of verbs in the path. Up to max verbs …","","","","Finds the first and last glyphs that define a word …","","","","","","","","","","All Sk* types are accessible via skia_safe::","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the image has mipmap levels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns pixel row count.","","","","Returns pixel row count.","","","","","","","","","Returns pixel row count.","Returns pixel row count; may be zero or greater.","","","","","","","","","","","","","","0..23","","","","","All Sk* types are accessible via skia_safe::","Returns iff this shader is backed by a single <code>Image</code>. If …","All Sk* types are accessible via skia_safe::","","","Returns an <code>ImageInfo</code> describing the surface.","Returns a <code>ImageInfo</code> describing the width, height, color …","Returns <code>Image</code> capturing <code>Surface</code> contents. Subsequent …","Like the no-parameter version, this returns an image of …","","","Grows <code>Path</code> verb array and <code>Point</code> array to contain …","","","","","","","","","","","","","","Returns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…","","","Returns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…","","Takes an allocation that is assumed to be at least […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …","Interpolates between <code>Path</code> with <code>Point</code> array of equal size. …","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","","","Whether any set bits in a source flags value are also set …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Returns <code>true</code> if <code>Image</code> pixels represent transparency only. …","Returns <code>true</code> if the filter is guaranteed to never change …","","","","","","","","","","","","Returns <code>true</code> if the path is convex. If necessary, it will …","Tests if cubic is degenerate. Cubic with no length or that …","","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","Returns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …","","","Whether all bits in this flags value are unset.","","","","","Whether all bits in this flags value are unset.","","","","Returns <code>true</code> for finite <code>Point</code> array values between …","","","","","","","","","","","","","","","Returns <code>true</code> if pixels can not change.","","Returns <code>true</code> if pixels can not change.","","","Returns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.","","Returns if FillType describes area outside <code>Path</code> geometry. …","","Returns if contour is closed. Contour is closed if <code>Path</code> …","Returns <code>true</code> if <code>Image</code> is backed by an image-generator or …","Returns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …","Tests if line between <code>Point</code> pair is degenerate. Line with …","","","Returns <code>true</code> if <code>PixelRef</code> is <code>None</code>.","Returns <code>true</code> if <code>PixelRef</code> is <code>None</code>.","Returns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …","","","","","Returns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …","","Returns <code>true</code> if the shader is guaranteed to produce only …","Returns <code>true</code> if pixels ignore their alpha value and are …","","","Returns <code>true</code> if this path is recognized as an oval or …","","","","","","Tests if quad is degenerate. Quad with no length or that …","Returns <code>true</code> if <code>Bitmap</code> can be drawn.","Returns <code>true</code> if <code>Bitmap</code> can be drawn.","","Returns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …","","Returns <code>true</code> if path is representable as <code>RRect</code>. Returns …","","","","","","","Is this valid and does it use color types allowed by the …","Returns <code>true</code> if the contents of <code>Image</code> was created on or …","","","","","","","Returns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …","","","","","Returns <code>true</code> if <code>Image</code> can be drawn on either raster …","","Returns <code>true</code> if the path is volatile; it will not be …","","","","","","","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","","","","","Returns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …","","","","","","The x coordinate of the rectangle’s left edge.","The x coordinate of the rectangle’s left edge.","","","","","","","","","","","","","","","","","","","","","","","Adds line from last point to (x, y). If <code>Path</code> is empty, or …","","","","","","","","<code>magnifier()</code>","","","","","","","Creates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …","","","","","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","","","Returns subset of this image.","","","","","","","","","","","","","","","","<code>true</code> if the type matches the color type’s format.","","","All Sk* types are accessible via skia_safe::","","","<code>matrix_convolution()</code>","","","","","","","","","","","<code>merge()</code>","","","","","","","0..59","","","","","","Create a blender that implements the specified <code>BlendMode</code>.","","Create a blender that implements the specified <code>BlendMode</code>.","1..12","","","Adds beginning of contour at <code>Point</code> (x, y).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro to mark a Rust type as NativeTransmutable and test …","","","","","","","","","","","","","","Creates an empty <code>Bitmap</code> without pixels, with …","Creates a new <code>ColorTable</code> with ‘table’ used for all …","","","","","","","","","","","","","","","","Safety","","Safety","","","Constructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …","Constructs a native Strings array from a slice of …","","","<code>dimensions</code> should specify the size of the full resolution …","","","","Creates an empty <code>Bitmap</code> without pixels, with …","Initializes a YUVABackendTextureInfo to describe a set of …","","","Initializes the YUVAPixmapInfo from a YUVAInfo with …","","","","","","","","","","","","","","Creates a new <code>ColorTable</code> with ‘table’ used for all …","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a given byte slice without copying it.","Constructs Data from a given byte slice without copying it.","See <code>Self::new_color_space_with_context</code>","Creates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …","","","","","Creates <code>Image</code> from pixmap. <code>Image</code> is uploaded to GPU …","Constructs Data from a &amp;CStr by copying its contents.","Constructs Data from a &amp;CStr by copying its contents.","","","","","","","","","","","","","","Create a new path with the specified segments.","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Surface</code> without backing pixels. Drawing to <code>Canvas</code> …","","","","","","","","Allocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …","Allocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …","Creates a CPU-backed <code>Image</code> from compressed data.","Allocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …","Returns <code>Surface</code> on GPU indicated by context. Allocates …","","","","","","","","","","","","Constructs Data from a copy of a &amp;str.","Constructs Data from a copy of a &amp;str.","","","","","","See <code>Self::new_subset_with_context</code>","","Returns subset of this image.","Returns a compatible <code>Surface</code>, or <code>None</code>. Returned <code>Surface</code> …","Calls <code>Self::new_surface()</code> with the same <code>ImageInfo</code> as this …","Creates a GPU-backed <code>Image</code> from compressed data.","See <code>Self::new_texture_image_budgeted</code>","Returns <code>Image</code> backed by GPU texture associated with …","","","","","","","","","","","","","","","","","","Creates filtered <code>Image</code>. filter processes original <code>Image</code>, …","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","Notifies that <code>Surface</code> contents will be changed by code …","","Marks that pixels in <code>PixelRef</code> have changed. Subsequent …","","Marks that pixels in <code>PixelRef</code> have changed. Subsequent …","","","The number of crate::Pixmap planes.","The number of Pixmap planes.","","Number of pixmap planes.","","","","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …","","<code>offset()</code>","","","","","","","","","","","","","","","","","","","","","","","","All Sk* types are accessible via skia_safe::","","","","","","All Sk* types are accessible via skia_safe::","","","","","All Sk* types are accessible via skia_safe::","","All Sk* types are accessible via skia_safe::","All Sk* types are accessible via skia_safe::","All Sk* types are accessible via skia_safe::","","Copies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …","Copies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …","","Copies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …","","","","","All Sk* types are accessible via skia_safe::","","Returns <code>PixelRef</code>, which contains: pixel base address; its …","Returns <code>PixelRef</code>, which contains: pixel base address; its …","Returns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …","Returns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …","Returns pixel address, the base address corresponding to …","","Access the underlying pixels. This is a rust-skia specific …","Returns pixel address, the base address corresponding to …","","Returns a constant reference to the <code>Pixmap</code> holding the …","Returns a constant reference to the <code>Pixmap</code> holding the …","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","","Returns the dimensions for each plane. Dimensions are as …","Format of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>","All plane formats.","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","","Access the Pixmap planes.","","","","<code>point_lit_diffuse()</code>","<code>point_lit_specular()</code>","The number of points an iterator will return for the verb.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>SurfaceProps</code> for surface.","","","","","","","","Adds quad from last point towards (x1, y1), to (x2, y2). …","","","","","","","","","","","Appends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …","","","Adds conic from last point towards vector (dx1, dy1), to …","","","Adds cubic from last point towards vector (dx1, dy1), then …","","Adds line from last point to vector (dx, dy). If <code>Path</code> is …","","Adds beginning of contour relative to last point. If <code>Path</code> …","","Adds quad from last point towards vector (dx1, dy1), to …","","","","","","","","Copies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …","","Copies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …","Copies <code>crate::Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>.","See <code>Self::read_pixels_with_context()</code>","Copies <code>crate::Rect</code> of pixels from <code>Surface</code> into bitmap.","","See <code>Self::read_pixels_to_pixmap_with_context()</code>","Copies <code>crate::Rect</code> of pixels to dst.","Copies a <code>crate::Rect</code> of pixels from <code>Image</code> to dst. Copy …","Copies <code>crate::Rect</code> of pixels from <code>Image</code> to <code>dst_pixels</code>. …","","","Returns the recording context being used by the <code>Surface</code>.","","","","","","All Sk* types are accessible via skia_safe::","","Creates a new <code>Image</code> identical to this one, but with a …","Notify that the borrowed dependency is not referred to …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","If the surface was made via <code>Self::from_backend_texture</code> …","If the surface was made via <code>Self::from_backend_texture()</code> …","","","","","Resets to its initial state; all fields are set to zero, …","","","","","","","","Resets to its initial state; all fields are set to zero, …","Sets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …","","","","","","","","","","If a surface is GPU texture backed, is being drawn with …","","","","","Appends src to <code>Path</code>, from back to front. Reversed src …","Sets <code>Path</code> to its initial state, preserving internal …","","","","The x coordinate of the rectangle’s right edge.","The x coordinate of the rectangle’s right edge.","","","","","","","","","","","Returns row bytes, the interval from one pixel row to the …","","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","Returns row bytes, the interval from one pixel row to the …","","Returns number of pixels that fit on row. Should be …","","Returns number of pixels that fit on row. Should be …","Row bytes for all planes.","","","All Sk* types are accessible via skia_safe::","","","","","","","All Sk* types are accessible via skia_safe::","","","","","","","Copies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …","","","","","0..59","","","Returns a mask, where each set bit corresponds to a …","","","","Writes <code>Path</code> to buffer, returning the buffer written to, …","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","Sets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…","Sets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets FillType, the rule used to fill <code>Path</code>. While there is …","The contents of the <code>crate::FontArguments</code> will be copied …","","","","","","","","","","","","","","","","","","","","","","","","","","Sets internal flag to mark <code>Bitmap</code> as immutable. Once set, …","","Sets internal flag to mark <code>Bitmap</code> as immutable. Once set, …","","Sets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …","Sets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …","","","","Specifies whether <code>Path</code> is volatile; whether it will be …","","Sets the last point on the path. If <code>Point</code> array is empty, …","","","","","","","","","","","","","","","","","","Replaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …","Replaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All Sk* types are accessible via skia_safe::","","","All Sk* types are accessible via skia_safe::","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","","","","","","","","","","","","","","","","","<code>spot_lit_diffuse()</code>","<code>spot_lit_specular()</code>","","","","","","","","","","All Sk* types are accessible via skia_safe::","","","","","","","","The intersection of a source flags value with the …","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","The intersection of a source flags value with the …","","","","Checks whether there is a supported combination of color …","","","All Sk* types are accessible via skia_safe::","","","Swaps the fields of the two bitmaps.","Exchanges the verb array, <code>Point</code> array, weights, and …","","Swaps the fields of the two bitmaps.","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","Returns an approximation of the amount of texture memory …","","","","<code>tile()</code>","All Sk* types are accessible via skia_safe::","The number of minutes that this is ahead of or behind UTC.","","If the filter can be represented by a 5x4 matrix, this …","If the filter can be represented by a source color plus …","","","","","","","","","","","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …","","","Make a shader with the specified tiling, matrix and …","","Make a shader with the specified tiling, matrix and …","Make a shader with the specified tiling and mipmap …","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","Replaces FillType with its inverse. The inverse of …","","","","","The y coordinate of the rectangle’s top edge.","The y coordinate of the rectangle’s top edge.","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","Sets <code>ImageInfo</code> to width, height, and native color type; …","Sets <code>ImageInfo</code> to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …ll Sk* types are accessible via skia_safe::","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","Returns value unique to image. <code>Image</code> contents cannot …","","","","","","This function will return the number of unresolved glyphs …","Macro that implements Send and Sync.","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates internal bounds so that subsequent calls to …","","","","","","","","","","","Macro that verifies a variant name at compile time.","","","","All Sk* types are accessible via skia_safe::","","","","","","","Returns pixel count in each row. Should be equal or less …","","","","Returns pixel count in each row. Should be equal or less …","","","","","","Returns pixel count in each row; may be zero or greater.","","Returns pixel count in each row.","","","","","","","","","","","","Create a new shader that produces the same colors as …","","","","","","","","","","","Returns an image with the same “base” pixels as the …","","","Returns a YUVAInfo that is identical to this one but with …","","","","","","Return a shader that will apply the specified <code>local_matrix</code> …","","","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>.","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Return a shader that will compute this shader in a …","Return a color filter that will compute this filter in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap the handle in a type that can be sent to another …","","FFI interoperability for skia-safe’s wrapper types.","","","","Copies <code>crate::Rect</code> of pixels from the src <code>Bitmap</code> to the …","Copies <code>crate::Rect</code> of pixels from the src <code>Pixmap</code> to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","e.g. 2005","","","","","All Sk* types are accessible via skia_safe::","","","","","","All Sk* types are accessible via skia_safe::","","","","","","","","","Create a blender that implements the following: …","","Stack helper class calls <code>Canvas::restore_to_count()</code> when …","<code>Canvas</code> provides an interface for drawing, and how the …","","","Used to pass either a slice of <code>Point</code> or <code>RSXform</code> to …","initializes with previous contents","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","Selects if an array of points are drawn as discrete …","","","","","<code>SaveLayerFlags</code> provides options that may be used in any …","<code>SaveLayerRec</code> contains the state used to create the layer.","","<code>SrcRectConstraint</code> controls the behavior at the edge of …","","Provides access to Canvas’s pixels.","Returns the pixel base address, <code>ImageInfo</code>, <code>row_bytes</code>, and …","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","If not <code>None</code>, this triggers the same initialization …","Gets the size of the base or root layer in global canvas …","Returns the <code>SurfaceProps</code> associated with the canvas (i.e., …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","Hints at layer size limit","source bounds to draw from","Fills clip with color <code>color</code> using <code>BlendMode::Src</code>. This has …","","","","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","","","","","","","","","","","array of colors","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Replaces <code>Matrix</code> with matrix premultiplied with existing …","","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Sets <code>Self::bounds</code>, <code>Self::paint</code>, and <code>Self::backdrop</code> to <code>None</code>…","Creates an empty <code>Canvas</code> with no backing device or pixels, …","","","Returns <code>IRect</code> bounds of clip, unaffected by <code>Matrix</code>. If …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Returns the <code>gpu::DirectContext</code>. This is a rust-skia helper …","Makes <code>Canvas</code> contents undefined. Subsequent calls that …","Associates <code>Rect</code> on <code>Canvas</code> when an annotation; a key-value …","Draws arc using clip, <code>Matrix</code>, and <code>Paint</code> paint.","Draws circle at center with radius using clip, <code>Matrix</code>, and …","Fills clip with color <code>color</code>. <code>mode</code> determines how ARGB is …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, offset by …","Draws <code>RRect</code> outer and inner using clip, <code>Matrix</code>, and <code>Paint</code> …","Draws <code>count</code> glyphs, at positions relative to <code>origin</code> styled …","Draws glyphs at positions relative to <code>origin</code> styled with …","","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","","","","Draws <code>IRect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws line segment from <code>p1</code> to <code>p2</code> using clip, <code>Matrix</code>, and …","Draws oval oval using clip, <code>Matrix</code>, and <code>Paint</code>. In <code>paint</code>: …","Fills clip with <code>Paint</code> <code>paint</code>. <code>Paint</code> components, <code>Shader</code>, …","Draws a Coons patch: the interpolation of four cubics with …","Draws <code>Path</code> path using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. <code>Path</code> …","Draws <code>Picture</code> picture, using clip and <code>Matrix</code>; transforming …","Draws point <code>p</code> using clip, <code>Matrix</code> and <code>Paint</code> paint.","Draws <code>pts</code> using clip, <code>Matrix</code> and <code>Paint</code> <code>pain</code>. if the number …","Draws <code>Rect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws <code>Region</code> region using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. …","Draws <code>RRect</code> bounded by <code>Rect</code> rect, with corner radii …","Draws <code>RRect</code> rrect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","","Draws <code>String</code>, with origin at <code>(origin.x, origin.y)</code>, using …","","","Draws <code>TextBlob</code> blob at <code>(origin.x, origin.y)</code>, using clip, …","Draws <code>Vertices</code> vertices, a triangle mesh, using clip and …","Draws saved layers, if any. Frees up resources used by …","Restores <code>Canvas</code> to saved state. Drop is called when …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","Preserves LCD text, creates with prior layer contents","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a canvas that draws into bitmap. Use props to …","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Allocates raster <code>Canvas</code> that will draw directly into …","Allocates raster <code>Canvas</code> specified by inline image …","Preserves <code>Canvas::save()</code> count. Optionally saves <code>Canvas</code> …","","","","Returns <code>ImageInfo</code> for <code>Canvas</code>. If <code>Canvas</code> is not associated …","Writable pixels’ <code>ImageInfo</code>","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Returns <code>true</code> if clip is empty; that is, nothing will draw.","Returns <code>true</code> if clip is <code>Rect</code> and not empty. Returns <code>false</code> …","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","Returns bounds of clip, transformed by inverse of <code>Matrix</code>. …","Returns the current transform from local coordinates to …","Throws away the 3rd row and column in the matrix, so be …","Creates <code>Canvas</code> of the specified dimensions without a …","","Creates <code>Surface</code> matching info and props, and associates it …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","<code>Canvas</code> top layer origin, its top-left corner","Modifies overlay","","Returns <code>true</code> if <code>Canvas</code> has direct access to its pixels.","Address of pixels","Copies <code>SurfaceProps</code>, if <code>Canvas</code> is associated with raster …","Returns <code>true</code> if <code>Rect</code> <code>rect</code>, transformed by <code>Matrix</code>, can be …","Returns <code>true</code> if <code>path</code>, transformed by <code>Matrix</code>, can be …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>. <code>Matrix</code> …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into bitmap. <code>Matrix</code> and …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into pixmap. <code>Matrix</code> and …","Returns Ganesh context of the GPU surface associated with …","array of fill types","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Sets <code>Matrix</code> to the identity matrix. Any prior matrix state …","Removes changes to <code>Matrix</code> and clip since <code>Canvas</code> state was …","Restores <code>Canvas</code> to saved state immediately. Subsequent …","Restores state to <code>Matrix</code> and clip values when <code>Self::save()</code>…","Rotates <code>Matrix</code> by degrees about a point at <code>(p.x, p.y)</code>. …","Writable pixels’ row bytes","Saves <code>Matrix</code> and clip. Calling <code>Self::restore()</code> discards …","Returns the number of saved states, each containing: <code>Matrix</code>…","Saves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …","Helper that accepts an int between 0 and 255, and divides …","Saves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …","Scales <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","DEPRECATED – use <code>M44</code> version","Replaces <code>Matrix</code> with <code>matrix</code>. Unlike <code>Self::concat()</code>, any …","DEPRECATED – use <code>M44</code> version","Skews <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis. A …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Sometimes a canvas is owned by a surface. If it is, …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Returns the <code>SurfaceProps</code> associated with the canvas that …","DEPRECATED Legacy version of <code>Self::local_to_device()</code>, …","Translates <code>Matrix</code> by <code>d</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","x-axis values dividing bitmap","y-axis values dividing bitmap","","","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","Optional setting per rectangular grid entry to make it …","","","","","","source bounds to draw from","","","array of colors","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","array of fill types","","","","","","","","x-axis values dividing bitmap","y-axis values dividing bitmap","","","","Reflected across x-axis","Rotated 180","","","","","","","These values match the orientation …","","","","","","","","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Return <code>true</code> if the encoded origin includes a 90 degree …","Given an width and height of the source data, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copy the pixels in src into dst, applying the orientation …","Return a copy of the provided ImageInfo with the width and …","","","","","","","","","Construct a color filter whose effect is to first apply …","","Converts the src color (in src colorspace), into the dst …","","","","","Returns <code>true</code> if the filter is guaranteed to never change …","","","","If the filter can be represented by a 5x4 matrix, this …","If the filter can be represented by a source color plus …","Return a color filter that will compute this filter in a …","","Blends between the constant color (src) and input color …","","See <code>hsla_matrix_of_color_matrix()</code>","","","Create a color filter that multiplies the RGB channels by …","","","","","Create a table color filter, copying the table into the …","Create a table color filter, with a different table for …","Create a table color filter that holds a ref to the shared …","","Blends between the constant color (src) and input color …","","See <code>hsla_matrix_of_color_matrix()</code>","","","Create a color filter that multiplies the RGB channels by …","","","","","Create a table color filter, copying the table into the …","Create a table color filter, with a different table for …","Create a table color filter that holds a ref to the shared …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","Borrows the canvas for the current page on the document.","Close the document and return the encoded representation. …","Ends the page. This function consumes the document and …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The current page we are currently drawing on.","The number of pages in this document.","","","","","Document is currently on a page and can be drawn onto.","Document is currently open. May contain several pages.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type of a font weight.","Wrapper type for the width of a font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A description of a set BackendTextures that hold the …","A set of BackendTextures that hold the planar data for an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Initializes a YUVABackendTextureInfo to describe a set of …","","","","","","","","","","","","","","","","","","","","","The number of crate::Pixmap planes.","","","","","Format of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>","All plane formats.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If <code>true</code>, then allow to enable MSAA on new Intel GPUs.","Can the glyph atlas use multiple textures. If allowed, the …","If <code>true</code> this allows path mask textures to be cached. This …","Currently on ARM Android we disable the use of GL …","Bugs on certain drivers cause stencil buffers to leak. …","","","","","","","The threshold in bytes above which we will use a buffer …","","","","","","Disables the use of coverage counting shortcuts to render …","Disables distance field rendering for paths. Distance …","Disables correctness workarounds that are enabled for …","If <code>true</code>, the GPU will not be used to perform YUV -&gt; RGB …","If <code>true</code>, the TessellationPathRenderer will not be used for …","Construct mipmaps manually, via repeated downsampling …","","If <code>true</code>, and if supported, enables hardware tessellation …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The maximum size of cache textures used for Skia’s Glyph …","Above this threshold size in device space glyphs are drawn …","","","","","Specifies the number of samples Ganesh should use when …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","In Skia’s vulkan backend a single <code>Context</code> submit equates …","Overrides: These options override feature detection using …","Below this threshold size in device space distance field …","Default minimum size to use when allocating buffers for …","","Some ES3 contexts report the ES2 external image extension, …","Allow Ganesh to more aggressively reorder operations to …","Uses a reduced variety of shaders. May perform less …","Maximum number of GPU programs or pipelines to keep active …","This affects the usage of the PersistentCache. We can …","Controls whether we check for GL errors after functions …","If <code>true</code>, then add 1 pixel padding to all glyph masks in …","If <code>true</code>, the caps will never support mipmaps.","","","","","","","","","","","","","","Enables driver workaround to use draws instead of HW …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","The intersection of a source flags value with the …","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","Creates GPU-backed <code>Image</code> from <code>backend_texture</code> associated …","Creates GPU-backed <code>Image</code> from the provided GPU texture …","Creates a GPU-backed <code>Image</code> from pixmap. It is uploaded to …","Retrieves the existing backend texture. If <code>Image</code> is not a …","Returns subset of this image as a texture-backed image.","Creates a GPU-backed <code>Image</code> from compressed data. This …","Returns <code>Image</code> backed by GPU texture associated with …","Creates a GPU-backed <code>Image</code> from <code>YUVAPixmaps</code>. The image …","Creates a GPU-backed <code>Image</code> from <code>YUV[A]</code> planar textures. …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Safety","Safety","","","","","","","","","","","","Retrieves the back-end render target. If <code>Surface</code> has no …","Retrieves the back-end texture. If <code>Surface</code> has no back-end …","Returns <code>Surface</code> on GPU indicated by context. Allocates …","If a surface is a Ganesh-backed surface, is being drawn …","Wraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …","Wraps a GPU-backed texture into <code>Surface</code>. Caller must …","Creates <code>Surface</code> from CAMetalLayer. Returned <code>Surface</code> takes …","Creates <code>Surface</code> from MTKView. Returned <code>Surface</code> takes a …et a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Safety","Safety","Safety","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","","","","Safety","Safety","","Safety","","Safety","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type that represents either a slice of <code>Color</code>, or a slice …","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","On Windows, and if the default feature “embed-icudtl” …","","","","","CachingHint selects whether Skia may internally cache …","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","<code>Image</code> describes a two dimensional array of pixels to draw. …","","","Returns <code>AlphaType</code>.","","Retrieves the back-end texture. If <code>Image</code> has no back-end …","","","","","Returns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.","","","","","","","Returns a smart pointer to <code>ColorSpace</code>, the range of …","Returns <code>ColorType</code> if known; otherwise, returns …","","Returns <code>ISize</code> <code>{ width(), height() }</code>.","","See <code>Self::encode_to_data_with_quality</code>","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","Returns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …","","","","See <code>Self::flush_with_info()</code>","Version of <code>flush()</code> that uses a default <code>gpu::FlushInfo</code>. …","Flushes any pending uses of texture-backed images in the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Image</code> from <code>backend_texture</code> associated with …","Creates <code>Image</code> from bitmap, sharing or copying bitmap …","","See <code>Self::from_encoded_with_alpha_type()</code>","Return an image backed by the encoded data, but attempt to …","Creates <code>Image</code> from data returned by <code>image_generator</code>. …","","See <code>Self::from_picture_with_props()</code>","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","","Creates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.","Creates <code>Image</code> from GPU texture associated with context. …","Creates <code>Image</code> from <code>crate::YUVAPixmaps</code>.","Creates an <code>Image</code> from <code>YUV[A]</code> planar textures. This …","Returns <code>true</code> if the image has mipmap levels.","","Returns pixel row count.","Returns a <code>ImageInfo</code> describing the width, height, color …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>Image</code> pixels represent transparency only. …","Returns <code>true</code> if <code>Image</code> is backed by an image-generator or …","Returns <code>true</code> if pixels ignore their alpha value and are …","Returns <code>true</code> if the contents of <code>Image</code> was created on or …","Returns <code>true</code> if <code>Image</code> can be drawn on either raster …","Creates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …","Returns raster image or lazy image. Copies <code>Image</code> backed by …","Returns raster image. Copies <code>Image</code> backed by GPU texture …","Returns subset of this image.","","See <code>Self::new_color_space_with_context</code>","Creates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …","Creates <code>Image</code> from pixmap. <code>Image</code> is uploaded to GPU …","Creates a CPU-backed <code>Image</code> from compressed data.","See <code>Self::new_subset_with_context</code>","Returns subset of this image.","Creates a GPU-backed <code>Image</code> from compressed data.","See <code>Self::new_texture_image_budgeted</code>","Returns <code>Image</code> backed by GPU texture associated with …","Creates filtered <code>Image</code>. filter processes original <code>Image</code>, …","Copies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …","See <code>Self::read_pixels_with_context()</code>","See <code>Self::read_pixels_to_pixmap_with_context()</code>","Copies a <code>crate::Rect</code> of pixels from <code>Image</code> to dst. Copy …","Copies <code>crate::Rect</code> of pixels from <code>Image</code> to <code>dst_pixels</code>. …","Creates a new <code>Image</code> identical to this one, but with a …","Copies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …","Returns an approximation of the amount of texture memory …","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …","Make a shader with the specified tiling and mipmap …","","","","","","","Returns value unique to image. <code>Image</code> contents cannot …","","Returns pixel count in each row.","Returns an image with the same “base” pixels as the …","","","","","Return a <code>Image</code> using the encoded data, but attempts to …","Creates <code>Image</code> from data returned by <code>image_generator</code>. The …","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","Creates a filtered <code>Image</code> on the CPU. filter processes the …","Creates a CPU-backed <code>Image</code> from <code>bitmap</code>, sharing or copying …","Creates a CPU-backed <code>Image</code> from compressed data.","Creates CPU-backed <code>Image</code> from pixel data described by info.","","","","","<code>arithmetic()</code>","<code>blur()</code>","","","","","","<code>color_filter()</code>","","<code>compose()</code>","","","<code>crop()</code>","<code>dilate()</code>","<code>displacement_map()</code>","<code>distant_lit_diffuse()</code>","<code>distant_lit_specular()</code>","","","<code>erode()</code>","","","","Returns the argument unchanged.","<code>self::picture()</code>","","","","","Calls <code>U::from(self)</code>.","<code>magnifier()</code>","<code>matrix_convolution()</code>","<code>merge()</code>","<code>offset()</code>","<code>point_lit_diffuse()</code>","<code>point_lit_specular()</code>","<code>spot_lit_diffuse()</code>","<code>spot_lit_specular()</code>","<code>tile()</code>","","","","","","","","This is just a convenience type to allow passing <code>IRect</code>s, …","","","","","Create a filter that implements a custom blend mode. Each …","This filter takes an <code>crate::BlendMode</code> and uses it to …","Create a filter that blurs its input by the separate X and …","","","","","","","","","","","","","","Create a filter that composes ‘inner’ with ‘outer’…","Create a filter that applies a crop to the result of the …","","Create a filter that dilates each input pixel’s channel …","Create a filter that moves each pixel in its color input …","Create a filter that calculates the diffuse illumination …","Create a filter that calculates the specular illumination …","Create a filter that draws a drop shadow under the input …","Create a filter that renders a drop shadow, in exactly the …","Create a filter that always produces transparent black.","","","","","","Create a filter that erodes each input pixel’s channel …","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Create a filter that draws the ‘src_rect’ portion of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a filter that fills ‘lens_bounds’ with a …","Create a filter that applies an NxM image processing …","Create a filter that transforms the input image by ‘…","Create a filter that merges the filters together by …","","Create a filter that offsets the input filter by the given …","Create a filter that produces the <code>Picture</code> as its output, …","Create a filter that calculates the diffuse illumination …","Create a filter that calculates the specular illumination …","","Create a filter that fills the output with the per-pixel …","","Create a filter that calculates the diffuse illumination …","Create a filter that calculates the specular illumination …","Create a tile image filter.","","","","","","","","","","","","","","","","","","","","Return a <code>Image</code> using the encoded data, but attempts to …","Creates <code>Image</code> from data returned by <code>image_generator</code>. The …","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a filtered <code>Image</code> on the CPU. filter processes the …","Creates a CPU-backed <code>Image</code> from <code>bitmap</code>, sharing or copying …","Creates a CPU-backed <code>Image</code> from compressed data.","Creates CPU-backed <code>Image</code> from pixel data described by info.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","","","","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AddPathMode chooses how <code>add_path()</code> appends. Adding one <code>Path</code>…","","Four oval parts with radii (rx, ry) start at last <code>Path</code> …","","","","","","","","","","","","","","","Iterates through verb array, and associated <code>Point</code> array …","","","","The maximum number of points an iterator will return for …","","","","","","SegmentMask constants correspond to each drawing Verb type …","","Verb instructs <code>Path</code> how to interpret one or more <code>Point</code> and …","","Appends arc to <code>Path</code>, as the start of new contour. Arc …","Adds circle centered at (x, y) of size radius to <code>Path</code>, …","Adds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …","Appends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.","Appends src to <code>Path</code>, transformed by matrix. Transformed …","Adds contour created from line array, adding <code>pts.len() - 1</code> …","Adds a new contour to the path, defined by the rect, and …","Appends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…","Adds rrect to <code>Path</code>, creating a new closed contour. If dir …","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Returns the approximate byte size of the <code>Path</code> in memory.","Appends arc to <code>Path</code>. Arc added is part of ellipse bounded …","Appends arc to <code>Path</code>. Arc is implemented by one or more …","Appends arc to <code>Path</code>, after appending line if needed. Arc …","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","Returns minimum and maximum axes values of <code>Point</code> array. …","","","","","","","","","","Appends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Returns minimum and maximum axes values of the lines and …","Adds conic from last point towards (x1, y1), to (x2, y2), …","Returns conic weight if <code>next()</code> returned <code>Verb::Conic</code>.","","Returns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…","Returns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Approximates conic with quad array. Conic is constructed …","","","Returns the number of points in <code>Path</code>. <code>Point</code> count is …","Returns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …","Adds cubic from last point towards (x1, y1), then towards …","Initializes <code>Iter</code> with an empty <code>Path</code>. <code>next()</code> on <code>Iter</code> returns","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","See <code>Path::dump_as_data()</code>","","","Writes text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…","See <code>Path::dump_as_data()</code>","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","Returns <code>PathFillType</code>, the rule used to fill <code>Path</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","(See Skia bug 1762.) Returns a non-zero, globally unique …","Returns <code>Point</code> at index in <code>Point</code> array. Valid range for …","Returns number of points in <code>Path</code>. Up to max points are …","Returns the number of verbs in the path. Up to max verbs …","","","","","Grows <code>Path</code> verb array and <code>Point</code> array to contain …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Interpolates between <code>Path</code> with <code>Point</code> array of equal size. …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Returns <code>true</code> if last <code>Verb::Line</code> returned by <code>next()</code> was …","Returns <code>true</code> if subsequent calls to <code>next()</code> return …","Returns <code>true</code> if the path is convex. If necessary, it will …","Tests if cubic is degenerate. Cubic with no length or that …","Returns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Returns <code>true</code> for finite <code>Point</code> array values between …","Returns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.","Returns if FillType describes area outside <code>Path</code> geometry. …","Returns if contour is closed. Contour is closed if <code>Path</code> …","Returns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …","Tests if line between <code>Point</code> pair is degenerate. Line with …","Returns <code>true</code> if this path is recognized as an oval or …","Tests if quad is degenerate. Quad with no length or that …","Returns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …","Returns <code>true</code> if path is representable as <code>RRect</code>. Returns …","Returns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …","Returns <code>true</code> if the path is volatile; it will not be …","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Returns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …","","Adds line from last point to (x, y). If <code>Path</code> is empty, or …","","","Adds beginning of contour at <code>Point</code> (x, y).","Sets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …","","Constructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …","Create a new path with the specified segments.","Returns next <code>Verb</code> in verb array, and advances <code>Iter</code>. When …","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …","","","","","","The number of points an iterator will return for the verb.","","Adds quad from last point towards (x1, y1), to (x2, y2). …","Appends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …","Adds conic from last point towards vector (dx1, dy1), to …","Adds cubic from last point towards vector (dx1, dy1), then …","Adds line from last point to vector (dx, dy). If <code>Path</code> is …","Adds beginning of contour relative to last point. If <code>Path</code> …","Adds quad from last point towards vector (dx1, dy1), to …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Sets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …","Appends src to <code>Path</code>, from back to front. Reversed src …","Sets <code>Path</code> to its initial state, preserving internal …","","","Returns a mask, where each set bit corresponds to a …","Writes <code>Path</code> to buffer, returning the buffer written to, …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets FillType, the rule used to fill <code>Path</code>. While there is …","Specifies whether <code>Path</code> is volatile; whether it will be …","Sets the last point on the path. If <code>Point</code> array is empty, …","Sets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Exchanges the verb array, <code>Point</code> array, weights, and …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Replaces FillType with its inverse. The inverse of …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Updates internal bounds so that subsequent calls to …","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>.","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","Returns the filled equivalent of the stroked path.","","","","","","","","Optional metadata to be passed into the PDF factory …","","","","","","","","","","The name of the person who created the document.","","","","","","","","","","PDF streams may be compressed to save space. Use this to …","The date and time the document was created.","If the document was converted to PDF from another format, …","1..31","0..6, 0==Sunday","","","","","Encoding quality controls the trade-off between size and …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","0..23","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keywords associated with the document. Commas may be used …","","0..59","The date and time the document was most recently modified.","1..12","","Create a PDF-backed document.","","If <code>true</code>, include XMP metadata, a document UUID, and <code>s_rgb</code> …","The product that is converting this document to PDF.","The DPI (pixels-per-inch) at which features without native …","0..59","","","","","","","The subject of the document.","The number of minutes that this is ahead of or behind UTC.","The document’s title.","","","","","","","","","","","","","","e.g. 2005","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns iff this shader is backed by a single <code>Image</code>. If …","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the shader is guaranteed to produce only …","","","","","","","","","","","","","","","","Create a new shader that produces the same colors as …","Return a shader that will apply the specified <code>local_matrix</code> …","Return a shader that will compute this shader in a …","","","","","","","","","","","","","","A trait for accessing the native run handler instance used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On Windows, and if the default feature “embed-icudtl” …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","ContentChangeMode members are parameters to …","","","","","","","","","","","<code>Surface</code> is responsible for managing the pixels that a …","","","","","Returns <code>Canvas</code> that draws into <code>Surface</code>. Subsequent calls …","","","","","rust-skia helper, not in Skia","Draws <code>Surface</code> contents to canvas, with its top-left corner …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Wraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …","Wraps a GPU-backed texture into <code>Surface</code>. Caller must …","Creates <code>Surface</code> from CAMetalLayer. Returned <code>Surface</code> takes …","Creates <code>Surface</code> from MTKView. Returned <code>Surface</code> takes a …","Returns unique value identifying the content of <code>Surface</code>. …","Retrieves the back-end render target. If <code>Surface</code> has no …","Retrieves the back-end texture. If <code>Surface</code> has no back-end …","","","Returns pixel row count; may be zero or greater.","Returns an <code>ImageInfo</code> describing the surface.","Returns <code>Image</code> capturing <code>Surface</code> contents. Subsequent …","Like the no-parameter version, this returns an image of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>Surface</code> without backing pixels. Drawing to <code>Canvas</code> …","Allocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …","Allocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …","Allocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …","Returns <code>Surface</code> on GPU indicated by context. Allocates …","Returns a compatible <code>Surface</code>, or <code>None</code>. Returned <code>Surface</code> …","Calls <code>Self::new_surface()</code> with the same <code>ImageInfo</code> as this …","Notifies that <code>Surface</code> contents will be changed by code …","","Returns <code>SurfaceProps</code> for surface.","Copies <code>crate::Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>.","Copies <code>crate::Rect</code> of pixels from <code>Surface</code> into bitmap.","Copies <code>crate::Rect</code> of pixels to dst.","Returns the recording context being used by the <code>Surface</code>.","If the surface was made via <code>Self::from_backend_texture</code> …","If the surface was made via <code>Self::from_backend_texture()</code> …","If a surface is GPU texture backed, is being drawn with …","","","","","","","","","","Returns pixel count in each row; may be zero or greater.","Copies <code>crate::Rect</code> of pixels from the src <code>Bitmap</code> to the …","Copies <code>crate::Rect</code> of pixels from the src <code>Pixmap</code> to the …","","","","Returns <code>Surface</code> without backing pixels. Drawing to …","Allocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…","Allocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…","Allocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns <code>Surface</code> without backing pixels. Drawing to …","Allocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…","Allocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…","","","","","Allocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…","","","Error when something goes wrong when loading an SVG file. …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","Ends the Canvas drawing and returns the resulting SVG. …","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Creates a new SVG canvas.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","Align the bottom edge of the placeholder with the baseline …","","","","","","Match the baseline of the placeholder with the baseline.","Align the top edge of the placeholder with the baseline …","","","","Align the bottom edge of the placeholder with the top edge …","","","","","","","","","","","","","","","","","","","","Efficient reference type to a C++ vector of font family …","","","","","","","","","","","","","","","Extends the width of the last rect of each line to match …","Align the middle of the placeholder with the middle of the …","","","","","","","","","Where to vertically align the placeholder relative to the …","","","","","","","","","","","","","","","","","","Multiple decorations can be applied at once. Ex: Underline …","","","","","","","","","","Provide tight bounding boxes that fit heights per run.","Provide tight bounding boxes that fit widths to the runs …","Align the top edge of the placeholder with the top edge of …","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","","","The final computed ascent and descent for the line. This …","","The y position of the baseline for this line from the top …","","Distance from the top edge of the rect to the baseline …","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","","","","","","","Get a flags value with all bits unset.","","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","","","The index in the text buffer the line ends.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FontMetrics</code> contains the following metrics:","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","Returns indices and references to style metrics in the …","Returns the number of style metrics in the given index …","","","","","","","","","","","","","","","","","","","","","","","Total height of the paragraph including the current line.","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","","Yield a set of contained named flags values.","","The left edge of the line. The right edge can be obtained …","","Zero indexed line number","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","","","","","","The intersection of a source flags value with the …","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","","","","","","","","","","","The contents of the <code>crate::FontArguments</code> will be copied …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The index in the text buffer the line begins.","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","Width of the line.","","","","","","","","","","","","","","","","The glyph and grapheme cluster information associated with …","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Checks if a given text blob contains colored font or bitmap","Checks if a given text blob contains glyph with emoji","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Returns the visible text on the line (excluding a possible …","Finds the closest glyph cluster for a visual text position","Finds the information associated with the closest glyph to …","Returns the font that is used to shape the text at the …","Returns the font used to shape the text at the given …","Returns the information about all the fonts used to shape …","Finds a glyph cluster for text index","Retrieves the information associated with the glyph …","Returns the index of the glyph that corresponds to the …","","Returns line metrics info for the line","Finds the line number of the line that contains the given …","Finds the line number of the line that contains the given …","Returns path for a text blob","Returns path for a given line","","Returns a vector of bounding boxes that enclose all text …","Finds the first and last glyphs that define a word …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","This function will return the number of unresolved glyphs …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A trait that supports the conversion from a C/C++ value …","This trait supports the conversion of a wrapper into it’…","A trait that supports the conversion from a C/C++ …","A trait that supports the conversion from a C/C++ value …","Access the wrapped pointer.","","","","Access the wrapped pointer.","","","","Unwraps the wrapper type into the native pointer.","","","Wraps a native pointer into a wrapper type. Returns <code>None</code> …","","","","","","","Specifies how YUV (and optionally A) are divided among …","","","","","","","Describes how subsampled chroma values are sited relative …","UV subsampling is also specified in the enum value names …","","","","","","","Specifies the structure of planes for a YUV image with …","","","","","","","","","","","","","","","","","Given a per-plane row bytes, determine size to allocate …","","Dimensions of the full resolution image (after planes have …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Does the PlaneConfig have alpha values?","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>dimensions</code> should specify the size of the full resolution …","Number of Y, U, V, A channels in the ith plane for a given …","","Number of planes for a given PlaneConfig.","","","","","Given image dimensions, a planer configuration, …","Returns the dimensions for each plane. Dimensions are as …","<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to a …","","","","Ratio of Y/A values to U/V values in x and y.","","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Returns a YUVAInfo that is identical to this one but with …","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the default ColorType to use with <code>num_channels</code> …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the ColorType is supported for YUVA pixmaps this will …","","","","","","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","Determine size to allocate for all planes. Optionally …","The per-YUV<code>[A]</code> channel data type.","","","","Use storage in Data as backing store for pixmaps’ …","Like above but uses …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Takes an allocation that is assumed to be at least […","Is this valid and does it use color types allowed by the …","Initializes the YUVAPixmapInfo from a YUVAInfo with …","The number of Pixmap planes.","Number of pixmap planes.","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","Access the Pixmap planes.","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","Row bytes for all planes.","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Defaults to nothing supported.","Gets the default ColorType to use with <code>num_channels</code> …","Update to add support for pixmaps with <code>num_channels</code> …","","If the ColorType is supported for YUVA pixmaps this will …","Checks whether there is a supported combination of color …"],"i":[158,147,147,53,54,147,164,164,147,0,0,158,0,0,174,174,147,147,147,147,168,168,1,1,53,164,157,157,157,157,157,157,157,169,0,0,0,0,0,0,0,149,33,147,33,1,0,138,104,0,173,0,0,107,0,104,0,0,104,0,0,104,0,0,0,0,0,0,0,0,0,173,0,0,0,163,0,173,0,0,107,1,5,107,164,54,104,0,0,0,138,149,169,104,165,171,13,0,0,104,104,104,104,104,0,174,174,0,0,0,163,172,104,5,167,0,0,0,0,0,0,0,0,0,0,0,166,158,164,1,53,53,1,53,0,115,147,505,164,0,0,104,0,104,164,107,107,0,0,107,107,0,0,157,0,0,0,0,163,137,163,165,171,13,163,163,163,163,172,172,0,164,157,164,157,164,1,159,161,149,169,171,174,104,72,157,158,137,104,104,138,104,173,506,159,161,104,0,1,8,5,5,5,5,173,0,0,0,165,0,138,169,104,173,104,147,505,0,506,159,161,161,166,174,137,166,505,107,0,72,137,104,0,164,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,72,173,0,158,147,147,147,147,147,0,1,53,53,0,53,147,147,147,53,147,147,147,147,147,147,168,168,0,0,157,157,157,157,157,0,0,0,138,171,13,149,169,0,0,107,107,147,0,0,104,0,0,104,0,0,0,0,166,104,137,149,104,104,104,104,104,167,167,0,163,0,0,0,1,0,0,0,0,0,0,0,0,54,115,115,115,0,163,171,13,147,72,168,72,0,0,0,0,0,0,164,164,1,172,13,0,104,171,1,0,0,0,0,505,107,1,3,103,155,5,8,8,11,5,5,18,19,20,21,21,23,23,26,27,5,5,18,19,20,21,21,23,23,26,27,5,5,5,27,5,5,27,5,5,5,41,5,27,5,27,5,5,5,27,5,5,5,41,46,46,48,5,5,8,5,53,54,55,5,55,5,55,5,55,5,58,5,58,5,58,5,58,5,58,5,58,5,58,5,58,5,5,8,8,8,5,5,69,8,55,73,57,46,5,5,5,8,41,0,8,5,5,5,8,8,41,41,5,5,5,90,5,8,8,93,8,90,8,90,8,8,27,5,5,27,5,5,27,5,5,507,22,98,8,8,8,103,18,19,20,103,5,105,8,104,8,5,5,55,5,90,8,5,18,19,20,119,5,5,8,103,48,29,29,5,5,0,0,5,0,5,251,121,8,41,121,8,121,8,121,8,251,1,3,152,103,155,450,5,5,5,41,8,8,5,41,8,5,5,5,1,1,53,54,53,54,1,1,53,54,53,54,53,53,54,54,53,54,53,54,5,5,5,0,69,8,93,8,8,5,8,5,8,46,244,5,41,8,205,371,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,46,244,5,41,8,205,371,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,48,29,251,48,29,55,57,46,142,5,5,5,5,5,8,8,8,8,8,41,46,46,55,73,57,5,5,5,147,3,155,450,8,372,8,0,8,5,251,29,29,29,5,8,8,5,5,8,5,27,5,8,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,5,5,41,8,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,5,8,170,27,5,5,53,54,0,0,162,162,5,5,5,0,5,8,8,0,57,5,0,0,55,73,57,46,5,5,5,8,55,73,57,46,5,5,5,8,8,8,0,5,8,162,93,5,5,5,8,53,54,93,8,8,8,8,8,8,27,5,55,57,46,5,5,8,160,55,46,5,57,5,57,5,5,5,5,5,160,162,27,5,5,5,41,508,5,53,48,48,48,48,48,29,29,29,29,29,29,54,41,41,48,5,5,5,0,293,5,5,5,8,105,8,8,8,0,121,187,5,5,5,5,8,8,79,8,8,8,5,5,8,5,5,8,18,19,23,26,23,26,216,27,5,5,90,8,41,41,41,41,3,155,8,0,5,5,465,465,8,8,5,5,5,5,5,5,5,55,187,79,73,46,5,5,5,5,5,5,1,157,115,18,19,20,162,104,137,165,21,23,26,48,29,22,25,149,168,169,54,170,3,33,138,8,8,8,8,8,105,205,3,205,251,509,179,5,8,8,8,27,5,5,5,5,5,41,53,54,8,55,57,212,46,5,5,5,5,41,8,8,8,8,8,0,8,23,23,8,8,28,18,23,25,18,23,25,0,18,19,20,23,26,23,26,41,41,8,8,8,0,55,5,5,41,8,5,162,29,5,5,5,5,29,155,5,41,41,41,79,8,53,48,54,5,8,0,55,46,5,8,8,8,8,8,220,41,8,41,105,5,41,8,1,152,153,53,103,154,155,156,147,72,157,158,159,161,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,8,5,21,23,22,25,5,1,152,53,156,147,72,157,158,159,161,115,163,164,104,107,137,165,166,21,48,167,22,149,168,169,54,170,3,171,172,33,173,138,174,13,55,46,5,55,46,5,55,5,55,5,55,5,8,53,54,41,8,8,55,5,55,46,5,155,8,79,8,8,8,79,8,27,5,5,216,8,8,8,8,8,8,8,8,8,8,8,5,5,103,5,5,5,170,8,8,8,8,8,8,8,8,8,8,8,8,8,8,55,98,179,69,105,121,187,79,220,73,57,93,27,90,212,46,142,58,244,11,5,5,5,1,152,153,53,53,53,53,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,54,54,54,54,170,3,171,172,33,173,138,174,13,0,5,5,0,5,8,5,5,5,8,0,5,0,5,5,0,5,5,8,5,5,8,8,98,79,79,46,244,5,41,8,8,205,371,1,1,1,152,152,153,153,53,103,103,103,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,162,162,163,164,104,107,137,165,166,21,21,23,23,23,23,26,26,48,48,29,29,29,29,62,167,22,22,25,25,25,25,149,168,169,54,170,3,3,3,171,172,33,173,138,174,13,8,8,1,8,8,8,53,54,53,53,54,54,53,54,29,90,5,8,8,103,8,3,57,5,8,90,5,5,8,8,5,220,41,8,8,5,5,105,8,8,29,29,25,53,54,29,48,29,8,8,53,54,8,5,5,5,8,8,8,8,29,142,8,142,8,48,62,8,5,1,142,8,93,8,48,29,121,8,121,8,142,5,5,8,8,105,5,8,5,8,142,8,8,5,5,5,48,29,48,29,8,8,1,152,103,155,55,212,5,5,8,8,8,41,55,5,55,46,5,8,8,5,5,41,41,162,55,46,5,55,46,5,41,41,41,41,41,41,8,142,5,8,8,41,41,41,41,8,41,5,41,41,220,41,5,5,5,41,41,5,162,55,5,8,8,41,5,5,5,5,41,5,5,41,41,244,5,5,0,0,0,293,69,8,153,5,5,5,5,5,8,8,5,8,5,8,41,41,8,8,5,53,147,72,157,158,159,161,115,163,164,104,107,137,165,166,167,149,169,54,3,171,172,33,173,138,174,13,55,57,212,46,5,5,5,5,5,5,41,41,41,8,8,8,48,29,22,25,48,5,5,8,0,0,5,41,465,0,5,8,41,0,8,0,5,0,8,8,8,8,0,27,5,5,121,5,5,103,20,8,103,5,8,5,5,5,55,220,46,5,41,5,5,5,41,8,1,103,154,147,160,115,18,19,20,162,21,23,26,48,29,62,22,25,168,170,3,173,5,5,41,8,1,103,154,147,160,115,18,19,20,162,21,23,26,48,29,62,22,25,168,170,3,173,8,8,8,8,53,54,48,29,55,5,5,48,29,29,48,53,54,53,48,29,54,29,5,5,46,244,5,41,8,205,371,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,90,8,5,41,205,53,247,54,162,293,8,53,54,8,8,170,147,5,5,5,168,8,5,8,5,5,5,5,8,5,5,5,55,105,121,57,5,5,5,5,5,8,8,53,48,29,22,25,54,48,172,5,5,162,23,26,29,8,5,5,5,73,57,5,5,168,5,55,212,5,8,5,5,172,5,8,5,8,5,5,160,5,55,5,55,73,57,46,5,5,5,8,8,103,72,5,5,220,5,41,41,5,55,5,5,5,168,5,41,29,5,179,8,5,5,8,220,41,170,168,220,5,5,5,5,41,41,8,5,5,8,21,23,22,25,23,121,8,53,54,53,54,5,48,29,29,29,29,0,41,5,41,5,251,48,29,48,29,79,8,5,5,8,18,19,20,23,26,18,19,20,23,26,5,5,8,0,41,27,5,5,8,8,5,41,162,8,0,8,27,58,5,5,8,8,8,8,8,8,8,8,8,8,5,8,8,5,162,41,5,79,8,79,8,79,8,79,8,5,187,8,347,1,103,0,5,41,8,216,251,41,41,8,8,8,41,5,5,8,5,41,5,41,57,5,465,476,216,5,41,5,98,8,8,465,27,5,5,28,28,28,28,103,103,103,18,18,19,19,20,20,162,162,162,23,25,18,18,19,19,20,20,23,25,147,5,5,5,104,0,162,207,207,0,505,28,505,28,5,8,18,19,20,21,23,26,23,55,69,79,73,57,27,46,142,58,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,41,41,41,41,8,8,8,8,8,8,8,8,205,1,103,160,18,19,20,162,21,23,26,48,29,62,22,25,170,3,57,5,41,105,8,8,8,105,8,8,41,8,105,8,105,121,187,8,8,8,48,29,22,25,8,5,41,5,79,8,5,5,41,8,41,5,41,41,162,8,8,8,5,5,41,8,41,57,5,57,5,8,8,27,5,69,8,90,8,41,8,8,8,8,8,57,5,41,41,41,41,179,8,179,8,41,105,8,79,8,79,8,105,8,8,8,8,8,8,8,8,41,41,41,41,187,8,105,8,57,5,8,5,5,41,8,41,5,8,105,8,205,247,5,18,19,20,23,26,162,23,26,53,54,5,212,8,8,8,55,212,5,8,5,5,5,5,5,5,27,5,5,5,8,23,48,29,23,48,29,8,0,5,5,5,5,5,5,5,5,5,48,29,5,5,8,0,0,41,8,8,53,54,0,8,0,8,0,0,5,0,0,0,0,55,5,8,8,41,8,0,162,0,170,55,5,55,5,55,212,46,5,8,55,5,5,5,5,5,5,5,5,5,5,5,90,8,0,8,8,173,5,27,5,41,5,8,5,5,5,8,5,162,8,5,162,5,162,162,0,0,162,162,162,8,5,0,8,41,41,8,8,41,27,5,5,220,41,8,5,510,5,5,1,152,103,5,27,5,5,27,5,5,27,5,5,5,27,5,5,8,8,0,162,8,5,55,46,5,8,8,8,46,8,8,8,8,5,5,8,5,62,162,69,8,0,8,8,205,8,5,53,54,8,8,8,41,0,0,5,55,57,27,46,5,5,5,5,5,5,5,5,41,8,5,8,5,11,5,8,8,8,8,41,5,5,5,48,29,48,29,162,41,41,41,29,29,511,29,29,162,55,212,46,5,5,8,55,46,5,5,162,162,0,5,5,0,153,5,476,0,41,0,162,23,26,46,8,5,23,26,62,465,5,8,5,509,179,90,5,8,8,8,8,8,5,53,21,23,26,62,22,25,54,162,23,5,5,55,5,5,41,5,8,8,8,8,8,5,5,5,5,5,5,29,29,29,29,162,162,5,5,5,5,46,5,162,162,8,5,5,5,5,5,5,8,8,5,8,5,41,5,5,5,48,29,22,25,5,27,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,41,5,5,5,5,162,62,5,55,212,5,8,55,5,29,27,5,5,29,5,5,23,23,5,5,5,48,29,5,41,5,5,41,23,5,5,5,55,5,5,162,5,5,5,41,5,8,8,162,162,162,162,5,162,5,5,162,5,5,5,48,5,5,5,5,5,5,5,5,5,41,5,5,8,41,5,41,41,41,162,5,5,5,41,48,29,5,48,29,0,5,0,0,5,41,41,41,41,0,55,73,57,46,5,5,5,5,0,5,5,105,5,8,48,29,5,5,8,27,5,48,29,48,29,8,5,8,8,62,5,8,5,8,5,5,5,5,0,5,5,41,187,5,5,8,53,18,19,20,21,21,23,23,26,54,53,18,19,20,21,21,23,23,26,54,8,5,8,5,8,8,0,0,0,55,5,5,5,0,0,8,8,53,54,0,8,5,8,41,5,41,41,41,5,8,5,0,5,5,5,5,8,5,0,5,8,0,465,8,8,8,103,25,153,103,25,8,1,152,162,172,8,103,5,41,8,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,5,29,62,8,8,1,25,55,90,5,8,8,5,5,5,5,62,179,8,53,54,27,5,5,48,29,251,48,29,5,5,5,41,162,5,162,8,0,55,5,55,5,55,5,55,5,46,244,5,41,8,205,371,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,46,244,5,41,8,205,371,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,8,41,5,8,8,62,5,5,62,46,244,5,41,8,205,371,1,152,153,53,103,154,155,156,147,72,157,158,159,160,161,247,115,18,19,20,162,163,164,104,107,137,165,166,21,23,26,48,29,62,167,22,25,149,168,169,54,170,3,171,172,33,173,138,174,13,509,8,0,244,5,5,5,8,5,8,8,8,53,54,220,90,142,41,8,8,8,8,8,8,41,41,41,0,5,41,8,371,1,103,154,147,160,115,18,19,20,162,21,23,26,48,29,62,22,25,168,170,3,173,5,216,5,5,0,153,57,5,8,147,5,0,8,8,8,0,41,8,5,41,20,0,55,57,212,46,5,5,5,5,5,41,8,8,8,48,29,22,25,48,1,48,73,57,5,5,8,73,57,5,5,179,8,73,57,5,5,8,57,5,5,48,29,179,8,8,8,93,8,5,48,29,48,29,48,29,5,179,8,5,5,5,8,8,5,5,41,8,1,103,154,147,160,115,18,19,20,162,21,23,26,48,29,62,22,25,168,170,3,173,5,5,372,8,0,46,46,5,8,8,5,48,29,24,512,513,18,19,20,21,21,23,26,251,251,251,48,29,24,512,513,18,19,20,21,21,23,26,465,5,5,5,5,0,5,5,5,5,0,0,512,513,19,20,26,0,0,0,0,0,0,0,376,380,0,376,0,379,0,376,0,378,379,379,378,0,0,0,0,380,0,87,376,376,87,87,87,377,87,87,376,376,376,376,376,376,376,376,376,377,87,381,514,376,375,378,382,379,380,377,87,381,514,376,375,378,382,379,380,377,383,87,87,377,377,87,87,87,87,87,376,378,379,380,376,378,379,380,376,383,376,376,87,87,376,376,377,381,381,382,87,376,376,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,381,382,376,376,376,379,380,376,379,380,376,377,377,87,381,376,376,376,376,376,375,378,382,379,380,377,87,381,514,376,375,378,378,378,382,379,380,87,376,376,376,376,376,376,376,376,376,376,87,87,514,376,379,380,87,375,377,377,376,376,376,376,376,376,377,87,381,514,376,375,378,382,379,380,376,376,376,87,87,376,376,376,376,376,376,0,87,87,87,87,87,87,376,375,377,376,87,375,87,87,87,87,87,87,87,383,376,376,87,87,382,87,87,375,87,87,87,87,87,87,376,376,515,87,87,87,376,376,87,376,376,376,378,379,380,376,376,87,87,87,377,87,381,514,376,375,378,382,379,380,377,87,381,514,376,375,378,382,379,380,377,87,381,514,376,375,378,382,379,380,376,376,377,377,87,87,383,383,386,386,0,0,386,383,386,383,386,383,386,386,383,386,386,386,383,386,383,386,386,383,386,383,386,383,386,383,386,383,386,383,383,164,164,164,322,322,391,0,163,322,164,0,0,163,0,164,164,164,163,163,163,163,163,163,164,164,164,322,322,322,390,0,164,164,389,389,0,322,322,0,0,163,391,322,322,163,164,164,390,0,388,388,0,269,387,388,322,389,390,391,269,387,388,322,389,390,391,269,387,388,322,389,390,391,387,388,322,389,390,391,0,0,388,322,269,388,388,269,387,322,389,390,391,387,322,389,390,391,269,387,388,322,389,390,391,387,269,387,388,322,389,390,391,269,269,269,388,269,269,269,269,269,269,269,269,269,269,0,388,322,389,390,391,0,269,269,388,322,388,322,269,387,388,322,389,390,391,0,269,269,269,0,0,387,269,388,388,0,269,269,269,269,387,322,322,387,388,322,389,390,391,269,387,388,322,389,390,391,269,387,388,322,389,390,391,269,387,388,322,389,390,391,388,322,269,0,0,388,322,387,0,0,0,0,516,516,516,517,517,0,392,392,392,392,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,178,178,178,178,178,178,178,178,178,178,178,178,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,283,283,283,0,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,394,395,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,395,394,283,283,283,283,283,283,283,283,283,283,283,394,283,283,283,283,283,283,394,395,395,283,283,394,283,283,395,394,283,283,283,283,283,283,283,283,283,283,283,283,283,283,0,0,0,0,396,396,396,396,396,396,396,396,396,396,396,396,0,396,396,396,0,0,398,397,398,397,398,397,398,397,398,397,398,397,398,397,398,397,0,0,233,233,233,233,233,233,0,233,233,233,0,363,363,0,0,0,217,217,0,0,217,217,217,217,217,59,59,59,59,217,217,59,217,217,59,59,59,59,59,59,59,59,59,217,59,217,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,217,217,217,217,59,59,59,59,0,0,0,176,400,401,176,400,401,400,401,400,401,176,400,176,176,176,400,401,176,400,401,401,176,176,176,400,401,176,401,0,176,176,176,176,400,401,176,400,401,176,400,401,176,400,401,176,176,0,176,0,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,0,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,403,0,0,403,403,403,403,403,403,251,251,403,403,403,403,403,403,403,403,403,403,251,403,251,251,251,403,251,403,251,403,403,403,403,403,403,251,251,403,403,403,403,403,251,403,403,403,403,403,403,403,251,403,251,403,403,403,403,403,403,403,403,403,403,251,403,251,251,403,403,403,403,403,403,403,251,403,403,403,403,403,403,403,403,403,251,251,403,403,403,403,403,403,251,251,403,403,403,403,403,251,403,403,251,403,251,403,251,403,251,251,251,403,403,251,251,251,251,251,0,373,373,373,373,0,0,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,404,404,405,405,404,404,405,405,404,0,404,406,404,404,404,405,406,404,405,405,0,404,405,405,406,0,0,204,204,404,405,204,406,404,405,204,406,404,405,204,406,404,405,204,406,404,405,204,404,405,404,405,204,406,404,405,406,404,405,204,406,404,404,405,405,204,406,406,404,405,204,404,405,204,404,405,204,406,204,204,204,404,405,204,404,405,204,406,404,405,204,406,404,405,204,406,404,405,204,406,404,405,204,204,204,404,405,204,345,0,0,0,0,0,0,408,134,0,0,0,131,127,0,0,0,0,409,131,127,0,131,127,0,335,272,337,202,236,239,335,127,127,0,0,0,0,0,0,0,345,0,0,0,408,134,131,127,131,127,335,0,0,272,337,202,236,239,335,108,256,407,407,256,132,132,132,132,215,132,133,257,241,256,133,257,0,0,0,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,132,108,133,131,272,337,202,408,294,356,351,335,127,134,236,345,239,131,272,337,202,408,294,356,351,335,127,134,236,345,239,256,256,108,256,0,241,241,237,256,108,108,108,407,133,257,0,407,407,407,407,407,407,131,272,337,202,408,294,356,351,335,127,134,236,345,239,131,272,337,202,408,294,356,351,335,127,134,236,345,239,108,108,108,108,108,108,407,108,108,108,108,108,215,132,133,257,108,241,256,409,273,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,407,108,256,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,215,215,0,407,257,133,133,133,133,131,272,337,202,408,127,134,236,345,239,133,257,108,0,294,335,237,294,335,237,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,108,257,133,257,133,215,132,133,257,133,407,407,256,356,356,256,256,133,257,133,409,0,215,132,409,273,407,407,132,133,257,108,133,132,133,257,108,133,241,132,133,257,108,133,132,409,273,108,407,108,409,409,108,108,108,241,108,407,108,108,351,108,108,108,351,407,257,108,108,108,108,133,257,108,108,133,257,257,108,108,108,256,0,273,409,273,273,131,272,337,202,408,294,356,351,335,127,134,236,345,239,132,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,131,272,337,202,408,294,356,351,335,237,127,134,236,345,239,407,407,407,294,335,237,0,241,133,257,133,257,294,335,237,409,409,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,411,411,0,410,0,410,0,411,410,332,332,332,332,332,332,410,411,332,410,411,332,410,411,410,411,332,332,332,332,332,332,332,332,332,410,411,410,411,332,410,411,332,410,411,332,332,410,411,332,332,332,332,410,411,332,332,332,332,332,332,332,332,332,332,332,332,332,332,410,411,332,410,411,332,410,411,332,410,411,332,332,332,0,0,110,110,412,0,110,110,110,110,110,0,0,412,0,0,414,414,0,110,110,110,110,110,412,412,414,412,412,110,110,110,412,110,110,110,110,110,110,110,110,110,110,110,110,412,110,110,0,0,412,0,0,110,412,412,414,226,412,412,412,412,412,412,412,412,412,291,290,413,412,414,110,291,290,413,412,414,110,291,290,413,412,414,110,291,290,413,412,414,110,412,412,412,291,290,413,412,412,291,290,413,412,414,110,291,290,413,412,414,110,412,331,331,290,226,331,291,290,413,412,412,412,412,412,414,110,291,290,413,291,290,413,412,414,110,110,412,412,412,412,290,412,412,291,226,331,412,414,110,291,291,290,413,291,290,413,412,412,412,291,290,413,412,414,110,412,412,412,226,291,290,412,412,413,331,331,331,412,412,291,290,413,226,412,226,413,412,412,412,412,291,413,291,290,413,412,414,110,412,291,290,413,412,414,110,291,290,413,412,414,110,291,290,413,412,414,110,412,291,290,413,331,291,290,413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,416,416,416,416,309,416,416,416,334,309,416,416,416,416,416,416,416,334,309,416,416,416,309,416,416,416,416,416,416,416,0,0,0,0,0,0,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,338,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,0,338,425,432,432,426,426,0,0,120,120,120,120,120,338,338,338,338,338,338,338,338,338,338,424,418,0,421,0,0,0,120,120,120,120,120,120,120,120,120,120,120,425,417,0,0,338,338,0,0,0,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,338,418,0,0,0,0,431,431,431,431,0,0,0,0,0,0,421,417,417,417,417,417,419,424,426,419,338,120,424,425,426,430,431,432,432,432,426,419,0,417,0,424,0,338,338,120,120,120,120,120,120,120,120,0,0,0,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,338,430,430,0,0,120,418,338,338,338,338,338,338,338,0,0,0,0,338,338,338,120,0,120,430,430,430,430,430,430,430,430,0,518,433,417,418,419,339,420,417,418,419,417,418,419,417,418,419,417,418,419,417,417,418,418,419,419,417,418,419,417,418,419,340,518,417,418,420,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,340,518,417,418,420,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,341,417,418,420,419,341,339,421,270,422,423,338,120,424,425,426,427,428,429,430,431,432,433,417,418,420,419,341,339,421,270,422,423,338,120,424,425,426,427,428,429,430,431,432,433,417,418,419,423,270,270,417,418,419,417,418,419,339,420,341,339,270,422,423,417,418,419,270,340,417,418,419,417,418,420,419,341,422,423,338,120,424,425,426,430,431,432,417,418,419,341,422,423,338,120,424,425,426,430,431,432,417,418,419,429,341,420,340,417,417,417,417,417,418,418,418,418,418,420,419,419,419,419,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,341,341,339,270,422,341,340,435,436,437,438,439,440,441,442,443,518,417,418,420,419,341,339,421,270,422,434,423,423,423,338,120,424,425,426,427,428,429,430,431,432,433,417,418,419,417,417,418,418,419,419,417,418,419,420,339,339,417,418,419,417,418,419,417,418,419,338,120,424,425,426,430,431,432,427,339,422,339,422,417,418,420,341,339,270,422,417,418,420,341,339,270,422,417,418,419,417,418,419,417,418,419,340,518,417,418,420,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,417,418,419,417,418,419,417,418,419,341,417,418,419,417,418,419,339,339,422,423,420,423,0,421,340,341,339,423,340,341,417,418,419,420,429,417,418,419,423,423,339,422,417,418,419,339,422,270,417,418,419,340,340,339,422,420,417,418,419,417,418,419,417,418,419,339,417,418,420,419,341,339,421,270,422,423,338,120,424,425,426,427,428,429,430,431,432,433,417,418,419,340,518,417,418,420,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,340,518,417,418,420,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,340,518,417,418,420,419,341,339,421,270,422,434,423,338,120,424,425,426,427,428,429,430,431,432,433,417,418,419,417,418,420,341,339,270,422,427,417,418,420,341,339,270,422,428,341,428,341,339,422,341,341,0,0,0,299,299,0,0,300,0,300,300,300,300,300,300,300,300,300,300,300,301,300,299,301,300,299,301,300,301,300,300,301,300,300,300,300,300,300,300,300,300,301,300,301,300,300,301,300,300,300,300,300,299,301,301,300,299,299,299,299,300,300,300,300,300,300,300,300,300,300,301,300,301,301,301,301,300,300,0,300,300,300,300,301,300,299,300,300,300,300,300,299,300,300,300,300,299,0,0,300,300,0,0,300,300,300,300,300,300,0,0,300,300,301,300,300,300,301,300,299,301,300,299,0,0,301,300,299,300,300,301,301,0,519,520,520,520,0,0,519,520,520,519,521,520,520,520,520,519,521,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,449,449,0,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,0,293,293,293,293,293,293,293,293,293,293,0,293,293,293,293,293,0,293,293,293,293,293,293,293,449,449,0,449,0,305,174,174,0,0,0,0,305,174,265,0,174,265,112,450,112,450,305,450,305,112,450,450,450,305,450,305,112,112,112,112,112,112,112,112,112,450,305,305,112,112,112,112,450,305,450,305,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,305,112,112,0,450,450,450,305,112,112,112,112,112,112,112,112,112,450,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,450,305,112,112,112,450,305,450,305,450,305,112,450,112,112,450,0,265,265,0,0,0,0,0,0,0,229,0,0,229,113,113,229,229,113,229,229,113,113,113,113,113,113,113,113,113,113,229,229,113,113,113,229,229,113,113,229,113,113,229,113,113,113,113,113,113,113,113,113,113,229,229,229,229,113,0,0,0,451,452,452,0,0,0,451,100,452,451,100,452,451,100,452,451,100,452,0,0,0,451,0,0,0,0,0,0,0,100,451,100,452,452,0,451,100,452,451,451,451,451,451,451,451,100,100,452,452,0,451,100,452,100,0,0,0,0,100,0,0,0,0,451,0,0,0,0,0,451,100,452,451,100,452,451,100,452,451,100,452,0,265,265,265,265,265,265,0,0,0,265,265,265,265,265,265,0,0,0,0,265,265,265,265,0,522,453,0,453,522,453,0,454,453,454,453,454,453,454,453,454,454,454,0,0,453,454,453,454,453,454,453,454,453,453,454,454,453,454,453,454,453,454,453,454,454,0,0,455,0,0,456,456,456,0,455,0,0,306,455,457,457,457,455,0,457,458,457,458,457,458,457,458,456,455,457,458,457,458,0,306,455,455,455,455,455,455,455,455,455,455,455,306,456,455,39,457,458,306,456,455,39,457,458,39,306,456,455,39,457,458,306,456,455,39,457,458,455,455,455,39,455,455,39,39,455,455,39,39,455,455,306,456,455,39,457,458,306,456,455,457,458,455,39,306,456,455,455,455,455,455,39,457,458,306,456,455,39,457,458,39,455,455,455,455,455,455,455,455,455,455,39,39,39,39,39,306,456,455,39,39,39,39,39,39,39,39,39,455,455,455,455,455,455,306,456,455,39,457,458,455,39,39,455,455,455,455,39,39,39,39,39,39,455,455,455,455,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,455,455,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,455,455,39,39,39,39,39,39,39,455,455,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,455,455,455,455,39,306,456,455,39,457,458,455,455,39,39,39,306,456,455,39,457,458,306,456,455,39,457,458,306,456,455,39,457,458,455,455,39,39,0,0,0,0,0,0,0,0,169,149,0,167,0,169,0,149,169,149,167,167,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,38,0,33,352,352,33,459,459,459,0,459,172,38,0,172,172,0,352,96,459,459,459,0,352,459,0,0,96,0,172,12,12,12,12,12,12,12,12,12,352,352,12,12,12,12,12,352,352,352,352,352,352,352,352,352,460,461,352,96,38,459,460,461,352,96,38,459,12,12,352,96,38,459,352,96,38,459,12,352,352,352,12,12,460,461,12,12,352,352,12,12,12,12,12,12,460,461,12,352,352,460,461,12,12,12,12,12,352,352,352,96,38,459,352,96,38,459,352,12,460,12,352,352,352,352,352,96,38,459,460,461,352,96,38,459,459,352,352,352,352,352,352,352,352,352,352,12,12,12,12,12,12,352,96,38,459,12,352,352,12,352,352,352,352,460,461,352,96,38,459,460,461,352,352,352,460,460,12,12,12,352,352,12,12,12,12,12,12,12,12,12,12,12,12,352,352,352,352,12,12,12,12,12,12,460,461,12,12,460,461,352,12,12,12,12,352,461,459,12,12,12,12,12,12,12,12,12,352,352,12,12,12,12,12,12,12,352,352,12,12,12,460,461,12,12,352,352,12,352,352,12,352,96,38,459,12,12,352,352,12,12,12,460,461,352,96,38,459,460,461,352,96,38,459,460,461,352,96,38,459,352,352,12,12,12,12,343,343,343,0,343,343,343,343,343,343,343,343,343,343,343,0,343,343,343,343,0,0,0,182,102,102,102,102,182,182,182,182,102,182,182,182,182,102,102,102,102,182,182,182,182,102,182,102,182,102,102,102,308,308,308,0,0,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,462,308,308,308,308,308,308,308,308,462,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,462,308,308,308,308,308,308,308,308,308,308,308,462,308,308,308,308,308,308,462,462,462,462,308,308,462,308,308,462,308,308,462,308,308,308,308,308,308,308,308,308,308,308,308,33,33,173,173,173,172,172,172,173,173,0,0,0,0,173,172,0,0,523,0,0,523,523,523,0,523,0,463,463,464,464,464,463,463,466,463,465,466,463,465,466,463,465,465,466,466,466,465,465,464,463,466,463,466,465,465,464,463,465,466,463,465,466,465,465,465,465,463,465,466,466,463,465,466,465,463,0,463,466,466,466,465,463,463,463,463,463,466,466,465,466,465,463,465,466,463,465,466,463,465,466,463,465,465,465,0,0,0,467,467,467,467,467,467,468,468,0,0,468,0,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,469,470,468,469,470,468,469,470,468,469,470,468,469,468,468,468,468,469,468,468,468,468,0,0,468,469,470,468,469,470,468,469,468,468,468,468,468,469,470,468,469,470,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,469,470,468,468,468,468,468,468,468,468,468,470,470,468,468,468,468,468,468,468,468,468,468,470,468,469,470,468,468,468,469,470,468,469,470,468,469,470,468,468,468,468,469,0,0,180,180,0,0,180,0,0,180,180,0,180,180,471,472,473,180,471,472,473,180,181,471,472,473,180,471,472,473,180,524,181,181,181,181,181,181,181,524,524,472,473,180,180,181,471,472,473,180,471,472,473,180,181,181,180,471,472,473,471,472,473,524,524,525,181,181,181,181,471,472,473,180,471,472,473,181,471,472,181,181,181,471,472,473,471,471,471,472,472,473,181,181,181,181,181,181,181,181,181,181,471,472,524,524,471,524,524,471,471,181,181,181,181,181,181,181,471,472,473,180,181,181,471,472,473,180,471,472,473,180,471,472,473,180,524,524,471,472,473,471,472,473,181,524,524,474,0,474,474,475,475,474,474,0,474,44,474,0,475,475,44,44,474,475,44,474,475,44,44,474,475,44,474,475,44,44,44,44,44,44,474,475,474,475,44,474,475,44,474,475,44,474,475,44,44,44,44,44,474,475,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,474,475,44,44,474,475,44,474,475,44,474,475,44,44,44,44,44,44,44,302,367,0,0,0,302,367,0,0,302,367,0,0,0,303,303,303,304,302,367,304,302,367,303,304,302,367,304,302,367,231,304,304,367,304,367,303,303,303,231,231,150,303,304,302,367,304,304,302,302,302,302,367,367,150,304,304,303,303,304,302,367,231,231,303,303,303,303,303,303,231,150,231,231,303,304,302,367,304,302,367,304,302,367,231,150,302,304,302,367,0,303,303,304,304,235,235,235,0,368,368,368,368,368,368,368,235,368,368,368,368,0,235,235,235,235,235,235,235,235,235,235,235,235,235,368,235,368,235,368,235,368,235,235,235,235,235,235,235,235,235,235,368,235,368,235,235,235,235,235,235,368,235,368,235,235,235,235,235,235,235,235,235,235,235,368,235,235,235,235,235,235,235,368,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,368,235,235,235,368,235,368,235,368,235,235,0,0,0,506,159,161,0,506,159,161,161,0,0,450,476,216,476,216,450,476,216,476,216,216,216,476,216,476,216,476,216,476,216,216,216,216,216,476,216,216,476,216,216,216,476,216,216,476,476,216,476,216,476,216,476,216,216,216,216,0,0,477,477,477,477,477,477,477,266,477,266,477,266,477,477,266,477,266,266,266,266,266,266,0,266,266,477,477,477,477,266,266,266,477,266,266,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,361,0,0,0,0,526,479,361,479,527,528,479,362,479,362,362,362,528,528,528,527,330,336,329,333,481,362,527,479,481,330,329,333,336,479,362,479,362,0,479,362,479,481,479,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,528,0,528,481,481,481,481,362,362,362,479,362,479,362,479,362,362,0,0,0,0,480,528,480,480,482,480,482,482,528,528,528,480,482,480,480,482,480,482,480,482,482,482,482,482,528,528,480,482,480,482,480,482,480,318,364,318,364,0,364,364,0,0,230,230,230,318,364,318,364,230,318,364,318,364,318,364,318,364,230,318,364,318,364,230,230,318,364,230,230,230,318,364,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,318,364,318,364,318,364,318,364,230,0,0,0,342,275,275,275,275,275,275,240,240,342,0,342,275,342,275,238,342,275,342,275,238,238,342,275,342,275,238,342,275,342,275,238,238,238,238,238,238,238,342,275,238,238,238,238,342,275,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,0,342,275,342,275,342,275,342,275,238,238,238,0,240,240,0,0,0,0,0,240,240,240,240,240,240,240,240,240,240,240,240,0,0,0,240,240,240,240,0,0,0,0,259,259,0,259,259,259,259,259,259,483,259,259,259,483,483,259,259,259,483,483,483,259,259,259,259,259,484,0,0,484,484,484,484,484,484,484,484,484,484,484,485,484,485,484,484,484,484,484,484,484,485,484,485,484,485,484,484,484,485,484,484,484,484,484,485,484,484,484,484,484,484,484,484,484,484,484,485,484,484,484,484,484,484,485,484,484,484,484,484,484,484,484,484,485,484,485,484,485,484,484,0,0,200,0,490,0,360,307,358,307,490,490,0,0,0,490,218,199,0,307,360,360,360,199,199,492,0,0,0,0,0,218,307,0,0,0,0,307,198,358,287,287,287,218,200,359,218,307,0,287,288,490,200,307,200,0,0,0,0,0,0,0,0,359,0,0,0,218,307,199,218,287,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,287,288,490,0,0,200,492,199,307,324,486,222,487,222,487,280,488,42,200,488,284,281,222,281,42,42,222,200,200,200,200,200,200,200,200,491,45,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,487,222,325,222,284,287,288,285,489,281,45,200,197,490,42,486,491,492,218,359,280,358,360,199,198,307,222,287,288,285,489,281,45,200,197,490,42,486,491,492,218,359,280,358,360,199,198,307,232,200,222,45,197,200,529,200,324,222,222,222,222,222,222,222,357,284,222,254,287,288,45,200,197,490,42,486,491,492,218,280,358,199,198,307,325,325,325,488,254,488,254,281,200,285,325,284,284,284,529,200,325,274,494,281,281,281,250,287,288,285,45,200,197,490,42,486,491,492,218,359,358,360,199,198,307,222,222,287,288,200,490,492,218,359,358,360,199,198,307,200,325,488,325,325,232,325,487,324,357,284,250,222,488,254,287,288,285,489,281,45,200,200,200,200,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,222,325,357,222,222,325,222,489,357,222,357,222,357,222,232,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,200,200,200,200,200,200,487,281,281,487,357,222,281,222,222,45,287,288,200,490,492,218,359,358,360,199,198,307,357,284,222,281,42,357,222,284,248,287,288,285,489,45,197,490,42,486,491,287,288,285,489,45,197,490,42,486,491,200,529,200,529,200,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,200,200,200,222,200,248,200,357,281,222,281,222,222,284,197,250,325,487,324,357,284,222,488,254,489,45,42,486,491,200,45,0,325,325,200,487,487,280,324,487,486,491,285,254,200,284,487,324,222,222,200,284,325,222,222,222,222,222,222,222,222,222,222,325,325,325,284,222,357,222,357,222,357,222,357,222,222,357,222,357,284,222,357,222,357,222,222,284,222,284,357,284,325,284,222,284,284,284,222,222,222,529,274,494,281,357,284,197,486,491,200,200,200,284,222,491,284,284,284,489,491,197,287,288,285,489,281,45,200,197,490,42,486,491,492,218,359,280,358,360,199,198,307,222,200,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,284,324,197,287,288,285,489,281,45,200,197,490,42,486,491,248,492,218,359,280,358,360,199,198,307,222,200,284,281,287,288,285,489,45,197,490,42,486,491,250,529,281,42,222,287,288,285,489,45,197,490,42,486,491,0,0,0,0,0,0,0,234,496,497,234,234,146,234,234,234,234,234,234,234,234,234,234,276,277,279,234,276,277,279,496,276,234,276,277,279,234,276,277,279,234,234,234,234,234,146,146,497,496,146,234,234,234,234,234,276,277,279,234,234,146,497,496,146,497,496,234,234,234,234,234,276,277,279,497,496,279,234,276,277,279,234,234,234,234,234,234,234,234,234,234,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,497,496,277,277,234,146,146,277,277,234,234,234,234,234,234,234,276,277,279,234,234,234,277,234,234,234,234,234,234,146,146,146,146,146,146,146,279,234,497,496,146,234,276,497,496,234,234,234,234,234,234,234,234,277,276,279,234,276,277,279,234,234,234,276,277,279,234,276,277,279,234,276,277,279,234,234,146,146,277,497,496,146,277,0,0,0,0,366,0,366,366,366,366,366,366,366,366,366,366,366,0,366,366,366,366,353,353,0,0,353,0,0,0,0,0,498,353,498,353,81,498,353,498,353,81,81,81,81,81,498,353,81,498,353,81,81,499,498,353,81,498,353,81,81,81,81,81,353,498,353,81,81,81,498,81,81,81,499,81,81,81,81,498,81,81,81,498,353,498,353,498,353,498,353,81,81,81,81,81,81,0,0,355,503,0,0,355,0,0,253,501,500,501,355,500,501,355,500,501,500,501,502,253,500,501,253,253,503,500,500,501,502,503,253,500,501,355,500,501,355,355,355,503,500,501,500,501,500,501,355,501,503,253,0,501,500,0,501,500,501,503,503,503,0,0,500,501,500,500,501,355,500,501,355,500,501,355,500,500,501,501,500,500,501,501,365,0,365,365,365,365,365,365,365,365,365,365,0,365,365,365,0,0,365,365,365,384,384,384,384,0,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,0,384,384,0,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,0,384,384,384,384,384,384,384,384,384,384,384,384,384,0,385,385,385,385,385,385,385,0,0,385,385,385,385,0,385,385,385,385,385,385,0,0,0,0,0,314,314,311,208,311,311,311,0,0,314,314,208,208,314,314,314,314,314,314,314,314,314,208,315,208,315,83,314,311,83,314,311,208,83,314,311,83,314,311,314,208,315,314,314,314,314,208,315,314,314,314,314,208,83,314,311,314,311,314,208,315,83,314,314,314,314,314,311,83,314,311,314,314,314,314,314,314,314,314,314,314,208,208,208,208,314,311,208,208,315,314,314,314,314,314,314,83,314,311,314,314,314,314,314,208,315,314,314,314,314,208,315,208,314,314,208,315,314,314,314,314,314,314,314,314,208,315,83,314,311,314,314,83,314,311,83,314,311,83,314,311,314,314,208,208,0,530,530,0,504,504,504,504,504,504,0,0,504,504,504,504,504,504,504,504,504,0,0,0,0,531,532,533,534,531,532,533,534,531,532,533,531,532,533,534,534,323,261,0,321,321,321,321,321,321,0,0,320,320,320,321,320,320,0,320,320,320,320,320,320,320,320,323,321,323,321,323,321,323,321,261,261,261,323,321,323,321,261,323,321,323,321,0,261,323,321,261,321,321,323,321,261,0,261,0,261,261,261,261,0,261,0,261,261,261,0,323,321,323,321,323,321,323,321,321,261,261,261,321,261,0,196,320,196,0,321,321,321,321,321,321,0,0,320,320,320,321,196,196,196,320,320,320,320,320,320,320,320,320,320,320,196,320,196,320,196,320,196,0,320,196,320,196,320,196,320,196,320,196,320,196,0,320,196,320,196,320,196,320,196,64,0,196,64,271,196,196,196,0,0,271,64,64,271,64,271,271,64,271,271,64,64,64,64,271,271,271,64,64,271,271,64,64,64,64,271,0,0,196,0,321,321,321,321,321,321,0,0,320,320,320,321,196,196,196,320,320,320,320,320,320,320,320,320,320,296,296,0,296,296,0,296],"fc":[40,116,305,482,574,598,607,608,609,610,923,925,929,932,934,990,991,1040,1041,1045,1100,1173,1182,1183,1184,1185,1326,1337,1340,1349,1350,1540,1541,1543,1544,1545,1560,1564,1568,1571,1572,1579,1588,1589,1592,1594,1597,1598,1599,1607,1629,1640,1641,1659,1660,1730,1731,1735,1736,1739,1819,1822,1884,1885,1887,2088,2089,2090,2093,2095,2154,2156,2175,2176,2211,2217,2249,2284,2317,2345,2346,2351,2370,2372,2374,2379,2392,2400,2401,2402,2403,2404,2420,2421,2423,2425,2428,2442,2443,2444,2446,2447,2448,2530,2570,2578,2679,2719,2754,2768,2779,2787,2822,2883,2936,3017,3051,3105,3108,3399,3452,3453,3618,3619,3806,3822,4014,4128,4129,4133,4182,4775,4790,4816,4969,5021,5065,5066,5067,5082,5088,5089,5091,5098,5099,5100,5102,5103,6782,6796,6799,6800,6801,6806,6807,6808,6814,6815,6816,6819,6820,6821,6822,6823,6824,6826,6827,6847,6848,6849,6850,6851,6852,6853,6856,6865,6868,6923,7149,7188,7253,7283,7284,7291,7405,7473,7538,7539,7691,7837,7986,7987,8382,8383,8407,8427,8428,8577,8586,8619,8622,8904,8905,8906,8907,8909,8910,8919,8920,8921,8922,8923,8935,9079,9080,9308,9602,9624,9692,10029,10043,10044,10056,10081,10086,10089,10091,10131,10135,10136,10158,10162,10165,10273,10274,10275,10289,10300,10301,10302,10303,10318,10324,10330,10359,10360,10361,10362,10365,10366,10382,10383,10388,10393,10403,10422],"p":[[3,"Color",0],[15,"u8"],[3,"FourByteTag",0],[3,"skia_textlayout_ParagraphCache",10680],[3,"Handle",0],[15,"tuple"],[3,"GrDirectContext",10680],[3,"RCHandle",0],[3,"GrRecordingContext",10680],[15,"bool"],[6,"OpBuilder",0],[6,"Path",7447],[4,"PathOp",0],[3,"GrGLExtensions",10680],[15,"str"],[8,"AsRef",10681],[3,"SkOpBuilder",10680],[3,"V2",0],[3,"V3",0],[3,"V4",0],[3,"IVector",0],[3,"ISize",0],[3,"Point",0],[6,"Vector",0],[3,"Size",0],[3,"Point3",0],[6,"PathBuilder",0],[6,"scalar",0],[3,"Rect",0],[3,"SkPath",10680],[3,"SkPathBuilder",10680],[8,"Into",10681],[4,"PathDirection",0],[4,"Option",10682],[3,"skia_textlayout_TextStyle",10680],[15,"i32"],[15,"usize"],[4,"AddPathMode",7447],[3,"Matrix",7093],[3,"skia_textlayout_ParagraphBuilder",10680],[3,"RefHandle",0],[3,"PlaceholderStyle",9081],[15,"slice"],[3,"RRect",8269],[3,"TextShadow",9081],[3,"Pixmap",0],[4,"c_void",10683],[3,"IRect",0],[3,"skia_textlayout_Paragraph_ExtendedVisitorInfo",10680],[3,"skia_textlayout_Paragraph_VisitorInfo",10680],[3,"skia_textlayout_TypefaceFontStyleSet",10680],[3,"SkYUVAPixmapInfo_SupportedDataTypes",10680],[3,"ColorChannelFlag",0],[3,"SurfacePropsFlags",0],[6,"Bitmap",0],[3,"SkBitmap",10680],[6,"ImageInfo",0],[6,"TextBlobBuilder",0],[6,"Font",4347],[6,"GlyphId",0],[3,"SkTextBlobBuilder",10680],[3,"RSXform",0],[15,"u32"],[6,"YUVAPixmapInfo",10608],[3,"SkYUVAPixmaps",10680],[3,"SkRuntimeEffect",10680],[3,"SkPaint",10680],[15,"f32"],[6,"ColorTable",0],[15,"array"],[3,"SkColorTable",10680],[4,"AlphaType",0],[6,"ColorInfo",0],[3,"SkImageInfo",10680],[3,"SkColorInfo",10680],[3,"SkImage",10680],[3,"skia_textlayout_Paragraph",10680],[3,"SkOrderedFontMgr",10680],[6,"FontMgr",0],[3,"SkPDF_AttributeList",10680],[6,"Typeface",10006],[3,"SkVertices",10680],[3,"Bone",10273],[15,"never"],[3,"skia_textlayout_ParagraphStyle",10680],[3,"Sk3DView",10680],[3,"Canvas",3554],[3,"SkStrokeRec",10680],[6,"Paint",7389],[6,"Picture",0],[3,"SkPicture",10680],[3,"SkDrawable",10680],[6,"MaskFilter",0],[3,"SkMaskFilter",10680],[4,"SkPathBuilder_ArcSize",10680],[4,"ArcSize",7447],[15,"i64"],[6,"Blender",0],[3,"SkImageFilter",10680],[3,"ArithmeticFPInputs",6941],[3,"SkPathEffect",10680],[3,"DashInfo",7755],[3,"Color4f",0],[4,"BlendMode",0],[6,"Data",0],[3,"SkData",10680],[4,"BlendModeCoeff",0],[6,"DirectContext",4765],[3,"GrBackendFormat",10680],[4,"Format",5328],[6,"Enum",5328],[6,"Image",6767],[6,"ImageFilter",6892],[6,"PixelFormat",5561],[4,"TextEncoding",0],[3,"SkString",10680],[3,"SkStrings",10680],[15,"u16"],[8,"EncodedText",0],[4,"Format",5606],[6,"DataTable",0],[3,"SkDataTable",10680],[3,"SkShaper_RunIterator",10680],[3,"CStr",10684],[8,"Copy",10685],[3,"GrBackendRenderTarget",10680],[4,"BackendAPI",4765],[3,"GrBackendDrawableInfo",10680],[3,"GrBackendTexture",10680],[3,"skgpu_MutableTextureState",10680],[4,"BackendApi",4765],[6,"BackendFormat",4765],[6,"BackendTexture",4765],[4,"SurfaceOrigin",4765],[3,"SkPictureRecorder",10680],[6,"BBHFactory",0],[4,"BlurStyle",0],[4,"TileMode",0],[3,"SkVertices_Builder",10680],[6,"BoneIndices",10273],[6,"BoneWeights",10273],[6,"TextBlob",0],[3,"SkRegion",10680],[3,"SkTypeface",10680],[3,"SkTextBlob",10680],[6,"Paragraph",9792],[4,"ColorType",0],[3,"SkSurface",10680],[4,"PaintCap",0],[6,"Child",8370],[3,"skia_textlayout_FontCollection",10680],[3,"RGB",0],[3,"HSV",0],[3,"ColorSpacePrimaries",0],[3,"ColorSpaceTransferFn",0],[3,"XYZD50Hash",0],[4,"YUVColorSpace",0],[4,"ColorChannel",0],[4,"FilterMode",0],[3,"CubicMap",0],[4,"MipmapMode",0],[3,"M44",0],[4,"CodecResult",0],[4,"EncodedImageFormat",0],[4,"ClipOp",0],[4,"FontHinting",0],[4,"PaintStyle",0],[4,"PixelGeometry",0],[4,"PaintJoin",0],[3,"SurfaceProps",0],[4,"CoverageMode",0],[4,"PathFillType",0],[4,"PathVerb",0],[4,"TextureCompressionType",0],[3,"skia_textlayout_FontArguments",10680],[3,"FontArguments",4415],[4,"Ordering",10686],[6,"ColorFilter",4122],[6,"ColorSpace",0],[4,"RegionOp",8122],[6,"Region",8122],[6,"PathEffect",7755],[3,"SkColorFilter",10680],[3,"SkYUVAInfo",10680],[3,"SkYUVAPixmapInfo",10680],[6,"FontTableTag",10006],[6,"FontStyleSet",0],[3,"SkRuntimeEffect_Uniform",10680],[3,"SkFontStyleSet",10680],[3,"SkFontMgr",10680],[3,"SkFont",10680],[3,"SkShaper_FontRunIterator",10680],[3,"SkShaper_LanguageRunIterator",10680],[3,"SkShaper_BiDiRunIterator",10680],[3,"SkShaper_ScriptRunIterator",10680],[4,"DataType",10548],[3,"Decoration",9081],[4,"TextDecorationMode",9081],[4,"TextDecorationStyle",9081],[3,"TextDecoration",9081],[3,"SkPDF_Metadata",10680],[4,"Renderable",4765],[6,"Unichar",0],[3,"FontStyle",4657],[3,"Borrows",0],[3,"SkColorSpace",10680],[8,"NativeFlattenable",0],[6,"Vertices",10273],[3,"SkCustomTypefaceBuilder",10680],[3,"SkDynamicMemoryWStream",10680],[3,"SkStreamAsset",10680],[6,"PixelRef",0],[3,"SkPixelRef",10680],[3,"SkDrawable_GpuDrawHandler",10680],[6,"BackendDrawableInfo",4765],[3,"SamplingOptions",8575],[4,"Edging",4347],[4,"TextAlign",9081],[3,"Vec",10687],[6,"ImageGenerator",0],[3,"SkImageGenerator",10680],[6,"TextStyle",9081],[8,"IntoIterator",10688],[8,"FnMut",10689],[3,"GrGLInterface",10680],[6,"Extensions",5328],[3,"String",10690],[8,"Iterator",10691],[4,"MapDirection",6892],[6,"StrokeRec",8807],[6,"Uniform",8370],[6,"FontArguments",9081],[6,"Drawable",4329],[3,"VisitorFlags",9792],[3,"Flags",8465],[4,"SemaphoresSubmitted",4765],[3,"FlushInfo",4765],[6,"Surface",8870],[4,"SyncCpu",4765],[4,"BackendSurfaceAccess",8955],[6,"MutableTextureState",4765],[3,"Formatter",10692],[6,"Result",10692],[3,"TextBlobRun",0],[3,"Error",10692],[4,"Result",10693],[3,"Iter",0],[3,"FontFamilies",9081],[3,"skia_textlayout_StrutStyle",10680],[6,"FontFeature",9081],[3,"FontMetrics",4507],[3,"SkShader",10680],[6,"OrderedFontMgr",10081],[6,"TypefaceFontProvider",9081],[15,"char"],[6,"RecordingContext",4765],[6,"BackendRenderTarget",4765],[3,"SkSVGDOM",10680],[3,"LoadError",8976],[6,"Handle",5561],[6,"YUVAInfo",10464],[3,"Path",10694],[3,"SkPathMeasure",10680],[3,"SkContourMeasureIter",10680],[4,"BitDepth",7025],[6,"Shader",8634],[8,"Read",10695],[3,"SkCodecs_Decoder",10680],[3,"Codec",3895],[3,"DrawableInfo",5606],[6,"YUVAPixmaps",10608],[4,"Mipmapped",4765],[6,"YUVABackendTextures",4765],[6,"TextRange",9081],[4,"BackendHandleAccess",8870],[3,"GlyphClusterInfo",9792],[3,"GlyphInfo",9792],[6,"TextIndex",9081],[3,"FontInfo",9792],[3,"PositionWithAffinity",9081],[3,"LineMetrics",9081],[3,"SkContourMeasure",10680],[3,"MatrixFlags",4195],[6,"ParagraphStyle",9081],[3,"TextBox",9081],[3,"Range",10696],[4,"RectHeightStyle",9081],[4,"RectWidthStyle",9081],[3,"SkColorMatrix",10680],[3,"FramebufferInfo",5328],[3,"TextureInfo",5328],[8,"Hasher",10697],[3,"HighContrastConfig",6737],[3,"DirectContextId",4765],[3,"SkRuntimeEffect_Child",10680],[6,"SupportedDataTypes",10645],[3,"Iter",10698],[3,"IterNames",10698],[4,"GradientShaderColors",6555],[3,"Flags",6555],[3,"Interpolation",6555],[4,"ChildPtr",8370],[6,"RuntimeEffect",8370],[3,"Options",8370],[4,"CachingHint",6767],[4,"ApplyPerspectiveClip",7093],[4,"StyleType",9081],[3,"MatrixFlags",7786],[6,"TextureInfo",5561],[3,"GrYUVABackendTextureInfo",10680],[4,"VertexMode",10273],[3,"skia_textlayout_FontFeature",10680],[3,"SkFlattenable",10680],[3,"BuilderFlags",10273],[6,"Builder",10273],[3,"GrMtlTextureInfo",10680],[3,"GrMtlBackendContext",10680],[4,"InitStyle",8807],[3,"GrYUVABackendTextures",10680],[4,"PlaneConfig",10548],[4,"Subsampling",10464],[4,"EncodedOrigin",3895],[4,"Siting",10464],[6,"ParagraphCache",9081],[6,"FontCollection",9081],[3,"SkShaper",10680],[3,"skia_textlayout_TypefaceFontProvider",10680],[3,"SkTextBlob_Iter",10680],[6,"BiDiRunIterator",8685],[6,"FontRunIterator",8685],[6,"Interface",5328],[3,"ContextOptions",5244],[6,"ScriptRunIterator",8685],[6,"BackendContext",5561],[3,"Budgeted",4765],[6,"LanguageRunIterator",8685],[4,"Protected",4765],[4,"ImageLayout",5606],[3,"ImageInfo",5606],[3,"BackendContext",5606],[3,"YcbcrConversionInfo",5606],[4,"ContentChangeMode",8870],[4,"Style",7734],[3,"Duration",10699],[4,"PurgeResourceOptions",4765],[6,"c_void",10700],[8,"Pixel",0],[6,"ColorMatrix",4166],[6,"U8CPU",10680],[6,"PMColor",0],[3,"ResourceCacheUsage",4765],[3,"SegmentMask",7447],[4,"SerializeBehavior",10006],[8,"Write",10695],[4,"TypefaceGlyph",10081],[3,"ResourceCacheLimits",4765],[6,"StrutStyle",9081],[4,"TextBaseline",9081],[4,"TextDirection",9081],[4,"TextHeightBehavior",9081],[8,"AsRunHandler",8685],[3,"Feature",8685],[6,"GPUDrawHandler",4341],[4,"Style",8807],[4,"PathEncoding",10166],[4,"Mode",9988],[4,"ChildType",8370],[4,"Type",8465],[3,"TypeId",10701],[6,"TypefaceId",10006],[3,"Sendable",0],[8,"ConditionallySend",0],[3,"Axis",4632],[3,"Coordinate",4487],[3,"TopLayerPixels",3554],[3,"SaveLayerFlags",3554],[3,"SaveLayerRec",3554],[4,"GlyphPositions",3554],[4,"PointMode",3554],[4,"SrcRectConstraint",3554],[3,"OwnedCanvas",3554],[3,"AutoRestoredCanvas",3554],[3,"Lattice",3862],[3,"ShadowFlags",10187],[4,"Align",10252],[4,"RectType",3862],[3,"Options",3895],[3,"FrameInfo",3895],[4,"SelectionPolicy",3895],[4,"ZeroInitialized",3895],[4,"ScanlineOrder",3895],[6,"Decoder",4103],[8,"Seek",10695],[6,"ContourMeasure",4195],[6,"ContourMeasureIter",4195],[3,"Document",4294],[3,"Open",4311],[3,"OnPage",4311],[8,"Debug",10692],[3,"VariationPosition",4415],[3,"Palette",4415],[3,"Override",4466],[3,"Flags",4507],[3,"Weight",4657],[3,"Width",4657],[4,"Slant",4657],[3,"DriverBugWorkarounds",4765],[4,"Origin",4765],[6,"YUVABackendTextureInfo",4765],[4,"Enable",5244],[4,"ShaderCacheStrategy",5244],[3,"BackendState",5328],[3,"SurfaceInfo",5328],[4,"Standard",5328],[6,"UInt",5328],[3,"SurfaceInfo",5561],[3,"ExtensionFlags",5606],[3,"FeatureFlags",5606],[3,"AllocFlag",5606],[3,"Alloc",5606],[4,"GetProcOf",5606],[3,"SurfaceInfo",5606],[3,"Version",5606],[4,"ImageTiling",5606],[4,"SharingMode",5606],[4,"Filter",5606],[3,"Extent2D",5606],[3,"Offset2D",5606],[3,"Rect2D",5606],[4,"SamplerYcbcrModelConversion",5606],[4,"SamplerYcbcrRange",5606],[4,"ChromaLocation",5606],[3,"PhysicalDeviceFeatures2",5606],[3,"NullHandle",5606],[6,"Buffer",5606],[6,"Image",5606],[6,"Instance",5606],[6,"PhysicalDevice",5606],[6,"Device",5606],[6,"Queue",5606],[6,"CommandBuffer",5606],[6,"DeviceMemory",5606],[6,"RenderPass",5606],[6,"DeviceSize",5606],[8,"GetProc",5606],[6,"Bool32",5606],[15,"u64"],[6,"FormatFeatureFlags",5606],[4,"InvertStyle",6718],[3,"CubicResampler",6767],[3,"CropRect",6941],[4,"Dither",6941],[4,"Downsample",7049],[3,"Options",7049],[3,"TypeMask",7093],[4,"ScaleToFit",7093],[4,"Member",7093],[4,"AffineMember",7093],[4,"Verb",7447],[3,"Iter",7447],[3,"RawIter",7447],[6,"PathMeasure",7786],[3,"StructureElementNode",7898],[6,"AttributeList",7898],[3,"DateTime",7898],[3,"Metadata",7898],[6,"PictureRecorder",7988],[3,"FilterFlag",7995],[3,"Options",7995],[3,"Comment",7995],[3,"Iterator",8122],[3,"Cliperator",8122],[3,"Spanerator",8122],[4,"Type",8269],[4,"Corner",8269],[3,"FilterOptions",8575],[3,"GradientInfo",8634],[3,"SkShaper_RunHandler",10680],[3,"TextBlobBuilderRunHandler",8685],[3,"RunInfo",8771],[6,"Shaper",8685],[3,"Buffer",8771],[6,"Dom",8976],[3,"Flags",9005],[3,"Canvas",9005],[3,"Block",9081],[6,"ParagraphBuilder",9081],[6,"TypefaceFontStyleSet",9081],[3,"StyleMetrics",9081],[4,"PlaceholderAlignment",9081],[3,"Placeholder",9081],[4,"Affinity",9081],[15,"f64"],[6,"BlockRange",9081],[15,"isize"],[6,"ExtendedVisitorInfo",9792],[6,"VisitorInfo",9792],[3,"LocalizedString",10006],[6,"LocalizedStringsIter",10006],[3,"Patch3D",10081],[3,"Camera3D",10081],[6,"View3D",10081],[6,"CustomTypefaceBuilder",10081],[3,"Options",10423],[8,"Scalar",0],[6,"SamplingMode",8575],[8,"Scalars",0],[8,"Contains",0],[8,"Flattenable",0],[8,"QuickReject",0],[8,"RoundOut",0],[6,"Vector3",0],[6,"Color3f",0],[4,"AutoCanvasRestore",3554],[8,"SetMatrix",3554],[6,"DisposalMethod",4096],[6,"Blend",4096],[3,"PhysicalDeviceFeatures",5606],[6,"HueMethod",6684],[6,"ColorSpace",6684],[6,"InPremul",6684],[6,"AlphaOption",7049],[6,"CompressionLevel",7898],[8,"Combine",8122],[8,"Intersects",8122],[8,"AsNativeRunHandler",8685],[8,"RunIterator",8685],[8,"RunHandler",8771],[8,"RangeExtensions",9081],[6,"Compression",10423],[8,"PointerWrapper",10444],[8,"ValueWrapper",10444],[8,"NativeTransmutableWrapper",10444],[8,"RefWrapper",10444]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
