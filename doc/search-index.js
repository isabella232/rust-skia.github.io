var searchIndex = JSON.parse('{\
"skia_safe":{"doc":"","t":[13,13,13,18,13,13,13,13,4,4,13,6,6,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,6,4,4,6,4,3,13,13,6,13,13,18,13,18,3,13,13,4,13,6,4,13,3,13,6,3,13,4,3,13,6,6,6,6,3,3,4,8,13,8,6,6,13,4,13,3,3,13,18,18,13,13,18,13,6,6,3,13,18,18,6,6,13,13,13,13,3,6,13,13,13,13,13,17,4,4,13,13,13,13,4,3,8,6,3,4,3,6,3,6,3,13,13,13,18,18,18,18,18,6,13,13,18,13,3,3,13,3,13,13,13,13,3,3,13,13,3,3,13,6,6,6,6,13,13,13,13,13,13,13,13,13,13,13,13,3,13,18,13,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,13,13,13,13,3,18,18,18,18,18,18,18,17,6,3,18,4,13,13,13,13,13,18,18,8,13,13,13,13,13,13,18,13,6,13,13,13,3,13,6,13,6,4,4,4,6,6,4,6,4,6,4,3,4,6,6,8,4,6,6,13,3,3,13,13,8,13,13,13,13,13,13,3,18,18,18,3,18,13,13,13,18,13,13,13,13,13,13,13,3,3,18,13,18,13,13,3,3,6,13,13,13,13,13,13,13,8,6,13,13,13,6,3,13,8,8,13,3,6,6,3,13,13,13,13,13,13,13,13,13,13,13,6,13,6,6,3,3,18,6,6,6,3,4,4,13,13,6,18,13,13,13,6,13,13,13,13,13,13,13,3,3,3,6,6,6,13,13,18,13,13,3,13,13,18,6,6,6,4,18,13,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,0,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,0,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,0,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,0,0,11,11,12,0,11,11,0,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,11,0,11,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,10,14,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,0,11,0,11,0,0,11,0,0,0,0,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,12,11,11,11,12,0,11,6,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,5,5,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,12,11,11,11,11,11,11,14,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,11,0,11,11,11,11,0,0,12,12,12,5,5,5,5,4,3,3,18,13,4,18,3,13,3,18,4,13,13,13,13,3,3,8,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,4,13,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,13,13,13,6,13,18,4,13,13,13,13,13,13,13,18,13,13,13,3,13,13,4,13,13,4,4,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,17,17,17,17,17,17,17,17,17,17,17,17,6,6,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,11,11,11,0,11,11,6,11,11,5,5,13,13,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,3,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,18,3,3,18,18,18,18,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,12,12,12,12,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,3,18,13,18,18,18,18,13,18,18,18,4,18,18,18,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,6,6,6,6,6,13,3,6,2,13,13,13,6,3,3,3,18,13,13,4,4,13,13,6,18,13,13,13,13,13,18,13,18,4,6,4,3,3,4,4,13,13,13,18,6,6,13,13,13,13,13,18,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,13,13,3,13,4,13,4,13,13,12,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,13,18,3,13,13,13,13,13,6,6,18,4,3,13,13,6,13,13,13,18,18,18,18,13,18,18,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,18,13,13,4,3,18,3,6,13,18,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,3,6,6,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,12,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,18,13,18,13,18,13,13,13,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,6,6,13,13,13,18,18,13,4,6,13,13,13,13,13,13,18,13,18,13,18,13,18,13,13,13,18,6,13,6,6,3,13,13,13,13,13,13,13,13,13,13,13,13,18,3,3,13,18,3,4,6,4,6,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,13,18,13,18,13,13,18,13,18,13,18,13,18,8,4,6,6,13,18,13,18,6,3,4,4,6,6,13,18,18,18,18,18,18,13,13,18,13,13,13,13,13,13,13,13,13,18,13,18,17,18,3,13,3,13,13,13,13,13,13,13,13,13,13,6,3,3,17,6,13,18,13,18,13,18,13,18,13,18,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,3,6,13,18,13,13,13,13,18,13,18,4,4,4,3,13,13,13,13,3,13,13,18,13,18,13,18,13,18,3,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,3,4,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,0,11,11,11,11,11,11,11,11,11,5,5,11,11,5,5,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,4,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,12,0,11,11,11,12,11,5,11,11,11,11,11,11,11,13,13,4,13,5,13,13,13,4,18,4,4,3,13,18,13,13,6,18,13,13,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,18,13,13,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,5,5,5,5,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,5,5,5,5,11,5,5,5,5,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,4,4,13,13,13,17,18,3,4,13,18,13,13,13,18,4,13,13,13,13,13,13,13,13,13,18,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,17,17,17,17,5,13,13,4,13,4,13,6,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,4,13,18,18,13,13,13,13,4,13,13,13,4,13,13,3,18,13,13,18,13,6,18,13,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,13,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,18,18,18,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,4,3,4,13,13,5,6,3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,5,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,5,5,6,11,11,11,11,11,11,3,8,13,13,8,3,18,6,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,18,13,13,13,13,3,13,18,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,6,4,4,13,13,3,6,13,13,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,18,18,18,3,13,13,13,13,13,13,13,18,13,13,13,13,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,13,13,4,13,13,13,6,3,12,11,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,12,11,3,6,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,8,8,6,3,6,6,8,16,8,6,6,3,10,11,10,11,10,10,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,10,11,11,11,11,12,12,11,11,11,11,11,11,11,12,5,3,8,3,12,10,12,11,11,11,11,12,10,10,10,11,11,12,11,11,12,12,11,11,11,12,12,12,10,10,11,11,11,11,11,11,12,5,5,13,13,13,13,4,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,0,18,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,17,13,4,13,13,13,13,13,13,3,6,6,13,13,13,3,13,13,13,13,13,13,13,17,17,17,17,17,13,13,6,6,3,6,13,13,13,13,13,13,13,18,13,13,13,3,6,13,13,13,18,13,18,6,6,6,6,3,4,3,3,13,8,4,4,13,13,13,13,13,6,3,4,4,4,3,6,3,4,4,4,4,6,6,3,6,13,13,13,13,6,6,18,13,13,13,11,11,11,11,11,11,12,11,12,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,12,12,12,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,12,12,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,13,13,6,6,13,3,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,13,6,3,13,4,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,12,12,0,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,13,4,13,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,3,6,6,6,3,18,18,18,18,13,13,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,18,4,13,13,13,13,13,13,4,4,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,5,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,18,18,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,18,4,13,18,18,13,13,13,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,5,11,11,11,5,11],"n":["A","A16Float","A16UNorm","ALPHA","ARGB4444","ASTC","AVIF","Alpha8","AlphaType","AutoCanvasRestore","B","BBHFactory","BBoxHierarchy","BGR101010x","BGRA1010102","BGRA8888","BGRH","BGRV","BLACK","BLUE","BLUE","BMP","BT2020","BT2020_10bit_Full","BT2020_10bit_Limited","BT2020_12bit_Full","BT2020_12bit_Limited","BT2020_8bit_Full","BT2020_8bit_Limited","Bevel","Bitmap","BlendMode","BlendModeCoeff","Blender","BlurStyle","Borrows","BottomLeft","BottomRight","Budgeted","Butt","CCW","COUNT","CW","CYAN","Canvas","Clamp","Clear","ClipOp","Close","Codec","CodecResult","CoeffCount","Color","Color","Color3f","Color4f","ColorBurn","ColorChannel","ColorChannelFlag","ColorDodge","ColorFilter","ColorInfo","ColorMatrix","ColorSpace","ColorSpacePrimaries","ColorSpaceTransferFn","ColorType","ConditionallySend","Conic","Contains","ContourMeasure","ContourMeasureIter","CouldNotRewind","CoverageMode","Cubic","CubicMap","CubicResampler","DA","DARK_GRAY","DATA_TYPE_CNT","DC","DNG","DYNAMIC_MSAA","Darken","Data","DataTable","DateTime","Decal","Default","Default","DeferredDisplayList","DeferredDisplayListRecorder","Difference","Difference","Difference","Difference","Document","Drawable","Dst","DstATop","DstIn","DstOut","DstOver","EMPTY_IRECT","EncodedImageFormat","EncodedOrigin","ErrorInInput","EvenOdd","Exclusion","Fill","FilterMode","FilterOptions","Flattenable","Font","FontArguments","FontHinting","FontMetrics","FontMgr","FontStyle","FontStyleSet","FourByteTag","Full","G","GIF","GRAY","GRAY","GRAY_ALPHA","GREEN","GREEN","GlyphId","GlyphId","Gray8","HALF","HEIF","HSV","Handle","HardLight","HighContrastConfig","Hue","ICO","IDA","IDC","IPoint","IRect","ISA","ISC","ISize","IVector","Identity","Image","ImageFilter","ImageGenerator","ImageInfo","IncompleteInput","Inner","InternalError","Intersect","Intersect","Intersect","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","InverseEvenOdd","InverseWinding","Iter","JPEG","JPEG","JPEGXL","JPEG_Full","KTX","LIGHT_GRAY","Last","Last","Last","Last","Last","LastCoeffMode","LastEnum","LastEnum","LastEnum","LastEnum","LastMode","LastSeparableMode","LastTileMode","LeftBottom","LeftTop","Lighten","Line","Linear","Linear","Luminosity","M44","MAGENTA","MAX_CUSTOM_ATTRIBUTES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_POINTS","MILESTONE","MaskFilter","Matrix","Max_EnumValue","MipmapMode","Mirror","Miter","Modulate","Move","Multiply","N32","NEARLY_ZERO","NativeFlattenable","Nearest","Nearest","None","None","Normal","Normal","ONE","One","OpBuilder","Opaque","Outer","Overlay","OwnedCanvas","PKM","PMColor","PNG","Paint","PaintCap","PaintJoin","PaintStyle","Path","PathBuilder","PathDirection","PathEffect","PathFillType","PathMeasure","PathOp","PathSegmentMask","PathVerb","Picture","PictureRecorder","Pixel","PixelGeometry","PixelRef","Pixmap","Plus","Point","Point3","Premul","Quad","QuickReject","R","R16G16B16A16UNorm","R16G16Float","R16G16UNorm","R8G8UNorm","R8UNorm","RCHandle","RED","RED","RG","RGB","RGB","RGB101010x","RGB565","RGB888x","RGBA","RGBA1010102","RGBA8888","RGBAF16","RGBAF16Norm","RGBAF32","RGBH","RGBV","RRect","RSXform","Rec601","Rec601_Limited","Rec709","Rec709_Full","Rec709_Limited","Rect","RefHandle","Region","Repeat","ReverseDifference","ReverseDifference","RightBottom","RightTop","Round","Round","RoundOut","RuntimeEffect","SA","SC","SRGBA8888","SamplingMode","SamplingOptions","Saturation","Scalar","Scalars","Screen","Sendable","Shader","Shaper","Size","Slight","SoftLight","Solid","Square","Src","SrcATop","SrcIn","SrcOut","SrcOver","Stroke","StrokeAndFill","StrokeRec","Success","Surface","SurfaceCharacterization","SurfaceProps","SurfacePropsFlags","TRANSPARENT","TextBlob","TextBlobBuilder","TextBlobIter","TextBlobRun","TextEncoding","TileMode","TopLeft","TopRight","Typeface","USE_DEVICE_INDEPENDENT_FONTS","UTF16","UTF32","UTF8","Unichar","Unimplemented","Union","Union","Unknown","Unknown","Unknown","Unpremul","V2","V3","V4","Vector","Vector3","Vertices","WBMP","WEBP","WHITE","Winding","XOR","XYZD50Hash","Xor","Xor","YELLOW","YUVAInfo","YUVAPixmapInfo","YUVAPixmaps","YUVColorSpace","ZERO","Zero","a","a","a","a","abandon","abandon","abandoned","add","add","add","add","add","add","add","add","add","add","add","add_arc","add_arc","add_arc","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_circle","add_circle","add_circle","add_font_feature","add_oval","add_oval","add_oval","add_path","add_path","add_path","add_path_matrix","add_placeholder","add_poly","add_polygon","add_polygon","add_rect","add_rect","add_rect","add_round_rect","add_rrect","add_rrect","add_rrect","add_shadow","add_text","addr","addr","addr_at","addr_at","adjust","alias","all","all","all","alloc_n32_pixels","alloc_n32_pixels","alloc_pixels","alloc_pixels","alloc_pixels_flags","alloc_pixels_flags","alloc_pixels_info","alloc_pixels_info","alloc_run","alloc_run","alloc_run_pos","alloc_run_pos","alloc_run_pos_h","alloc_run_pos_h","alloc_run_rsxform","alloc_run_rsxform","alloc_run_text","alloc_run_text","alloc_run_text_pos","alloc_run_text_pos","alloc_run_text_pos_h","alloc_run_text_pos_h","alloc_run_text_rsxform","alloc_run_text_rsxform","allocate","allow_blender","allow_color_filter","allow_shader","alpha","alpha_f","alpha_threshold","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alphabetic_baseline","annotate","append","append_float","append_float_array","append_int","append_typeface","apply_bones","apply_to_canvas","apply_to_paint","apply_to_path","apply_to_path_inplace","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_filtered_bounds","approximate_filtered_bounds","approximate_op_count","approximate_op_count","approximate_op_count_nested","approximate_op_count_nested","approximate_size","arc_to","arc_to","arc_to","arc_to_radius","arc_to_radius","arc_to_rotated","arc_to_tangent","arc_to_tangent","arc_to_tangent","are_finite","area","arithmetic","arithmetic","arithmetic","as_a_dash","as_array","as_array","as_array","as_array","as_array_mut","as_blend_mode","as_bytes","as_bytes","as_coeff","as_direct_context","as_gl_format","as_gl_format_enum","as_image","as_image","as_image_filter","as_image_filter","as_mtl_format","as_mut_array","as_mut_array","as_mut_array","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_scalars","as_slice","as_str","as_vk_format","as_winding","as_winding","ascent","at","at","at_end","at_size","at_size","at_str","at_str","at_t","at_t","avg_char_width","b","b","b","b","b","b","backend","backend","backend","backend","backend","backend","backend_format","backend_format","backend_format","backend_format","backend_texture","background","baseline_shift","begin_recording","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blend_mode","blend_mode_or","blender","blenders","blur","blur","blur","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom","bottom","bottom","bottom","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","build","bytes","bytes","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","c","c","c","cache_max_resource_bytes","cache_max_resource_bytes","can_compute_fast_bounds","can_send","can_send","canvas","canvas","canvas","canvas","cap","cap_height","center","center_x","center_y","channel_mask","characterize","check_async_work_completion","children","circle","clear_caches","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_for_placeholder","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_typeface","clone_with_arguments","clone_with_pixel_geometry","close","close","close","cmp","cmp","codec","col","col_major","color","color","color4f","color_filter","color_filter","color_filter","color_filter_node","color_filters","color_info","color_info","color_matrix","color_matrix_filter","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type_supported_as_image","color_type_supported_as_surface","colors","colors","colors","cols","combine","combine","combine","combine","combine","complement","complement","compose","compose","compose","compose","composed","compressed_backend_format","compressed_backend_format","compute_bounds","compute_bounds","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_fast_bounds","compute_from_t","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_min_byte_size","compute_min_byte_size","compute_offset","compute_offset","compute_region_complexity","compute_tight_bounds","compute_total_bytes","compute_total_bytes","compute_y_from_x","concat","conic_to","conic_to","conic_to","conservatively_contains_rect","consume","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains_no_empty_check","contains_point","contains_rect","contains_region","contour_measure","contrast","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","copy_range","copy_range","copy_table_data","corner_path","corner_path_effect","count","count","count","count","count","count","count_families","count_families","count_glyphs","count_inputs","count_points","count_str","count_tables","count_text","count_verbs","cross","cross","cross","cross","cross_product","cross_product","cubic","cubic_to","cubic_to","cubic_to","cull_rect","cull_rect","current_font","current_language","current_level","current_script","d","d","dash","dash_path_effect","data_type","data_type","day","day_of_week","decode","decode_to_raster","decoration","decoration_mut","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_backend_format","default_fallback","default_fallback_char","deref","deref","deref","deref_mut","descent","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detach","detach","detach","detach","detach","detach","detach_as_data","detach_as_stream","did_exceed_max_lines","difference","difference","dilate","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","disable_font_fallback","discrete","discrete_path_effect","displacement_map_effect","distance","distance_to_origin","distant_lit_diffuse_lighting","distant_lit_specular_lighting","div","div","div","div","div_assign","div_assign","div_assign","document","dot","dot","dot","dot","dot","dot_product","dot_product","dot_with_normal","draw","draw","draw","draw_at","draw_display_list","draw_display_list_with_offset","drawable","draws_nothing","draws_nothing","drop","drop","drop","dump","dump","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","dump_hex","e","edging","effective_align","ellipsis","ellipsized","empty","empty","empty","enable_data_type","enable_font_fallback","encode","encode","encode","encode","encode","encode","encode_to_data","encode_to_data_with_quality","encoded_data","encoded_data","encoded_data","encoded_format","end_of_current_run","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equals","equals","equals","equals","equals","equals_by_fonts","erase","erase","erase","erase","erase_4f","erase_4f","erase_4f","erase_4f","erase_argb","erase_argb","erase_color","erase_color","erase_color_4f","erase_color_4f","erase_with_colorspace","erase_with_colorspace","erode","extend","extend","extensions","extensions_mut","extract_alpha","extract_alpha","extract_subset","extract_subset","extract_subset","extract_subset","f","fallback_manager","family_name","family_name","family_name","family_name","family_names","family_names","fill_type","fill_type","fill_type","filter","filter_bounds","filter_color","filter_color4f","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","find_child","find_input","find_typefaces","find_typefaces_with_font_arguments","find_uniform","finish_recording_as_drawable","finish_recording_as_picture","fits_in_bytes","flags","flags","flush","flush","flush","flush_and_submit","flush_and_submit","flush_and_submit","flush_submit_and_sync_cpu","flush_submit_and_sync_cpu","flush_with_access_info","flush_with_info","flush_with_info","flush_with_mutable_state","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","font_arguments","font_arguments","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_parameters","font_size","font_size","font_style","font_style","font_style","font_style","force_strut_height","foreground","fractal_perlin_noise","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adopted_texture","from_argb","from_argb","from_backend_render_target","from_backend_texture","from_bitmap","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bounds","from_bytes","from_bytes","from_bytes","from_bytes_rgba","from_ca_metal_layer","from_ca_mtk_view","from_chars","from_color_info","from_color_info","from_compressed","from_context","from_data","from_data","from_data","from_data","from_data","from_data_type","from_encoded","from_encoded","from_encoded","from_encoded_with_alpha_type","from_encoded_with_alpha_type","from_encoded_with_alpha_type","from_external_memory","from_external_pixmaps","from_generator","from_irect","from_isize","from_isize","from_iter","from_iter","from_iwh","from_ltrb","from_mtk_view","from_name","from_nv12_textures_copy","from_paint","from_path","from_path","from_picture","from_picture","from_picture","from_picture","from_picture_with_props","from_picture_with_props","from_picture_with_props","from_pixmap_cross_context","from_point_and_size","from_pos_text","from_pos_text","from_pos_text_h","from_pos_text_h","from_pt_size","from_radians","from_raster_data","from_rect","from_rgb","from_rsxform","from_rsxform","from_shader","from_shader","from_size","from_size","from_slice","from_slice","from_slices","from_slices","from_str","from_str","from_str","from_str","from_svg","from_table","from_text","from_text","from_texture","from_typeface","from_typeface_with_params","from_vk","from_wh","from_wh","from_xywh","from_xywh","from_yuva_pixmaps","from_yuva_textures","g","g","g","g","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","get_addr","get_addr","get_alpha_f","get_alpha_f","get_alpha_f","get_alpha_f","get_backend_render_target","get_backend_texture","get_boundary_path","get_bounds","get_col_major","get_color","get_color","get_color","get_color","get_color_4f","get_color_4f","get_color_4f","get_color_4f","get_frame_count","get_glyph_position_at_coordinate","get_image","get_input","get_intercepts","get_intercepts","get_intercepts","get_kerning_pair_adjustments","get_line_metrics","get_matrix","get_path","get_pixels","get_pixels","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_point","get_points","get_pos","get_rects_for_placeholders","get_rects_for_range","get_repetition_count","get_row_major","get_row_major","get_scaled_dimensions","get_scanlines","get_subset","get_subset","get_table_data","get_table_size","get_verbs","get_vk_drawable_info","get_widths","get_widths_bounds","get_word_boundary","get_x_pos","get_yuva_planes","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","glyph_indices","gpu","gradient_shader","graphics","grayscale","h","half_leading","half_leading","has","has_alpha","has_bones","has_colors","has_equal_effect","has_extension","has_indices","has_mip_maps","has_mipmaps","has_mipmaps","has_tex_coords","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height_64","height_override","height_override","high_contrast","high_contrast_config","high_contrast_filter","hinting","hinting_is_on","hour","icu","id","ideographic_baseline","image","image","image_filter","image_filter","image_filters","image_info","image_info","image_info","image_info","image_snapshot","image_snapshot_with_bounds","inc_reserve","inc_reserve","inc_reserve","incremental_decode","index","index","index","index","index","index_count","index_mut","indices","indices","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","info","info","info","info","info","info","info","init_pixmaps_from_single_allocation","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","input","input_size","inputs","inputs","insert","insert","inset","inset","install_pixels","install_pixels","interpolate","intersect","intersect","intersect2","intersect_no_empty_check_","intersection","intersection","intersects","intersects","intersects","intersects","intersects2","intersects_rect","intersects_region","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_image_filter","into_image_filter","into_iter","into_iter","into_iter","into_iter","invert","invert_style","is_a_image","is_all","is_all","is_alpha_only","is_alpha_unchanged","is_always_opaque","is_anti_alias","is_array","is_baseline_snap","is_bgr","is_bold","is_closed","is_closed","is_color","is_compatible","is_compatible","is_complex","is_convex","is_cubic_degenerate","is_dither","is_embedded_bitmaps","is_embolden","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty_64","is_even_odd","is_fill_style","is_finite","is_finite","is_finite","is_finite","is_finite","is_fixed_pitch","is_force_auto_hinting","is_framebuffer_only","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_h","is_hairline_style","is_immutable","is_immutable","is_immutable","is_immutable","is_initialized","is_interpolatable","is_inverse","is_inverse_fill_type","is_italic","is_last_contour_closed","is_lazy_generated","is_line","is_line_degenerate","is_linear","is_linear_metrics","is_mip_mapped","is_mip_mapped","is_null","is_null","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_oval","is_placeholder","is_protected","is_protected","is_protected","is_protected","is_quad_degenerate","is_ready_to_draw","is_ready_to_draw","is_rect","is_rect","is_rgb","is_rrect","is_same_texture","is_sorted","is_src_over","is_srgb","is_srgb","is_subpixel","is_supported","is_texture_backed","is_textureable","is_textureable","is_use_device_independent_fonts","is_v","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_volatile","is_volatile","is_volatile","is_zero","is_zero","is_zero","is_zero","iset","iter","iter","join","join","join","join2","join_non_empty_arg","join_possibly_empty_rect","label","last_pt","layout","leading","leading","left","left","left","left","len","length","length","length","length","length","length","length","length_squared","length_squared","length_squared","length_xy","length_xyz","letter_spacing","line","line_2d","line_2d_path_effect","line_number","line_to","line_to","line_to","linear_gradient","linear_gradient_with_interpolation","locale","longest_line","look_at","luma","luma_color_filter","magnifier","make","make","make","make","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_image","make_scale","make_shader","make_transform","map","mark_dirty","mask_filter","match_face_style","match_face_style","match_family","match_family","match_family_style","match_family_style","match_family_style_character","match_family_style_character","match_one_attribute","match_style","match_style","matches_color_type","matches_color_type","matches_color_type","matrix","matrix","matrix","matrix","matrix_convolution","matrix_path_effect","matrix_translate","max_aniso","max_char_width","max_intrinsic_width","max_lines","max_render_target_size","max_surface_sample_count_for_color_type","max_texture_size","max_width","measure_str","measure_text","merge","merge","merge_path_effect","metal_texture_info","metal_texture_info","metrics","min_intrinsic_width","min_row_bytes","min_row_bytes","minute","mipmap","mipmap","mipmapped","mipmapped","miter","mode","mode","mode","month","move_to","move_to","move_to","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","n32","name","name","name","name","named_transfer_fn","nan","native_deserialize","native_flattenable","native_transmutable","nearly_equal","nearly_equal","nearly_zero","nearly_zero","need_to_apply","needs_ctm","neg","neg","neg","neg","neg","neg","negate","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_a8","new_a8","new_bidi_run_iterator","new_bytes","new_bytes","new_color_space","new_color_space_with_context","new_copy","new_copy","new_copy","new_core_text","new_cross_context_from_pixmap","new_cstr","new_cstr","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_family_name_iterator","new_fill","new_font_mgr_run_iterator","new_from","new_from_data","new_from_data","new_gl","new_gl","new_gl","new_gl","new_gl_with_label","new_hairline","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_identity","new_lighting","new_load_with","new_load_with_cstr","new_metal","new_metal","new_metal","new_metal","new_metal_with_label","new_n32","new_n32","new_n32_premul","new_n32_premul","new_native","new_non_texture_image","new_null","new_path","new_path","new_placeholder","new_placeholder","new_primitive","new_raster","new_raster_direct","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_raster_n32_premul","new_render_target","new_render_target_with_characterization","new_s32","new_s32","new_script_run_iterator","new_shape_then_wrap","new_shaper_driven_wrapper","new_srgb","new_srgb","new_srgb_linear","new_srgb_linear","new_std_language_run_iterator","new_str","new_str","new_style_set","new_style_set","new_styleset","new_styleset","new_subset","new_subset","new_subset","new_subset_with_context","new_surface","new_surface_with_dimensions","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","new_typeface","new_typeface","new_uninitialized","new_uninitialized","new_unknown","new_unknown","new_vk","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_with_label","new_vulkan_ycbcr","new_with_filter","new_zero_initialized","new_zero_initialized","next","next","next_contour","next_scanline","normalize","normalize","normalize","normalize","normalize","normalize_perspective","normalize_vector","normalized","not","not","nothing_to_draw","notify_added_to_cache","notify_added_to_cache","notify_content_will_change","notify_drawing_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","num_channels_in_plane","num_planes","num_planes","num_planes","num_planes","num_planes","offset","offset","offset","offset","offset","offset","offset","offset","offset_points","offset_to","offset_to","oomed","op","op","op_rect","op_rect_region","op_region","op_region_rect","origin","origin","origin","origin","origin_matrix","outbound_scanline","outset","outset","oval","oval_with_start_index","overdraw","overdraw_color_filter","paint","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","partial_cmp","path","path_1d","path_1d_path_effect","path_2d","path_2d_path_effect","path_effect","path_effect","path_measure","path_types","path_utils","pdf","peek_pixels","peek_pixels","peek_pixels","peek_pixels","peek_style","perform_deferred_cleanup","perlin_noise_shader","perspective","picture_recorder","pixel_geometry","pixel_ref","pixel_ref","pixel_ref_origin","pixel_ref_origin","pixels","pixels","pixels","pixels","pixels","pixels","pixmap","pixmap","pixmaps_info","plane","plane_config","plane_dimensions","plane_format","plane_formats","plane_info","plane_infos","plane_subsampling_factors","planes","playback","playback","point_lit_diffuse_lighting","point_lit_specular_lighting","points","polygon","polyline_to","polyline_to","pop","pos_tan","pos_tan","positions","positions","post_concat","post_concat","post_script_name","post_translate","post_translate","pre_concat","pre_concat","pre_concat_16","pre_multiply_argb","pre_multiply_color","pre_scale","pre_scale_xyz","pre_translate","precompile_shader","print_statistics","private","props","purge_caches","purge_harf_buzz_cache","purge_unlocked_resources","push_style","quad_to","quad_to","quad_to","query_yuva_info","queue_family_index","quick_contains","quick_reject","quick_reject_rect","quick_reject_region","r","r","r","r_arc_to_rotated","r_conic_to","r_conic_to","r_conic_to","r_cubic_to","r_cubic_to","r_cubic_to","r_line_to","r_line_to","r_line_to","r_move_to","r_quad_to","r_quad_to","r_quad_to","radial_gradient","radial_gradient_with_interpolation","radians_to_degrees","rc","read_from_memory","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","recommended_rgba_color_type","recording_canvas","recording_context","rect","rect_stays_rect","rect_to_rect","region","register_typeface","reinterpret_color_space","release","release_resources_and_abandon","remove","remove","remove","replace_backend_texture","replace_backend_texture_with_mode","replace_tab_characters","require_base_type","require_type_equality","res_scale","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset_font_features","reset_gl_texture_bindings","reset_shadows","resized","resized","resolve","resolve","resolve_msaa","resource_cache_limit","resource_cache_limits","resource_cache_purgeable_bytes","resource_cache_usage","restore","reverse_add_path","rewind","rgb_to_yuv","right","right","right","right","rotate","rotate_x","rotate_y","rotate_z","round","round_in","round_out","round_out","round_out","row","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_iter","row_major","rows","rrect","rrect","rrect_with_start_index","runtime_effect","s","sample_count","sample_count","sample_count","sampling","sampling_options","save","scalar","scale","scale","scale","scale_pixels","scale_pixels","scale_pixels","scale_x","scaled","scaled","scanline_order","scos","second","segment","segment","segment_masks","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set_44","set_abs","set_alpha","set_alpha_f","set_alpha_type","set_alpha_type","set_anti_alias","set_argb","set_asset_font_manager","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_background_color","set_baseline_shift","set_baseline_snap","set_blend_mode","set_blender","set_bounds","set_bounds2","set_bounds_check","set_bounds_no_check","set_col","set_col_major","set_color","set_color","set_color4f","set_color_filter","set_color_space","set_color_space","set_concat","set_concat","set_concat_16","set_default_font_manager","set_default_font_manager_and_family_names","set_dither","set_dynamic_font_manager","set_edging","set_ellipsis","set_embedded_bitmaps","set_embolden","set_empty","set_empty","set_empty","set_empty","set_empty","set_fill_style","set_fill_type","set_fill_type","set_fill_type","set_font_arguments","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_font_style","set_force_auto_hinting","set_force_strut_height","set_foreground_color","set_glyph","set_hairline_style","set_half_leading","set_half_leading","set_height","set_height","set_height","set_height_override","set_height_override","set_hinting","set_identity","set_identity","set_identity","set_image_filter","set_immutable","set_immutable","set_immutable","set_immutable","set_info","set_info","set_irect","set_is_volatile","set_is_volatile","set_is_volatile","set_iwh","set_last_pt","set_leading","set_length","set_length_xy","set_letter_spacing","set_linear_metrics","set_locale","set_ltrb","set_ltrb","set_mask_filter","set_max_lines","set_metrics","set_mutable_state","set_mutable_state","set_normalize","set_path","set_path","set_path_effect","set_pixel_ref","set_pixel_ref","set_placeholder","set_rc","set_rect","set_rects","set_region","set_replace_tab_characters","set_res_scale","set_resource_cache_limit","set_resource_cache_limits","set_rotate","set_rotate_unit","set_rotate_unit_sin_cos","set_row","set_row_major","set_row_major","set_saturation","set_scale","set_scale","set_scale_x","set_shader","set_size","set_size","set_skew_x","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_params","set_stroke_style","set_stroke_width","set_strut_enabled","set_strut_style","set_style","set_subpixel","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_translate","set_typeface","set_typeface","set_vulkan_image_layout","set_vulkan_image_layout","set_wh","set_wh","set_word_spacing","set_xywh","set_xywh","shader","shader","shader_mask_filter","shaders","shadows","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","shaper","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shrink_to_fit","simplify","simplify","siting_xy","size","size","size","size","size","size_in_bytes","skew_x","skip_scanlines","snap_gpu_draw_handler","snapshot","snapshot","sort","sort","sorted","sorted","source","spacing","spot_lit_diffuse_lighting","spot_lit_specular_lighting","ssin","start_incremental_decode","start_scanline_decode","stencil_bits","store_vk_pipeline_cache_data","str_to_glyphs","str_to_glyphs","str_to_glyphs_vec","stroke","stroke_and_fill_path_effect","stroke_cap","stroke_join","stroke_miter","stroke_path_effect","stroke_rec","stroke_width","strut_enabled","strut_style","style","style","style","style","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","submit","subsampling","sum","supported","supports_distance_field_text","surface","surface_props","svg","swap","swap","swap","swap","swap_rb","swap_rb_inplace","sweep_gradient","sweep_gradient_with_interpolation","symmetric_difference","symmetric_difference","table_color_filter","table_tags","tex_coords","tex_coords","text_align","text_baseline","text_direction","text_height_behavior","text_style","text_to_glyphs","text_to_glyphs","text_to_glyphs_vec","textlayout","texture","texture","texture_origin","texture_origin","texture_size","textures","textures_are_cacheable","textures_are_cacheable","tight_bounds","tight_bounds","tile","time_zone_minutes","to_a_color_filter","to_a_color_matrix","to_a_color_mode","to_bytes","to_ceil","to_color","to_color","to_floor","to_font_data","to_hsv","to_hsv","to_m33","to_non_inverse","to_non_texture_image","to_opaque","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","to_quad","to_quad","to_raster_image","to_raw_shader","to_rgb","to_round","to_shader","to_shader","to_shader","to_shader","to_shader","to_string","to_svg","to_svg_with_encoding","to_texture_2d","to_tri_strip","to_xyzd50_hash","to_xyzd50_hash","toggle","toggle","toggle_inverse_fill_type","toggle_inverse_fill_type","toggle_inverse_fill_type","top","top","top","top","top","transform","transform_with_perspective_clip","translate","translate","translate","translated","transpose","trim","trim_path_effect","try_alloc_n32_pixels","try_alloc_n32_pixels","try_alloc_pixels","try_alloc_pixels","try_alloc_pixels_flags","try_alloc_pixels_flags","try_alloc_pixels_info","try_alloc_pixels_info","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbulence_perlin_noise","turn_hinting_off","turn_on","two_point_conical_gradient","two_point_conical_gradient_with_interpolation","tx","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","typeface","typeface","typeface","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyph","unichar_to_glyphs","unichars_to_glyphs","uniform_size","uniforms","union","union","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","units_per_em","unlimited_lines","unresolved_glyphs","unsafe_send_sync","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","update_bounds_cache","use_cubic","uses_glfbo0","uses_glfbo0","utils","v","valid_row_bytes","valid_row_bytes","valid_subset","validate","validate_alpha_type","value","variant_name","variation_design_parameters","variation_design_position","vertex_count","vertices","vk_image_layout","vk_rt_supports_input_attachment","vk_rt_supports_input_attachment","vulkan_image_info","vulkan_image_info","vulkan_secondary_cb_compatible","vulkan_secondary_cb_compatible","w","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width_64","with_a","with_adjustment","with_alpha_type","with_alpha_type","with_alpha_type","with_alpha_type","with_backend_format","with_backend_format","with_color_filter","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_spin","with_color_spin","with_color_type","with_color_type","with_color_type","with_color_type","with_default_mipmaps","with_dimensions","with_dimensions","with_dimensions","with_fbo0","with_fbo0","with_inset","with_inset","with_linear_gamma","with_linear_gamma","with_local_matrix","with_local_matrix","with_matrix","with_matrix","with_offset","with_offset","with_offset","with_offset_to","with_offset_to","with_outset","with_outset","with_size","with_srgb_gamma","with_srgb_gamma","with_subsampling","with_transform","with_transform_with_perspective_clip","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap_mut","wrap_ref","wrap_send","wrap_send","wrapper","writable_addr","writable_addr","writable_addr_at","writable_addr_at","write","write_pixels_from_bitmap","write_pixels_from_pixmap","write_to_memory","x","x","x","x","x","x","x","x","x","x_height","x_max","x_min","y","y","y","y","y","y","y","y","y","year","yuv_color_space","yuv_color_space","yuv_color_space","yuv_to_rgb","yuva_info","yuva_info","yuva_info","yuva_info","yuva_info","yuva_pixmap_info","yuva_pixmaps","z","z","z","link_to_destination","named_destination","rect_with_url","arithmetic","AutoCanvasRestore","AutoRestoredCanvas","Canvas","F16_COLOR_TYPE","Fast","GlyphPositions","INIT_WITH_PREVIOUS","Lattice","Lines","OwnedCanvas","PRESERVE_LCD_TEXT","PointMode","Points","Points","Polygon","RSXforms","SaveLayerFlags","SaveLayerRec","SetMatrix","SrcRectConstraint","Strict","TopLayerPixels","access_top_layer_pixels","all","annotate_link_to_destination","annotate_named_destination","annotate_rect_with_url","as_mut","as_mut","backdrop","base_layer_size","base_props","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","clear","clip_irect","clip_mask","clip_matrix","clip_path","clip_rect","clip_region","clip_rrect","clip_shader","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","colors","complement","concat","concat_44","contains","default","default","deref","deref","deref_mut","deref_mut","device_clip_bounds","difference","discard","draw_annotation","draw_arc","draw_circle","draw_color","draw_drawable","draw_drawable_at","draw_drrect","draw_glyphs_at","draw_glyphs_utf8","draw_image","draw_image_lattice","draw_image_nine","draw_image_rect","draw_image_rect_with_sampling_options","draw_image_with_sampling_options","draw_irect","draw_line","draw_oval","draw_paint","draw_patch","draw_path","draw_picture","draw_point","draw_points","draw_rect","draw_region","draw_round_rect","draw_rrect","draw_shadow","draw_str","draw_str_align","draw_text_blob","draw_vertices","drop","drop","empty","eq","eq","eq","extend","flags","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bitmap","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raster_direct","from_raster_direct_n32","guard","hash","hash","hash","image_info","info","inner","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_clip_empty","is_clip_rect","is_empty","lattice","local_clip_bounds","local_to_device","local_to_device_as_3x3","new","new_null","new_surface","not","origin","paint","partial_cmp","peek_pixels","pixels","props","quick_reject","quick_reject","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","rect_types","remove","reset_matrix","restore","restore","restore_to_count","rotate","row_bytes","save","save_count","save_layer","save_layer_alpha","save_layer_alpha_f","scale","set","set_matrix","set_matrix","set_matrix","skew","sub","sub_assign","surface","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","top_props","total_matrix","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","wrap","write_pixels","write_pixels_from_bitmap","x_divs","y_divs","Default","FixedColor","Lattice","RectType","Transparent","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone_into","colors","default","eq","fmt","fmt","from","from","hash","into","into","rect_types","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x_divs","y_divs","BottomLeft","BottomRight","BottomUp","Codec","CouldNotRewind","DEFAULT","EncodedOrigin","ErrorInInput","IncompleteInput","InternalError","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","LAST","LeftBottom","LeftTop","No","Options","PreferAnimation","PreferStillImage","Result","RightBottom","RightTop","ScanlineOrder","SelectionPolicy","Success","TopDown","TopLeft","TopRight","Unimplemented","Yes","ZeroInitialized","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","dimensions","encoded_format","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","frame_index","from","from","from","from","from","from_data","get_frame_count","get_image","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_repetition_count","get_scaled_dimensions","get_scanlines","get_yuva_planes","hash","hash","hash","hash","incremental_decode","info","inner","inner_mut","into","into","into","into","into","next_scanline","origin","outbound_scanline","prior_frame","query_yuva_info","result_to_string","scanline_order","skip_scanlines","start_incremental_decode","start_scanline_decode","subset","swaps_width_height","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","valid_subset","wrap","zero_initialized","ColorFilter","color_filters","composed","filter_color","filter_color4f","fmt","from_argb","from_table","high_contrast","is_alpha_unchanged","luma","new_lighting","overdraw","to_a_color_matrix","to_a_color_mode","blend","blend_with_color_space","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","lighting","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","table","table_argb","blend","blend_with_color_space","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","lighting","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","table","table_argb","ColorMatrix","default","eq","fmt","get_row_major","new","post_concat","post_translate","pre_concat","rgb_to_yuv","set_concat","set_identity","set_row_major","set_saturation","set_scale","yuv_to_rgb","new_lighting","BLACK","BLUE","CYAN","DARK_GREY","GREEN","GREY","LIGHT_GREY","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","ContourMeasure","ContourMeasureIter","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","get_matrix","hash","insert","intersection","intersects","into","is_all","is_closed","is_empty","length","new","next","not","partial_cmp","pos_tan","remove","reset","segment","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","new","new","new","Document","abort","begin_page","borrow","borrow_mut","canvas","close","end_page","fmt","from","into","page","pages","state","try_from","try_into","type_id","OnPage","Open","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Drawable","GPUDrawHandler","approximate_bytes_used","bounds","draw","draw_at","fmt","generation_id","gpu_draw_handler","notify_drawing_changed","snap_gpu_draw_handler","GPUDrawHandler","draw","fmt","bitmap","pixmap","Alias","AntiAlias","Edging","Font","SubpixelAntiAlias","borrow","borrow_mut","clone","clone_into","count_str","count_text","default","edging","eq","fmt","fmt","from","from_typeface","from_typeface_with_params","get_bounds","get_intercepts","get_path","get_pos","get_widths","get_widths_bounds","get_x_pos","hash","hinting","into","is_baseline_snap","is_embedded_bitmaps","is_embolden","is_force_auto_hinting","is_linear_metrics","is_subpixel","measure_str","measure_text","metrics","new","scale_x","set_baseline_snap","set_edging","set_embedded_bitmaps","set_embolden","set_force_auto_hinting","set_hinting","set_linear_metrics","set_scale_x","set_size","set_skew_x","set_subpixel","set_typeface","size","skew_x","spacing","str_to_glyphs","str_to_glyphs_vec","text_to_glyphs","text_to_glyphs_vec","to_owned","try_from","try_into","type_id","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyphs","with_size","FontArguments","Palette","VariationPosition","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collection_index","coordinates","default","drop","fmt","fmt","fmt","from","from","from","index","inner","inner_mut","into","into","into","new","overrides","palette","palette","set_collection_index","set_palette","set_variation_design_position","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","variation_design_position","variation_position","wrap","Override","borrow","borrow_mut","clone","clone_into","color","default","eq","fmt","from","index","inner","inner_mut","into","to_owned","try_from","try_into","type_id","unwrap","wrap","Coordinate","axis","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","inner","inner_mut","into","to_owned","try_from","try_into","type_id","unwrap","value","wrap","BOUNDS_INVALID","Flags","FontMetrics","STRIKEOUT_POSITION_IS_VALID","STRIKEOUT_THICKNESS_IS_VALID","UNDERLINE_POSITION_IS_VALID","UNDERLINE_THICKNESS_IS_VALID","all","ascent","avg_char_width","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","bottom","cap_height","clone","clone","clone_into","clone_into","cmp","complement","contains","default","default","descent","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bounds","hash","inner","inner_mut","insert","intersection","intersects","into","into","is_all","is_empty","leading","max_char_width","not","partial_cmp","remove","set","strikeout_position","strikeout_thickness","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","top","try_from","try_from","try_into","try_into","type_id","type_id","underline_position","underline_thickness","union","unwrap","wrap","x_height","x_max","x_min","VariationAxis","def","max","min","tag","variation","Axis","borrow","borrow_mut","clone","clone_into","def","default","eq","fmt","from","inner","inner_mut","into","is_hidden","max","min","new","set_hidden","tag","to_owned","try_from","try_into","type_id","unwrap","wrap","BLACK","BOLD","CONDENSED","EXPANDED","EXTRA_BLACK","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","FontStyle","INVISIBLE","Italic","LIGHT","MEDIUM","NORMAL","NORMAL","Oblique","SEMI_BOLD","SEMI_CONDENSED","SEMI_EXPANDED","Slant","THIN","ULTRA_CONDENSED","ULTRA_EXPANDED","Upright","Weight","Width","bold","bold_italic","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","italic","new","normal","partial_cmp","partial_cmp","slant","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","weight","width","wrap","wrap","wrap","BackendAPI","BackendApi","BackendDrawableInfo","BackendFormat","BackendRenderTarget","BackendSurfaceMutableState","BackendTexture","BottomLeft","Budgeted","Context","ContextOptions","Dawn","Dawn","Direct3D","DirectContext","DirectContextId","DriverBugWorkarounds","FlushInfo","MAX_PLANES","Metal","Metal","MipMapped","Mipmapped","Mock","Mock","MutableTextureState","NO","No","No","No","No","No","No","OpenGL","OpenGL_GrBackend","Protected","RecordingContext","Renderable","ResourceCacheLimits","ResourceCacheUsage","SemaphoresSubmitted","SurfaceOrigin","TopLeft","Vulkan","Vulkan","YES","YUVABackendTextureInfo","YUVABackendTextures","Yes","Yes","Yes","Yes","Yes","Yes","abandon","abandoned","add_and_true_to_loop_condition","applyOverrides","as_direct_context","as_gl_format","as_gl_format_enum","as_mtl_format","as_vk_format","backend","backend","backend","backend","backend","backend","backend_format","backend_format","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_mask","check_async_work_completion","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_type_supported_as_image","color_type_supported_as_surface","compressed_backend_format","compressed_backend_format","context_options","default","default","default","default_backend_format","deref","deref_mut","destruct","dimensions","dimensions","disable_blend_equation_advanced","disable_discard_framebuffer","disable_dual_source_blending_support","disable_texture_storage","disallow_large_instanced_draw","emulate_abs_int_function","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","flush","flush_and_submit","flush_on_framebuffer_change","flush_submit_and_sync_cpu","flush_with_info","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_update_scissor_state_when_binding_fbo0","free_gpu_resources","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_vk","get_vk_drawable_info","gl","gl_clear_broken","gl_framebuffer_info","gl_texture_info","gl_texture_parameters_modified","has_mip_maps","has_mipmaps","hash","hash","hash","hash","hash","hash","hash","height","height","id","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","is_framebuffer_only","is_protected","is_protected","is_same_texture","is_valid","is_valid","is_valid","is_valid","label","max_fragment_uniform_vectors_32","max_msaa_sample_count_4","max_render_target_size","max_resource_bytes","max_resources","max_surface_sample_count_for_color_type","max_texture_size","metal_texture_info","metal_texture_info","mipmapped","mipmapped","mtl","new","new","new","new","new","new1","new_gl","new_gl","new_gl","new_gl","new_gl_with_label","new_metal","new_metal","new_metal","new_metal","new_metal_with_label","new_vk","new_vk","new_vulkan","new_vulkan","new_vulkan","new_vulkan","new_vulkan_with_label","new_vulkan_ycbcr","num_planes","num_planes","oomed","pack_parameters_workaround_with_pack_buffer","perform_deferred_cleanup","plane_format","plane_formats","precompile_shader","purge_unlocked_resources","queue_family_index","release_resources_and_abandon","remove_pow_with_constant_exponent","reset","reset_gl_texture_bindings","resource_bytes","resource_cache_limit","resource_cache_limits","resource_cache_purgeable_bytes","resource_cache_usage","resource_count","rewrite_do_while_loops","sample_count","set_backend_render_target_state","set_backend_render_target_state_and_return_previous","set_backend_texture_state","set_backend_texture_state_and_return_previous","set_mutable_state","set_mutable_state","set_resource_cache_limit","set_resource_cache_limits","set_vulkan_image_layout","set_vulkan_image_layout","stencil_bits","store_vk_pipeline_cache_data","submit","supports_distance_field_text","texture","texture_origin","texture_origin","textures","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_texture_2d","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbind_attachments_on_bound_render_fbo_delete","unfold_short_circuit_as_ternary_operation","unwrap","unwrap","unwrap","vk","vk_image_layout","vulkan_image_info","vulkan_image_info","width","width","wrap","wrap","wrap","yuv_color_space","yuva_info","yuva_info","BackendBinary","BackendSource","ContextOptions","Default","Enable","No","ShaderCacheStrategy","SkSL","Yes","allow_msaa_on_new_intel","allow_multiple_glyph_cache_textures","allow_path_mask_caching","always_use_text_storage_when_available","avoid_stencil_buffers","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_map_threshold","clone","clone","clone_into","clone_into","default","disable_coverage_counting_paths","disable_distance_field_paths","disable_driver_correctness_workarounds","disable_gpu_yuv_conversion","do_manual_mipmapping","driver_bug_workarounds","enable_experimental_hardware_tessellation","eq","eq","fmt","fmt","fmt","from","from","from","glyph_cache_texture_maximum_bytes","glyphs_as_paths_font_size","hash","hash","inner","inner_mut","internal_multisample_count","into","into","into","max_cached_vulkan_secondary_command_buffers","max_texture_size_override","min_distance_field_font_size","new","prefer_external_images_over_es3","reduce_ops_task_splitting","reduced_shader_variations","runtime_program_cache_size","shader_cache_strategy","skip_gl_error_checks","suppress_mipmap_support","suppress_prints","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","use_draw_instead_of_clear","wrap","ALPHA8","BGRA8","BLEND","BackendState","COMPRESSED_ETC1_RGB8","COMPRESSED_RGB8_BC1","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_BC1","DEPTH24_STENCIL8","Enum","Extensions","FIXED_FUNCTION","Format","FramebufferInfo","GL","GLES","Interface","LUMINANCE16F","LUMINANCE8","LUMINANCE8_ALPHA8","Last","LastColorFormat","MISC","MSAA_ENABLE","None","PIXEL_STORE","PROGRAM","R16","R16F","R8","RENDER_TARGET","RG16","RG16F","RG8","RGB10_A2","RGB565","RGB8","RGBA16","RGBA16F","RGBA4","RGBA8","RGBX8","SRGB8_ALPHA8","STENCIL","STENCIL_INDEX16","STENCIL_INDEX8","Standard","SurfaceInfo","TEXTURE_BINDING","TextureInfo","UInt","Unknown","VERTEX","VIEW","WebGL","add","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","contains","default","default","default","difference","empty","eq","eq","eq","eq","eq","eq","extend","extensions","extensions_mut","fboid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_fboid","from_iter","from_target_and_id","has","has_extension","hash","hash","hash","id","inner","inner","inner","inner_mut","inner_mut","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","is_all","is_empty","is_initialized","level_count","new_load_with","new_load_with_cstr","new_native","not","partial_cmp","protected","remove","remove","reset","sample_count","set","sub","sub_assign","symmetric_difference","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","unwrap","unwrap","validate","wrap","wrap","wrap","BackendContext","Handle","PixelFormat","StorageMode","SurfaceInfo","TextureInfo","TextureUsage","borrow","borrow_mut","clone","clone_into","default","default","eq","fmt","fmt","fmt","format","from","inner","inner_mut","into","level_count","new","new","protected","sample_count","storage_mode","texture","to_owned","try_from","try_into","type_id","unwrap","usage","wrap","A1R5G5B5_UNORM_PACK16","A2B10G10R10_SINT_PACK32","A2B10G10R10_SNORM_PACK32","A2B10G10R10_SSCALED_PACK32","A2B10G10R10_UINT_PACK32","A2B10G10R10_UNORM_PACK32","A2B10G10R10_USCALED_PACK32","A2R10G10B10_SINT_PACK32","A2R10G10B10_SNORM_PACK32","A2R10G10B10_SSCALED_PACK32","A2R10G10B10_UINT_PACK32","A2R10G10B10_UNORM_PACK32","A2R10G10B10_USCALED_PACK32","A4B4G4R4_UNORM_PACK16_EXT","A4R4G4B4_UNORM_PACK16_EXT","A8B8G8R8_SINT_PACK32","A8B8G8R8_SNORM_PACK32","A8B8G8R8_SRGB_PACK32","A8B8G8R8_SSCALED_PACK32","A8B8G8R8_UINT_PACK32","A8B8G8R8_UNORM_PACK32","A8B8G8R8_USCALED_PACK32","ASTC_10x10_SFLOAT_BLOCK_EXT","ASTC_10x10_SRGB_BLOCK","ASTC_10x10_UNORM_BLOCK","ASTC_10x5_SFLOAT_BLOCK_EXT","ASTC_10x5_SRGB_BLOCK","ASTC_10x5_UNORM_BLOCK","ASTC_10x6_SFLOAT_BLOCK_EXT","ASTC_10x6_SRGB_BLOCK","ASTC_10x6_UNORM_BLOCK","ASTC_10x8_SFLOAT_BLOCK_EXT","ASTC_10x8_SRGB_BLOCK","ASTC_10x8_UNORM_BLOCK","ASTC_12x10_SFLOAT_BLOCK_EXT","ASTC_12x10_SRGB_BLOCK","ASTC_12x10_UNORM_BLOCK","ASTC_12x12_SFLOAT_BLOCK_EXT","ASTC_12x12_SRGB_BLOCK","ASTC_12x12_UNORM_BLOCK","ASTC_4x4_SFLOAT_BLOCK_EXT","ASTC_4x4_SRGB_BLOCK","ASTC_4x4_UNORM_BLOCK","ASTC_5x4_SFLOAT_BLOCK_EXT","ASTC_5x4_SRGB_BLOCK","ASTC_5x4_UNORM_BLOCK","ASTC_5x5_SFLOAT_BLOCK_EXT","ASTC_5x5_SRGB_BLOCK","ASTC_5x5_UNORM_BLOCK","ASTC_6x5_SFLOAT_BLOCK_EXT","ASTC_6x5_SRGB_BLOCK","ASTC_6x5_UNORM_BLOCK","ASTC_6x6_SFLOAT_BLOCK_EXT","ASTC_6x6_SRGB_BLOCK","ASTC_6x6_UNORM_BLOCK","ASTC_8x5_SFLOAT_BLOCK_EXT","ASTC_8x5_SRGB_BLOCK","ASTC_8x5_UNORM_BLOCK","ASTC_8x6_SFLOAT_BLOCK_EXT","ASTC_8x6_SRGB_BLOCK","ASTC_8x6_UNORM_BLOCK","ASTC_8x8_SFLOAT_BLOCK_EXT","ASTC_8x8_SRGB_BLOCK","ASTC_8x8_UNORM_BLOCK","ATTACHMENT_OPTIMAL_KHR","Alloc","AllocFlag","B10G11R11_UFLOAT_PACK32","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16","B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16","B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR","B16G16R16G16_422_UNORM","B16G16R16G16_422_UNORM_KHR","B4G4R4A4_UNORM_PACK16","B5G5R5A1_UNORM_PACK16","B5G6R5_UNORM_PACK16","B8G8R8A8_SINT","B8G8R8A8_SNORM","B8G8R8A8_SRGB","B8G8R8A8_SSCALED","B8G8R8A8_UINT","B8G8R8A8_UNORM","B8G8R8A8_USCALED","B8G8R8G8_422_UNORM","B8G8R8G8_422_UNORM_KHR","B8G8R8_SINT","B8G8R8_SNORM","B8G8R8_SRGB","B8G8R8_SSCALED","B8G8R8_UINT","B8G8R8_UNORM","B8G8R8_USCALED","BC1_RGBA_SRGB_BLOCK","BC1_RGBA_UNORM_BLOCK","BC1_RGB_SRGB_BLOCK","BC1_RGB_UNORM_BLOCK","BC2_SRGB_BLOCK","BC2_UNORM_BLOCK","BC3_SRGB_BLOCK","BC3_UNORM_BLOCK","BC4_SNORM_BLOCK","BC4_UNORM_BLOCK","BC5_SNORM_BLOCK","BC5_UNORM_BLOCK","BC6H_SFLOAT_BLOCK","BC6H_UFLOAT_BLOCK","BC7_SRGB_BLOCK","BC7_UNORM_BLOCK","BackendContext","Bool32","Buffer","COLOR_ATTACHMENT_OPTIMAL","CONCURRENT","COSITED_EVEN","COSITED_EVEN_KHR","CUBIC_EXT","CUBIC_IMG","ChromaLocation","CommandBuffer","D16_UNORM","D16_UNORM_S8_UINT","D24_UNORM_S8_UINT","D32_SFLOAT","D32_SFLOAT_S8_UINT","DEPTH_ATTACHMENT_OPTIMAL","DEPTH_ATTACHMENT_OPTIMAL_KHR","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL","DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_OPTIMAL","DEPTH_READ_ONLY_OPTIMAL_KHR","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR","DEPTH_STENCIL_ATTACHMENT_OPTIMAL","DEPTH_STENCIL_READ_ONLY_OPTIMAL","DRM_FORMAT_MODIFIER_EXT","DUAL_SRC_BLEND","Device","Device","DeviceMemory","DeviceSize","DrawableInfo","E5B9G9R9_UFLOAT_PACK32","EAC_R11G11_SNORM_BLOCK","EAC_R11G11_UNORM_BLOCK","EAC_R11_SNORM_BLOCK","EAC_R11_UNORM_BLOCK","ETC2_R8G8B8A1_SRGB_BLOCK","ETC2_R8G8B8A1_UNORM_BLOCK","ETC2_R8G8B8A8_SRGB_BLOCK","ETC2_R8G8B8A8_UNORM_BLOCK","ETC2_R8G8B8_SRGB_BLOCK","ETC2_R8G8B8_UNORM_BLOCK","EXCLUSIVE","EXT_DEBUG_REPORT","ExtensionFlags","Extent2D","FRAGMENT_DENSITY_MAP_OPTIMAL_EXT","FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR","FeatureFlags","Filter","Flags","Format","FormatFeatureFlags","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16","G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16","G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16","G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16","G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16","G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16","G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR","G16B16G16R16_422_UNORM","G16B16G16R16_422_UNORM_KHR","G16_B16R16_2PLANE_420_UNORM","G16_B16R16_2PLANE_420_UNORM_KHR","G16_B16R16_2PLANE_422_UNORM","G16_B16R16_2PLANE_422_UNORM_KHR","G16_B16R16_2PLANE_444_UNORM_EXT","G16_B16_R16_3PLANE_420_UNORM","G16_B16_R16_3PLANE_420_UNORM_KHR","G16_B16_R16_3PLANE_422_UNORM","G16_B16_R16_3PLANE_422_UNORM_KHR","G16_B16_R16_3PLANE_444_UNORM","G16_B16_R16_3PLANE_444_UNORM_KHR","G8B8G8R8_422_UNORM","G8B8G8R8_422_UNORM_KHR","G8_B8R8_2PLANE_420_UNORM","G8_B8R8_2PLANE_420_UNORM_KHR","G8_B8R8_2PLANE_422_UNORM","G8_B8R8_2PLANE_422_UNORM_KHR","G8_B8R8_2PLANE_444_UNORM_EXT","G8_B8_R8_3PLANE_420_UNORM","G8_B8_R8_3PLANE_420_UNORM_KHR","G8_B8_R8_3PLANE_422_UNORM","G8_B8_R8_3PLANE_422_UNORM_KHR","G8_B8_R8_3PLANE_444_UNORM","G8_B8_R8_3PLANE_444_UNORM_KHR","GENERAL","GEOMETRY_SHADER","GetProc","GetProcOf","GetProcResult","GraphicsBackendMemory","ITU_FULL","ITU_FULL_KHR","ITU_NARROW","ITU_NARROW_KHR","Image","ImageInfo","ImageLayout","ImageTiling","ImageUsageFlags","Instance","Instance","KHR_ANDROID_SURFACE","KHR_SURFACE","KHR_SWAPCHAIN","KHR_WIN32_SURFACE","KHR_XCB_SURFACE","LAZILY_ALLOCATED","LINEAR","LINEAR","MAPPABLE","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MAX_ENUM","MIDPOINT","MIDPOINT_KHR","NEAREST","NONCOHERENT","NULL_HANDLE","NV_GLSL_SHADER","NullHandle","OPTIMAL","Offset2D","PREINITIALIZED","PRESENT_SRC_KHR","PVRTC1_2BPP_SRGB_BLOCK_IMG","PVRTC1_2BPP_UNORM_BLOCK_IMG","PVRTC1_4BPP_SRGB_BLOCK_IMG","PVRTC1_4BPP_UNORM_BLOCK_IMG","PVRTC2_2BPP_SRGB_BLOCK_IMG","PVRTC2_2BPP_UNORM_BLOCK_IMG","PVRTC2_4BPP_SRGB_BLOCK_IMG","PVRTC2_4BPP_UNORM_BLOCK_IMG","PhysicalDevice","PhysicalDeviceFeatures","PhysicalDeviceFeatures2","QUEUE_FAMILY_IGNORED","Queue","R10X6G10X6B10X6A10X6_UNORM_4PACK16","R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR","R10X6G10X6_UNORM_2PACK16","R10X6G10X6_UNORM_2PACK16_KHR","R10X6_UNORM_PACK16","R10X6_UNORM_PACK16_KHR","R12X4G12X4B12X4A12X4_UNORM_4PACK16","R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR","R12X4G12X4_UNORM_2PACK16","R12X4G12X4_UNORM_2PACK16_KHR","R12X4_UNORM_PACK16","R12X4_UNORM_PACK16_KHR","R16G16B16A16_SFLOAT","R16G16B16A16_SINT","R16G16B16A16_SNORM","R16G16B16A16_SSCALED","R16G16B16A16_UINT","R16G16B16A16_UNORM","R16G16B16A16_USCALED","R16G16B16_SFLOAT","R16G16B16_SINT","R16G16B16_SNORM","R16G16B16_SSCALED","R16G16B16_UINT","R16G16B16_UNORM","R16G16B16_USCALED","R16G16_SFLOAT","R16G16_SINT","R16G16_SNORM","R16G16_SSCALED","R16G16_UINT","R16G16_UNORM","R16G16_USCALED","R16_SFLOAT","R16_SINT","R16_SNORM","R16_SSCALED","R16_UINT","R16_UNORM","R16_USCALED","R32G32B32A32_SFLOAT","R32G32B32A32_SINT","R32G32B32A32_UINT","R32G32B32_SFLOAT","R32G32B32_SINT","R32G32B32_UINT","R32G32_SFLOAT","R32G32_SINT","R32G32_UINT","R32_SFLOAT","R32_SINT","R32_UINT","R4G4B4A4_UNORM_PACK16","R4G4_UNORM_PACK8","R5G5B5A1_UNORM_PACK16","R5G6B5_UNORM_PACK16","R64G64B64A64_SFLOAT","R64G64B64A64_SINT","R64G64B64A64_UINT","R64G64B64_SFLOAT","R64G64B64_SINT","R64G64B64_UINT","R64G64_SFLOAT","R64G64_SINT","R64G64_UINT","R64_SFLOAT","R64_SINT","R64_UINT","R8G8B8A8_SINT","R8G8B8A8_SNORM","R8G8B8A8_SRGB","R8G8B8A8_SSCALED","R8G8B8A8_UINT","R8G8B8A8_UNORM","R8G8B8A8_USCALED","R8G8B8_SINT","R8G8B8_SNORM","R8G8B8_SRGB","R8G8B8_SSCALED","R8G8B8_UINT","R8G8B8_UNORM","R8G8B8_USCALED","R8G8_SINT","R8G8_SNORM","R8G8_SRGB","R8G8_SSCALED","R8G8_UINT","R8G8_UNORM","R8G8_USCALED","R8_SINT","R8_SNORM","R8_SRGB","R8_SSCALED","R8_UINT","R8_UNORM","R8_USCALED","READ_ONLY_OPTIMAL_KHR","RGB_IDENTITY","RGB_IDENTITY_KHR","Rect2D","RenderPass","S8_UINT","SAMPLE_RATE_SHADING","SHADER_READ_ONLY_OPTIMAL","SHADING_RATE_OPTIMAL_NV","SHARED_PRESENT_KHR","STENCIL_ATTACHMENT_OPTIMAL","STENCIL_ATTACHMENT_OPTIMAL_KHR","STENCIL_READ_ONLY_OPTIMAL","STENCIL_READ_ONLY_OPTIMAL_KHR","SamplerYcbcrModelConversion","SamplerYcbcrRange","SharingMode","SurfaceInfo","TRANSFER_DST_OPTIMAL","TRANSFER_SRC_OPTIMAL","UNDEFINED","UNDEFINED","Version","X8_D24_UNORM_PACK32","YCBCR_2020","YCBCR_2020_KHR","YCBCR_601","YCBCR_601_KHR","YCBCR_709","YCBCR_709_KHR","YCBCR_IDENTITY","YCBCR_IDENTITY_KHR","YcbcrConversionInfo","_bindgen_opaque_blob","_bindgen_opaque_blob","all","all","all","alloc","backend_memory","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chroma_filter","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","color_attachment_index","compatible_render_pass","complement","complement","complement","contains","contains","contains","current_queue_family","default","default","default","default","default","deref","difference","difference","difference","draw_bounds","drop","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extent","external_format","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_explicit_reconstruction","format","format","format","format","format_features","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_device_memory","from_info","from_info_with_queue_index","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","image","image_tiling","image_usage_flags","image_usage_flags","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_valid","layout","level_count","level_count","major","memory","minor","name","new","new","new","new","new_with_extensions","new_with_format","not","not","not","offset","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","patch","protected","protected","remove","remove","remove","sample_count","sample_count","secondary_command_buffer","set","set","set","set_max_api_version","set_protected_context","sharing_mode","sharing_mode","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","tiling","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","width","wrap","wrap","wrap","wrap","wrap","wrap","wrap","x","x_chroma_offset","y","y_chroma_offset","ycbcr_conversion_info","ycbcr_conversion_info","ycbcr_model","ycbcr_range","Colors","ColorsInSpace","Flags","GradientShaderColors","INTERPOLATE_COLORS_IN_PREMUL","Interpolation","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","color_space","complement","contains","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","hue_method","in_premul","inner","inner_mut","insert","interpolation","intersection","intersects","into","into","into","is_all","is_empty","is_empty","len","linear","linear_with_interpolation","not","partial_cmp","radial","radial_with_interpolation","remove","set","sub","sub_assign","sweep","sweep_with_interpolation","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","two_point_conical","two_point_conical_with_interpolation","type_id","type_id","type_id","union","unwrap","wrap","ColorSpace","HueMethod","InPremul","allow_jit","font_cache_count_limit","font_cache_count_used","font_cache_limit","font_cache_used","init","purge_all_caches","purge_font_cache","purge_resource_cache","resource_cache_single_allocation_byte_limit","resource_cache_total_bytes_limit","resource_cache_total_bytes_used","set_flags","set_font_cache_count_limit","set_font_cache_limit","set_resource_cache_single_allocation_byte_limit","set_resource_cache_total_bytes_limit","InvertBrightness","InvertLightness","InvertStyle","Last","NoInvert","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id","HighContrastConfig","borrow","borrow_mut","clone","clone_into","contrast","default","eq","fmt","from","grayscale","high_contrast_config","inner","inner_mut","into","invert_style","is_valid","new","new","to_owned","try_from","try_into","type_id","unwrap","wrap","InvertBrightness","InvertLightness","InvertStyle","NoInvert","init","Allow","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BitDepth","COUNT","CachingHint","CompressionType","CubicResampler","Disallow","ETC1","ETC2_RGB8_UNORM","F16","Image","Last","None","U8","alpha_type","b","backend_texture","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","c","catmull_rom","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color_space","color_type","decode_to_raster","dimensions","encode_to_data","encode_to_data_with_quality","encoded_data","eq","eq","eq","eq","flush","flush_and_submit","flush_with_info","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_adopted_texture","from_bitmap","from_compressed","from_encoded","from_encoded_with_alpha_type","from_generator","from_nv12_textures_copy","from_picture","from_picture_with_props","from_pixmap_cross_context","from_raster_data","from_texture","from_yuva_pixmaps","from_yuva_textures","has_mipmaps","hash","hash","hash","height","image_info","inner","inner_mut","into","into","into","into","is_alpha_only","is_lazy_generated","is_opaque","is_texture_backed","is_valid","mitchell","new_color_space","new_color_space_with_context","new_cross_context_from_pixmap","new_non_texture_image","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_subset","new_subset_with_context","new_texture_from_compressed","new_texture_image","new_texture_image_budgeted","new_with_filter","peek_pixels","read_pixels","read_pixels_to_pixmap","read_pixels_to_pixmap_with_context","read_pixels_with_context","reinterpret_color_space","scale_pixels","texture_size","to_non_texture_image","to_owned","to_owned","to_owned","to_owned","to_raster_image","to_raw_shader","to_shader","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_id","unwrap","width","with_default_mipmaps","wrap","Forward","ImageFilter","MapDirection","Reverse","alpha_threshold","arithmetic","blur","borrow","borrow_mut","can_compute_fast_bounds","clone","clone_into","color_filter","color_filter_node","compose","compute_fast_bounds","count_inputs","dilate","displacement_map_effect","distant_lit_diffuse_lighting","distant_lit_specular_lighting","eq","erode","filter_bounds","fmt","fmt","from","from_picture","get_input","hash","input","inputs","into","magnifier","matrix_convolution","merge","offset","point_lit_diffuse_lighting","point_lit_specular_lighting","spot_lit_diffuse_lighting","spot_lit_specular_lighting","tile","to_a_color_filter","to_owned","try_from","try_into","type_id","with_local_matrix","ArithmeticFPInputs","CropRect","Dither","NO_CROP_RECT","No","Yes","alpha_threshold","arithmetic","blend","blur","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_filter","compose","default","dilate","displacement_map","distant_lit_diffuse","distant_lit_specular","drop_shadow","drop_shadow_only","enforce_pm_color","eq","eq","eq","erode","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","image","inner","inner_mut","into","into","into","k","magnifier","matrix_convolution","matrix_transform","merge","new","offset","picture","point_lit_diffuse","point_lit_specular","rect","shader","shader_with_dither","spot_lit_diffuse","spot_lit_specular","tile","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","wrap","new","new","AFFINE","AffineMember","ApplyPerspectiveClip","Center","End","Fill","IDENTITY","IDENTITY","Matrix","Member","No","PERSPECTIVE","Persp0","Persp1","Persp2","SCALE","ScaleToFit","ScaleX","ScaleX","ScaleY","ScaleY","SkewX","SkewX","SkewY","SkewY","Start","TRANSLATE","TransX","TransX","TransY","TransY","TypeMask","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cheap_equal_to","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","concat","contains","decompose_scale","default","difference","dirty_matrix_type_cache","dump","empty","eq","eq","eq","eq","eq","eq","extend","fixed_step_in_x","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_affine","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_poly_to_poly","from_rect_to_rect","get_9","get_type","has_perspective","hash","hash","hash","i","index","index","index","index_mut","index_mut","index_mut","inner","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","invalid_matrix","invert","is_all","is_empty","is_finite","is_fixed_step_in_x","is_identity","is_scale_translate","is_similarity","is_translate","map_homogeneous_points","map_homogeneous_points_2d","map_origin","map_point","map_points","map_points_inplace","map_radius","map_rect","map_rect_scale_translate","map_rect_to_quad","map_rect_with_perspective_clip","map_vector","map_vectors","map_vectors_inplace","map_xy","max_scale","min_max_scales","min_scale","mul","new_all","new_identity","new_scale","new_trans","normalize_perspective","not","partial_cmp","persp_x","persp_y","post_concat","post_idiv","post_rotate","post_scale","post_skew","post_translate","pre_concat","pre_rotate","pre_scale","pre_skew","pre_translate","preserves_axis_alignment","preserves_right_angles","rc","rect_stays_rect","rect_to_rect","remove","reset","rotate_deg","rotate_deg_pivot","rotate_rad","scale","scale_x","scale_y","set","set_9","set_affine","set_affine_identity","set_all","set_concat","set_identity","set_persp_x","set_persp_y","set_poly_to_poly","set_rect_to_rect","set_rotate","set_rsxform","set_scale","set_scale_translate","set_scale_x","set_scale_y","set_sin_cos","set_skew","set_skew_x","set_skew_y","set_translate","set_translate_x","set_translate_y","skew","skew_x","skew_y","sub","sub_assign","symmetric_difference","to_affine","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","translate","translate_x","translate_y","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","wrap","new","new_translate","new","DOT22","HLG","LINEAR","PQ","REC2020","SRGB","NUM_COLORS","new","Bevel","Butt","Cap","Fill","Join","Miter","Paint","Round","Round","Square","Stroke","StrokeAndFill","Style","alpha","alpha_f","as_blend_mode","blend_mode","blend_mode_or","blender","color","color4f","color_filter","fmt","image_filter","is_anti_alias","is_dither","is_src_over","mask_filter","new","nothing_to_draw","path_effect","reset","set_alpha","set_alpha_f","set_anti_alias","set_argb","set_blend_mode","set_blender","set_color","set_color4f","set_color_filter","set_dither","set_image_filter","set_mask_filter","set_path_effect","set_shader","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_width","set_style","shader","stroke_cap","stroke_join","stroke_miter","stroke_width","style","AddPathMode","Append","ArcSize","CCW","CONIC","CUBIC","CW","Close","Conic","Cubic","Direction","Done","EvenOdd","Extend","FillType","InverseEvenOdd","InverseWinding","Iter","LINE","Large","Line","MAX_POINTS","Move","Path","QUAD","Quad","RawIter","SegmentMask","Small","Verb","Winding","add_arc","add_circle","add_oval","add_path","add_path_matrix","add_poly","add_rect","add_round_rect","add_rrect","all","approximate_bytes_used","arc_to","arc_to_rotated","arc_to_tangent","as_winding","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","circle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","cmp","complement","compute_tight_bounds","conic_to","conic_weight","conic_weight","conservatively_contains_rect","contains","contains","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","count_points","count_verbs","cubic_to","default","default","deserialize","difference","drop","drop","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","empty","eq","eq","eq","eq","extend","fill_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_str","from_svg","generation_id","get_point","get_points","get_verbs","hash","hash","hash","hash","inc_reserve","insert","interpolate","intersection","intersects","into","into","into","into","into","into","into_iter","into_iter","is_all","is_close_line","is_closed_contour","is_convex","is_cubic_degenerate","is_empty","is_empty","is_finite","is_interpolatable","is_inverse_fill_type","is_last_contour_closed","is_line","is_line_degenerate","is_oval","is_quad_degenerate","is_rect","is_rrect","is_valid","is_volatile","last_pt","line","line_to","make_scale","make_transform","move_to","new","new","new","new_from","next","next","not","offset","op","oval","oval_with_start_index","partial_cmp","peek","points","polygon","quad_to","r_arc_to_rotated","r_conic_to","r_cubic_to","r_line_to","r_move_to","r_quad_to","rect","remove","reset","reverse_add_path","rewind","rrect","rrect_with_start_index","segment_masks","serialize","set","set_fill_type","set_is_volatile","set_last_pt","set_path","set_path","shrink_to_fit","simplify","sub","sub_assign","swap","symmetric_difference","tight_bounds","to_owned","to_owned","to_owned","to_owned","to_svg","to_svg_with_encoding","toggle","toggle_inverse_fill_type","transform","transform_with_perspective_clip","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","update_bounds_cache","with_offset","with_transform","with_transform_with_perspective_clip","LastEnum","Morph","Rotate","Style","Translate","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","new","DashInfo","PathEffect","as_a_dash","borrow","borrow_mut","clone","clone_into","compose","corner_path","dash","discrete","eq","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","fmt","fmt","from","intervals","into","line_2d","matrix","matrix_translate","merge","needs_ctm","path_1d","path_2d","phase","stroke","sum","to_owned","trim","try_from","try_into","type_id","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","PathMeasure","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","default","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","hash","insert","intersection","intersects","into","is_all","is_closed","is_empty","length","matrix","new","next_contour","not","partial_cmp","pos_tan","remove","segment","set","set_path","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","CCW","CW","Close","Conic","Cubic","EvenOdd","InverseEvenOdd","InverseWinding","Line","Move","PathDirection","PathFillType","PathSegmentMask","PathVerb","Quad","Winding","fill_path_with_paint","AttributeList","Metadata","StructureElementNode","alt","append_child","append_float","append_float_array","append_int","attributes","attributes_mut","author","borrow","borrow","borrow_mut","borrow_mut","child_vector","creation","creator","default","default","default","drop","encoding_quality","fmt","fmt","fmt","from","from","into","into","keywords","lang","modified","new","new_document","node_id","pdfa","producer","raster_dpi","set_alt","set_child_vector","set_lang","set_node_id","set_type_string","subject","title","try_from","try_from","try_into","try_into","type_id","type_id","type_string","fractal_noise","turbulence","PictureRecorder","begin_recording","finish_recording_as_drawable","finish_recording_as_picture","fmt","new","recording_canvas","Cliperator","Combine","Difference","Intersect","Intersects","Iterator","LastOp","Region","RegionOp","Replace","ReverseDifference","Spanerator","Union","XOR","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine","compute_region_complexity","contains","contains","contains","contains_point","contains_rect","contains_region","difference","difference","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_rect","get_boundary_path","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","intersect","intersect","intersects","intersects","intersects","intersects_rect","intersects_region","into","into","into","into","into_iter","into_iter","into_iter","is_complex","is_done","is_done","is_empty","is_rect","new","new","new","new","new_empty","next","next","next","next","next","op_rect","op_rect_region","op_region","op_region_rect","quick_contains","quick_reject","quick_reject","quick_reject_rect","quick_reject_region","read_from_memory","rect","rect","replace","replace","reset","reverse_difference","reverse_difference","rewind","rgn","set","set_empty","set_path","set_rect","set_rects","set_region","swap","to_owned","to_owned","to_owned","to_owned","translate","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","unwrap","unwrap","unwrap","wrap","wrap","wrap","write_to_memory","xor","xor","Complex","Corner","Empty","LastType","LowerLeft","LowerRight","NinePatch","Oval","RRect","Rect","SIZE_IN_MEMORY","Simple","Type","UpperLeft","UpperRight","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","contains","default","dump","dump_hex","dump_to_string","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_type","hash","hash","height","inner","inner_mut","inset","into","into","into","is_complex","is_empty","is_nine_patch","is_oval","is_rect","is_simple","is_valid","new","new_empty","new_nine_patch","new_oval","new_rect","new_rect_radii","new_rect_xy","offset","outset","radii","read_from_memory","rect","set_empty","set_nine_patch","set_oval","set_rect","set_rect_radii","set_rect_xy","simple_radii","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","width","with_inset","with_offset","with_outset","wrap","write_to_memory","Blender","Blender","Child","ChildPtr","ChildType","ColorFilter","ColorFilter","Options","RuntimeEffect","Shader","Shader","Uniform","Variable","Varying","allow_blender","allow_color_filter","allow_shader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone_into","clone_into","clone_into","count","default","eq","eq","find_child","find_input","find_uniform","flags","fmt","fmt","fmt","fmt","fmt","fmt","force_unoptimized","from","from","from","from","from","from","hash","index","inner","inner_mut","input_size","inputs","into","into","into","is_array","is_color","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_image","make_shader","name","name","offset","size_in_bytes","source","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","uniform","uniform_size","uniforms","unwrap","wrap","ARRAY","COLOR","FRAGMENT","Flags","Float","Float2","Float2x2","Float3","Float3x3","Float4","Float4x4","HALF_PRECISION","Int","Int2","Int3","Int4","Type","VERTEX","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","CubicResampler","FilterMode","FilterOptions","Linear","Linear","MipmapMode","Nearest","Nearest","None","SamplingMode","SamplingOptions","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","cubic","default","eq","eq","filter","fmt","fmt","from","from","from","from","from","from_aniso","hash","inner","inner_mut","into","into","is_aniso","max_aniso","mipmap","mipmap","new","sampling","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","use_cubic","wrap","GradientInfo","Shader","borrow","borrow_mut","clone","clone_into","color_count","color_offsets","colors","default","eq","fmt","fmt","fractal_perlin_noise","from","gradient_flags","image","into","is_a_image","is_opaque","linear_gradient","linear_gradient_with_interpolation","radial_gradient","radial_gradient_with_interpolation","shaders","sweep_gradient","sweep_gradient_with_interpolation","tile_mode","to_owned","try_from","try_into","turbulence_perlin_noise","two_point_conical_gradient","two_point_conical_gradient_with_interpolation","type_id","with_color_filter","with_local_matrix","blend","color","color_in_space","empty","new","blend","color","color_in_space","empty","AsNativeRunHandler","AsRunHandler","BiDiRunIterator","Feature","FontRunIterator","LanguageRunIterator","RunHandler","RunHandler","RunIterator","ScriptRunIterator","Shaper","TextBlobBuilderRunHandler","as_native_run_handler","as_native_run_handler","as_run_handler","as_run_handler","at_end","begin_line","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit_line","commit_run_buffer","commit_run_info","consume","current_font","current_language","current_level","current_script","default","end","end_of_current_run","end_point","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","icu","into","into","make_blob","new","new","new_bidi_run_iterator","new_core_text","new_font_mgr_run_iterator","new_hb_icu_script_run_iterator","new_icu_bidi_run_iterator","new_primitive","new_script_run_iterator","new_shape_then_wrap","new_shaper_driven_wrapper","new_std_language_run_iterator","new_trivial_bidi_run_iterator","new_trivial_font_run_iterator","new_trivial_language_run_iterator","new_trivial_script_run_iterator","purge_caches","purge_harf_buzz_cache","run_buffer","run_handler","run_info","shape","shape_text_blob","shape_with_iterators","shape_with_iterators_and_features","start","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","init","Buffer","RunHandler","RunInfo","advance","begin_line","bidi_level","borrow","borrow","borrow_mut","borrow_mut","clusters","commit_line","commit_run_buffer","commit_run_info","fmt","fmt","font","from","from","glyph_count","glyphs","into","into","new","offsets","point","positions","run_buffer","run_info","try_from","try_from","try_into","try_into","type_id","type_id","utf8_range","new","new","Fill","Fill","Hairline","Hairline","InitStyle","Stroke","StrokeAndFill","StrokeRec","Style","apply_to_paint","apply_to_path","apply_to_path_inplace","borrow","borrow","borrow_mut","borrow_mut","cap","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","from_paint","has_equal_effect","hash","hash","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","into","into","is_fill_style","is_hairline_style","join","miter","need_to_apply","new","new_fill","new_hairline","res_scale","set_fill_style","set_hairline_style","set_res_scale","set_stroke_params","set_stroke_style","style","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","BackendHandleAccess","BackendSurfaceAccess","ContentChangeMode","Discard","DiscardWrite","FlushRead","FlushWrite","NoAccess","Present","Retain","Surface","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canvas","characterize","clone","clone","clone","clone_into","clone_into","clone_into","draw","draw_display_list","draw_display_list_with_offset","eq","eq","eq","flush","flush_and_submit","flush_submit_and_sync_cpu","flush_with_access_info","flush_with_mutable_state","fmt","fmt","fmt","fmt","from","from","from","from_backend_render_target","from_backend_texture","from_ca_metal_layer","from_ca_mtk_view","from_mtk_view","generation_id","get_backend_render_target","get_backend_texture","hash","hash","hash","height","image_info","image_snapshot","image_snapshot_with_bounds","into","into","into","is_compatible","new_null","new_raster","new_raster_direct","new_raster_n32_premul","new_render_target","new_render_target_with_characterization","new_surface","new_surface_with_dimensions","notify_content_will_change","peek_pixels","props","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","recording_context","replace_backend_texture","replace_backend_texture_with_mode","resolve_msaa","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","write_pixels_from_bitmap","write_pixels_from_pixmap","Canvas","canvas","CONVERT_TEXT_TO_PATHS","Canvas","Flags","NO_PRETTY_XML","RELATIVE_PATH_ENCODING","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","default","deref","deref_mut","difference","drop","empty","end","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","new","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","from_argb","from_table","ALL","ALL_TEXT_DECORATIONS","AboveBaseline","Affinity","All","AllAttributes","Alphabetic","Background","Baseline","BelowBaseline","Block","BlockIndex","BlockRange","Bottom","Center","Dashed","Decoration","Decorations","DisableAll","DisableFirstAscent","DisableLastDescent","Dotted","Double","Downstream","EMPTY_BLOCK","EMPTY_BLOCKS","EMPTY_INDEX","EMPTY_RANGE","EMPTY_TEXT","End","Font","FontArguments","FontCollection","FontFamilies","FontFeature","Foreground","Gaps","Ideographic","IncludeLineSpacingBottom","IncludeLineSpacingMiddle","IncludeLineSpacingTop","Justify","LINE_THROUGH","LTR","Left","LetterSpacing","LineMetrics","LineMetricsVector","Max","Max","Middle","NO_DECORATION","None","OVERLINE","Paragraph","ParagraphBuilder","ParagraphCache","ParagraphStyle","Placeholder","PlaceholderAlignment","PlaceholderStyle","PositionWithAffinity","RTL","RangeExtensions","RectHeightStyle","RectWidthStyle","Right","Shadow","Solid","Start","Strut","StrutStyle","StyleMetrics","StyleType","TextAlign","TextBaseline","TextBox","TextBoxes","TextDecoration","TextDecorationMode","TextDecorationStyle","TextDirection","TextHeightBehavior","TextIndex","TextRange","TextShadow","TextStyle","Through","Tight","Tight","Top","TypefaceFontProvider","TypefaceFontStyleSet","UNDERLINE","Upstream","Wavy","WordSpacing","abandon","add","add_font_feature","add_placeholder","add_shadow","add_text","affinity","alias","alignment","all","alphabetic_baseline","append_typeface","ascent","background","baseline","baseline","baseline_offset","baseline_shift","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","blocks_before","blur_sigma","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clear_caches","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_for_placeholder","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_typeface","cmp","color","color","color","complement","contains","contains","count","decoration","decoration_mut","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_fallback","default_fallback_char","deref","deref","deref_mut","deref_mut","descent","did_exceed_max_lines","difference","direct","disable_font_fallback","effective_align","ellipsis","ellipsized","empty","empty","enable_font_fallback","end_excluding_whitespaces","end_including_newline","end_index","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","equals_by_fonts","extend","fallback_manager","family_name","find_typefaces","find_typefaces_with_font_arguments","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_arguments","font_fallback_enabled","font_families","font_families","font_features","font_managers_count","font_metrics","font_metrics","font_size","font_size","font_style","font_style","force_strut_height","foreground","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_glyph_position_at_coordinate","get_line_metrics","get_rects_for_placeholders","get_rects_for_range","get_style_metrics","get_style_metrics_count","get_word_boundary","half_leading","half_leading","hard_break","has_shadow","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height_override","height_override","hinting_is_on","ideographic_baseline","index","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","is_placeholder","iter","layout","leading","left","letter_spacing","line_number","line_number","locale","longest_line","mark_dirty","match_one_attribute","max_intrinsic_width","max_lines","max_width","min_intrinsic_width","mode","name","new","new","new","new","new","new","new","new","new","new","new","new","new","not","offset","paint","paragraph_cache","paragraph_cache_mut","partial_cmp","peek_style","pop","position","print_statistics","push_style","range","range","rect","register_typeface","remove","replace_tab_characters","reset","reset","reset_font_features","reset_shadows","set","set_asset_font_manager","set_background_color","set_baseline_shift","set_color","set_default_font_manager","set_default_font_manager_and_family_names","set_dynamic_font_manager","set_ellipsis","set_font_arguments","set_font_families","set_font_families","set_font_size","set_font_size","set_font_style","set_font_style","set_force_strut_height","set_foreground_color","set_half_leading","set_half_leading","set_height","set_height","set_height","set_height_override","set_height_override","set_leading","set_letter_spacing","set_locale","set_max_lines","set_placeholder","set_replace_tab_characters","set_strut_enabled","set_strut_style","set_test_font_manager","set_text_align","set_text_baseline","set_text_direction","set_text_height_behavior","set_text_style","set_typeface","set_word_spacing","shadows","shift","start_index","strut_enabled","strut_style","style","style","style","sub","sub_assign","symmetric_difference","text_align","text_baseline","text_before","text_direction","text_height_behavior","text_style","text_style","text_style","thickness_multiplier","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_placeholder","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn_hinting_off","turn_on","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typeface","union","unlimited_lines","unresolved_glyphs","unscaled_ascent","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","value","width","width","width","word_spacing","wrap","wrap","wrap","wrap","wrap","wrap","wrap","Inverted","Mode","Normal","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","DoIncludeData","DontIncludeData","FontId","FontTableTag","IncludeDataIfLocal","LocalizedString","LocalizedStringsIter","SerializeBehavior","Typeface","TypefaceId","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone","clone_into","clone_into","clone_with_arguments","copy_table_data","count_glyphs","count_tables","default","deserialize","eq","eq","equal","family_name","fmt","fmt","fmt","fmt","font_style","from","from","from_data","from_name","get_kerning_pair_adjustments","get_table_data","get_table_size","hash","into","into","is_bold","is_fixed_pitch","is_italic","language","new","new_family_name_iterator","next","post_script_name","serialize","str_to_glyphs","string","table_tags","text_to_glyphs","to_font_data","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unichar_to_glyph","unichars_to_glyphs","unique_id","units_per_em","variation_design_parameters","variation_design_position","Camera3D","CustomTypefaceBuilder","DrawableAndBounds","OrderedFontMgr","Patch3D","Path","TypefaceGlyph","View3D","append","axis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","default","deref","deref_mut","detach","dot_with","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","inner","inner","inner_mut","inner_mut","into","into","into","location","new","new","new_null_canvas","observer","origin","parse_path","patch_to_matrix","reset","reset","set_font_style","set_glyph","set_metrics","shadow_utils","text_utils","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","unwrap","unwrap","update","v","wrap","wrap","zenith","Absolute","PathEncoding","Relative","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_svg","hash","into","to_owned","to_svg","to_svg_with_encoding","try_from","try_into","type_id","ALL","GEOMETRIC_ONLY","ShadowFlags","TRANSPARENT_OCCLUDER","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","compute_tonal_colors","contains","difference","draw_shadow","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","local_bounds","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","Align","Center","Left","Right","borrow","borrow_mut","clone","clone_into","draw_str","eq","fmt","from","get_path","hash","into","to_owned","try_from","try_into","type_id","Bone","BoneIndices","BoneWeights","Builder","BuilderFlags","HAS_COLORS","HAS_TEX_COORDS","Last","MAX_CUSTOM_ATTRIBUTES","TriangleFan","TriangleStrip","Triangles","VertexMode","Vertices","all","apply_bones","approximate_size","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","cmp","colors","colors","complement","contains","decode","detach","difference","empty","encode","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bones","has_colors","has_indices","has_tex_coords","hash","hash","index_count","indices","indices","insert","intersection","intersects","into","into","into","is_all","is_empty","is_volatile","is_volatile","mode","new","new_copy","not","partial_cmp","positions","positions","remove","set","sub","sub_assign","symmetric_difference","tex_coords","tex_coords","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","unique_id","vertex_count","NativeTransmutableWrapper","PointerWrapper","RefWrapper","ValueWrapper","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","unwrap","unwrap","unwrap","wrap","wrap","wrap","wrap_mut","wrap_ref","Centered","MAX_PLANES","PlaneConfig","S410","S411","S420","S422","S440","S444","Siting","Subsampling","UYV","UYVA","Unknown","Unknown","YUV","YUVA","YUVAInfo","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_total_bytes","default","dimensions","eq","eq","fmt","fmt","fmt","from","from","has_alpha","has_alpha","hash","hash","height","inner","inner_mut","into","into","new","num_channels_in_plane","num_channels_in_plane","num_planes","num_planes","origin","origin_matrix","plane_config","plane_dimensions","plane_dimensions","plane_subsampling_factors","plane_subsampling_factors","siting_xy","subsampling","subsampling_factors","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","width","with_dimensions","with_subsampling","wrap","yuv_color_space","DataType","Float16","Last","Last","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_color_type_for_data_type","eq","eq","fmt","fmt","from","from","hash","hash","into","into","num_channels_and_data_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DATA_TYPE_CNT","DataType","Float16","MAX_PLANES","MAX_PLANES","Unorm10_Unorm2","Unorm16","Unorm8","YUVAPixmapInfo","YUVAPixmaps","allocate","compute_total_bytes","data_type","data_type","fmt","fmt","from_data","from_data_type","from_external_memory","from_external_pixmaps","init_pixmaps_from_single_allocation","is_supported","new","num_planes","num_planes","pixmaps_info","plane","plane_info","plane_infos","planes","recommended_rgba_color_type","row_bytes","row_bytes_iter","yuv_color_space","yuva_info","yuva_info","yuva_pixmap_info","DataType","Float16","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","all","default","default_color_type_for_data_type","enable_data_type","fmt","from_context","num_channels_and_data_type","supported"],"q":["skia_safeskia_safe::annotate","","","skia_safe::blenders","skia_safe::canvasskia_safe::canvas::lattice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::color_filter","","","","","","","","","","","","","","","skia_safe::color_filter::color_filters","","","","","","","","","","","","","skia_safe::color_filters","","","","","","","","","","","","","skia_safe::color_matrix","","","","","","","","","","","","","","","","skia_safe::color_matrix_filter","skia_safe::colors","","","","","","","","","","","","skia_safe::contour_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::corner_path_effect","skia_safe::dash_path_effect","skia_safe::discrete_path_effect","skia_safe::document","","","","","","","","","","","","","","","","","skia_safe::document::state","","","","","","","","","","","","","","","","","","skia_safe::drawable","","","","","","","","","","","skia_safe::drawable::gpu_draw_handler","","","skia_safe::encode","","skia_safe::font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments::palette","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments::variation_position","","","","","","","","","","","","","","","","","","","","skia_safe::font_metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_parameters","","","","","","skia_safe::font_parameters::variation","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_style","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpuskia_safe::gpu::context_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpu::glskia_safe::gpu::mtl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gpu::vkskia_safe::gradient_shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gradient_shader::interpolation","","","skia_safe::graphics","","","","","","","","","","","","","","","","","skia_safe::high_contrast_config","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter::high_contrast_config","","","","skia_safe::icu","skia_safe::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::line_2d_path_effect","skia_safe::luma_color_filter","skia_safe::matrixskia_safe::matrix_path_effect","","skia_safe::merge_path_effect","skia_safe::named_transfer_fn","","","","","","skia_safe::overdraw_color_filter","","skia_safe::paint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::pathskia_safe::path_1d_path_effect","","","","","","","","","","","","","","","","","","","skia_safe::path_2d_path_effect","skia_safe::path_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_types","","","","","","","","","","","","","","","","skia_safe::path_utils","skia_safe::pdf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::perlin_noise_shader","","skia_safe::picture_recorder","","","","","","","skia_safe::region","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::rrect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::sampling_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader::shaders","","","","skia_safe::shader_mask_filter","skia_safe::shaders","","","","skia_safe::shaper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shaper::icu","skia_safe::shaper::run_handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::stroke_and_fill_path_effect","skia_safe::stroke_path_effect","skia_safe::stroke_rec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::svg","","skia_safe::svg::canvas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::table_color_filter","","skia_safe::textlayoutskia_safe::trim_path_effect","","","","","","","","","","","","","","","","","skia_safe::typeface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::parse_path","","","","","","","","","","","","","","","","","","","","skia_safe::utils::shadow_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::text_utils","","","","","","","","","","","","","","","","","","","skia_safe::vertices","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::wrapper","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Bitmap</code> describes a two-dimensional raster pixel array. …","","","Blender represents a custom blend function in the Skia …","","","Reflected across x-axis","Rotated 180","","","","","","","<code>Canvas</code> provides an interface for drawing, and how the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","These values match the orientation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps a native type that can be represented in Rust memory.","","","","","","","","","","","","","","<code>Image</code> describes a two dimensional array of pixels to draw. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","","","","","","","","The maximum number of points an iterator will return for …","","MaskFilter is the base class for object that perform …","","","","","","","","","","","","","","","","","","","","","","","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","","","","","","","","","","","","","","","","","","Implement this trait to use a pixel type in …","","","","","","","","","","","","","","","","A wrapper type represented by a reference counted pointer …","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper type that represents a native type with a …","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the structure of planes for a YUV image with …","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","","","","","","","","","","","","","","","","","","","","","","","Appends arc to <code>Path</code>, as the start of new contour. Arc …","","","","","","","","","","","","Adds circle centered at (x, y) of size radius to <code>Path</code>, …","","","","Adds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …","","Appends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.","","Appends src to <code>Path</code>, transformed by matrix. Transformed …","","Adds contour created from line array, adding <code>pts.len() - 1</code> …","","","","","Adds a new contour to the path, defined by the rect, and …","Appends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…","","Adds rrect to <code>Path</code>, creating a new closed contour. If dir …","","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Returns the set containing all flags.","Returns the set containing all flags.","Sets <code>ImageInfo</code> to width, height, and native color type; …","Sets <code>ImageInfo</code> to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","","","","","","","","","","","","","","","","","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","","","","","","","","","","","","","","","Returns <code>AlphaType</code>.","","","","","","","","","","","","","","Returns the approximate byte size of the <code>Path</code> in memory.","","","Returns the approximate bounds that would result from …","Returns the approximate bounds that would result from …","","","","","","","Appends arc to <code>Path</code>. Arc added is part of ellipse bounded …","","","","Appends arc to <code>Path</code>. Arc is implemented by one or more …","","","Appends arc to <code>Path</code>, after appending line if needed. Arc …","","","","","","","","","","","","","","","","","","","Returns a new image from the bitmap. If the bitmap is …","Returns a new image from the bitmap. If the bitmap is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the back-end texture. If <code>Image</code> has no back-end …","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","Create a blur mask filter.","Create a blur mask filter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The y coordinate of the rectangle’s bottom edge.","The y coordinate of the rectangle’s bottom edge.","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","Returns minimum and maximum axes values of <code>Point</code> array. …","","","","","","Returns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.","","Access the underlying pixels as a byte array. This is a …","Access the underlying pixels as a byte array. This is a …","Returns number of bytes per pixel required by <code>ColorType</code>.","","","","Returns number of bytes per pixel required by <code>ColorType</code>.","","","","","","","","","Returns <code>true</code> if the handle can be sent to another thread.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …","","","","","","","","","","","","","","","","","","","Returns <code>ColorSpace</code>, the range of colors, associated with …","","","","","Returns <code>ColorSpace</code>, the range of colors, associated with …","","","","","Returns a smart pointer to <code>ColorSpace</code>, the range of …","","","","","","","","","","","Returns <code>ColorType</code> if known; otherwise, returns …","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","Returns minimum memory required for pixel storage. Does …","","","Returns minimum memory required for pixel storage. Does …","","","","","Returns <code>true </code>if all pixels are opaque. <code>ColorType</code> …","","Returns <code>true </code>if all pixels are opaque. <code>ColorType</code> …","","","","","","","Returns minimum and maximum axes values of the lines and …","Given a per-plane row bytes, determine size to allocate …","Determine size to allocate for all planes. Optionally …","","","","Adds conic from last point towards (x1, y1), to (x2, y2), …","","Returns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…","","","Returns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","Approximates conic with quad array. Conic is constructed …","","","","","","","","","","","","","","","","","","Returns the number of points in <code>Path</code>. <code>Point</code> count is …","","","","Returns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …","","","","","","","","","Adds cubic from last point towards (x1, y1), then towards …","","","","","","","","","","","","","The per-YUV<code>[A]</code> channel data type.","","","","","","","See <code>Bitmap::new()</code>.","","","","","","See <code>Self::new()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns <code>ISize { width(), height() }</code>.","","","","","","","","","Dimensions of the full resolution image (after planes have …","Returns <code>ISize { width(), height() }</code>.","","","","Returns <code>ISize</code> <code>{ width(), height() }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","","","","See <code>Path::dump_as_data()</code>","","","","","Writes text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…","See <code>Path::dump_as_data()</code>","","","","","","","Returns an empty set of flags.","","Returns an empty set of flags.","Update to add support for pixmaps with <code>num_channels</code> …","","","","","","","","See <code>Self::encode_to_data_with_quality</code>","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","","","Returns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces pixel values inside area with c. interpreted as …","","","Replaces pixel values inside area with c. interpreted as …","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","","","","","","","","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Shares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …","","Shares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …","","","","","","","","","","","Returns <code>PathFillType</code>, the rule used to fill <code>Path</code>.","","","","","","","","","","","","","","","","","","","See <code>Self::flush_with_info()</code>","","","","Version of <code>flush()</code> that uses a default <code>gpu::FlushInfo</code>. …","","","","","","Flushes any pending uses of texture-backed images in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Image</code> from <code>backend_texture</code> associated with …","","","","","Creates <code>Image</code> from bitmap, sharing or copying bitmap …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","Init based on texture formats supported by the context.","","Use storage in Data as backing store for pixmaps’ …","","","","Like above but uses …","","","See <code>Self::from_encoded_with_alpha_type()</code>","","","Return an image backed by the encoded data, but attempt to …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Creates <code>Image</code> from data returned by <code>image_generator</code>. …","","","","","","","","","","","","","","","","See <code>Self::from_picture_with_props()</code>","","","","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","","","","","","","","","Creates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.","","","","","","","","","","","","","","","","","","","","","Creates <code>Image</code> from GPU texture associated with context. …","","","","","","","","Creates <code>Image</code> from <code>crate::YUVAPixmaps</code>.","Creates an <code>Image</code> from <code>YUV[A]</code> planar textures. This …","","","","","Returns a unique value corresponding to the pixels in …","","Returns a unique value corresponding to the pixels in …","(See Skia bug 1762.) Returns a non-zero, globally unique …","","","","Returns pixel address at <code>(x, y)</code>.","Returns pixel address at <code>(x, y)</code>.","Look up the pixel at <code>(x,y)</code> and return its alpha component, …","","","Look up the pixel at <code>(x,y)</code> and return its alpha component, …","","","","","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","","","","","","","","","","","","","","","","","Returns <code>Point</code> at index in <code>Point</code> array. Valid range for …","Returns number of points in <code>Path</code>. Up to max points are …","","","","","","","","","Returns the bounds of this bitmap, offset by its <code>PixelRef</code> …","Returns the bounds of this bitmap, offset by its <code>PixelRef</code> …","","","Returns the number of verbs in the path. Up to max verbs …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the image has mipmap levels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns pixel row count.","","","","","","","","Returns pixel row count.","","","","","","","","Returns pixel row count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>ImageInfo</code> describing the width, height, color …","","","","","Grows <code>Path</code> verb array and <code>Point</code> array to contain …","","","","","","","","","","","","","","Returns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…","","","","Returns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…","","","Takes an allocation that is assumed to be at least […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …","Interpolates between <code>Path</code> with <code>Point</code> array of equal size. …","","","","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if <code>Image</code> pixels represent transparency only. …","","","","","","","","","","","","","","Returns <code>true</code> if the path is convex. If necessary, it will …","Tests if cubic is degenerate. Cubic with no length or that …","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","Returns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","Returns <code>true</code> if no flags are currently stored.","","","","Returns <code>true</code> for finite <code>Point</code> array values between …","","","","","","","","","","","","","","Returns <code>true</code> if pixels can not change.","","Returns <code>true</code> if pixels can not change.","","","Returns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.","","Returns if FillType describes area outside <code>Path</code> geometry. …","","Returns if contour is closed. Contour is closed if <code>Path</code> …","Returns <code>true</code> if <code>Image</code> is backed by an image-generator or …","Returns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …","Tests if line between <code>Point</code> pair is degenerate. Line with …","","","","","Returns <code>true</code> if <code>PixelRef</code> is <code>None</code>.","Returns <code>true</code> if <code>PixelRef</code> is <code>None</code>.","Returns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …","","","","","","","Returns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …","","Returns <code>true</code> if pixels ignore their alpha value and are …","","","Returns <code>true</code> if this path is recognized as an oval or …","","","","","","Tests if quad is degenerate. Quad with no length or that …","Returns <code>true</code> if <code>Bitmap</code> can be drawn.","Returns <code>true</code> if <code>Bitmap</code> can be drawn.","Returns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …","","","Returns <code>true</code> if path is representable as <code>RRect</code>. Returns …","","","","","","","Is this valid and does it use color types allowed by the …","Returns <code>true</code> if the contents of <code>Image</code> was created on or …","","","","","","","Returns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …","","","","","","","Returns <code>true</code> if <code>Image</code> can be drawn on either raster …","Returns <code>true</code> if the path is volatile; it will not be …","","","","","","","","","","","","","","","","","Returns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …","","","","","","The x coordinate of the rectangle’s left edge.","The x coordinate of the rectangle’s left edge.","","","","","","","","","","","","","","","","","","","","","Adds line from last point to (x, y). If <code>Path</code> is empty, or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>true</code> if the type matches the color type’s format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a blender that implements the specified <code>BlendMode</code>.","","Create a blender that implements the specified <code>BlendMode</code>.","","","Adds beginning of contour at <code>Point</code> (x, y).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro to mark a Rust type as NativeTransmutable and test …","","","","","","","","","","","","","","Creates an empty <code>Bitmap</code> without pixels, with …","","","","","","","","","","","","","","","Creates an empty <code>Bitmap</code> without pixels, with …","","","","","Constructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …","","Initializes the YUVAPixmapInfo from a YUVAInfo with …","","Constructs a native Strings array from a slice of …","","","","Safety","","","Safety","","","","","","","<code>dimensions</code> should specify the size of the full resolution …","Initializes a YUVABackendTextureInfo to describe a set of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a given byte slice without copying it.","Constructs Data from a given byte slice without copying it.","See <code>Self::new_color_space_with_context</code>","Creates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …","","","","","Creates <code>Image</code> from pixmap. <code>Image</code> is uploaded to GPU …","Constructs Data from a &amp;CStr by copying its contents.","Constructs Data from a &amp;CStr by copying its contents.","","","","","","","","","","","","","","Create a new path with the specified segments.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a CPU-backed <code>Image</code> from compressed data.","","","","","","","","","","","","","","","","Constructs Data from a copy of a &amp;str.","Constructs Data from a copy of a &amp;str.","","","","","","","See <code>Self::new_subset_with_context</code>","Returns subset of this image.","","","Creates a GPU-backed <code>Image</code> from compressed data.","See <code>Self::new_texture_image_budgeted</code>","Returns <code>Image</code> backed by GPU texture associated with …","","","","","","","","","","","","","","","","","","","Creates filtered <code>Image</code>. filter processes original <code>Image</code>, …","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","Marks that pixels in <code>PixelRef</code> have changed. Subsequent …","","Marks that pixels in <code>PixelRef</code> have changed. Subsequent …","","","","Number of pixmap planes.","The number of crate::Pixmap planes.","The number of Pixmap planes.","","","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …","Copies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …","Copies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …","","","","","","","","Returns <code>PixelRef</code>, which contains: pixel base address; its …","Returns <code>PixelRef</code>, which contains: pixel base address; its …","Returns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …","Returns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …","Returns pixel address, the base address corresponding to …","","Access the underlying pixels. This is a rust-skia specific …","Returns pixel address, the base address corresponding to …","Access the underlying pixels. This is a rust-skia specific …","","Returns a constant reference to the <code>Pixmap</code> holding the …","Returns a constant reference to the <code>Pixmap</code> holding the …","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","","Returns the dimensions for each plane. Dimensions are as …","Format of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>","All plane formats.","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","","Access the Pixmap planes.","","","","","The number of points an iterator will return for the verb.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds quad from last point towards (x1, y1), to (x2, y2). …","","","","","","","","","","Appends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …","","Adds conic from last point towards vector (dx1, dy1), to …","","","Adds cubic from last point towards vector (dx1, dy1), then …","","","Adds line from last point to vector (dx, dy). If <code>Path</code> is …","","Adds beginning of contour relative to last point. If <code>Path</code> …","","Adds quad from last point towards vector (dx1, dy1), to …","","","","","","","Copies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …","","","Copies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …","See <code>Self::read_pixels_with_context()</code>","","","","","See <code>Self::read_pixels_to_pixmap_with_context()</code>","","Copies a <code>crate::Rect</code> of pixels from <code>Image</code> to dst. Copy …","Copies <code>crate::Rect</code> of pixels from <code>Image</code> to <code>dst_pixels</code>. …","","","","","","","","","Creates a new <code>Image</code> identical to this one, but with a …","Notify that the borrowed dependency is not referred to …","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","Resets to its initial state; all fields are set to zero, …","","","","","Sets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …","","","Resets to its initial state; all fields are set to zero, …","","","","","","","","","","","","","","","","","","","","Appends src to <code>Path</code>, from back to front. Reversed src …","Sets <code>Path</code> to its initial state, preserving internal …","","","","The x coordinate of the rectangle’s right edge.","The x coordinate of the rectangle’s right edge.","","","","","","","","","","","Returns row bytes, the interval from one pixel row to the …","","","Returns row bytes, the interval from one pixel row to the …","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","","","Returns number of pixels that fit on row. Should be …","","","Returns number of pixels that fit on row. Should be …","Row bytes for all planes.","","","","","","","","","","","","","","","","","","","","Copies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …","","","","","","","","","Returns a mask, where each set bit corresponds to a …","","","","Writes <code>Path</code> to buffer, returning the buffer written to, …","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","Inserts or removes the specified flags depending on the …","","","","","Sets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…","Sets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets FillType, the rule used to fill <code>Path</code>. While there is …","","","","","","","","","","","","","","","","","","","","","","","","","","Sets internal flag to mark <code>Bitmap</code> as immutable. Once set, …","","Sets internal flag to mark <code>Bitmap</code> as immutable. Once set, …","","Sets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …","Sets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …","","","Specifies whether <code>Path</code> is volatile; whether it will be …","","","Sets the last point on the path. If <code>Point</code> array is empty, …","","","","","","","","","","","","","","","","","","Replaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …","Replaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","Disables all flags enabled in the set.","","","","Checks whether there is a supported combination of color …","","","","","Swaps the fields of the two bitmaps.","Swaps the fields of the two bitmaps.","Exchanges the verb array, <code>Point</code> array, weights, and …","","","","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","Returns an approximation of the amount of texture memory …","","","","","","","","","","","","","","","","","","","","","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …","","","","","","","Make a shader with the specified tiling and mipmap …","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","Replaces FillType with its inverse. The inverse of …","","","","The y coordinate of the rectangle’s top edge.","The y coordinate of the rectangle’s top edge.","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","Sets <code>ImageInfo</code> to width, height, and native color type; …","Sets <code>ImageInfo</code> to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …eturns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","Returns value unique to image. <code>Image</code> contents cannot …","","","","","Macro that implements Send and Sync.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates internal bounds so that subsequent calls to …","","","","","","","","","","","","Macro that verifies a variant name at compile time.","","","","","","","","","","","","","Returns pixel count in each row. Should be equal or less …","","","","","","","","","","","Returns pixel count in each row. Should be equal or less …","","Returns pixel count in each row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an image with the same “base” pixels as the …","","","Returns a YUVAInfo that is identical to this one but with …","","","","","","","","","","","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>.","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap the handle in a type that can be sent to another …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a blender that implements the following: …","","Stack helper class calls <code>Canvas::restore_to_count()</code> when …","<code>Canvas</code> provides an interface for drawing, and how the …","","","Used to pass either a slice of <code>Point</code> or <code>RSXform</code> to …","initializes with previous contents","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","Selects if an array of points are drawn as discrete …","","","","","<code>SaveLayerFlags</code> provides options that may be used in any …","<code>SaveLayerRec</code> contains the state used to create the layer.","","<code>SrcRectConstraint</code> controls the behavior at the edge of …","","Provides access to Canvas’s pixels.","Returns the pixel base address, <code>ImageInfo</code>, <code>row_bytes</code>, and …","Returns the set containing all flags.","","","","","","If not <code>None</code>, this triggers the same initialization …","Gets the size of the base or root layer in global canvas …","Returns the <code>SurfaceProps</code> associated with the canvas (i.e., …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Hints at layer size limit","source bounds to draw from","Fills clip with color <code>color</code> using <code>BlendMode::Src</code>. This has …","","","","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","","","","","","","","","","","array of colors","Returns the complement of this set of flags.","Replaces <code>Matrix</code> with matrix premultiplied with existing …","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Sets <code>Self::bounds</code>, <code>Self::paint</code>, and <code>Self::backdrop</code> to <code>None</code>…","Creates an empty <code>Canvas</code> with no backing device or pixels, …","","","","","Returns <code>IRect</code> bounds of clip, unaffected by <code>Matrix</code>. If …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Makes <code>Canvas</code> contents undefined. Subsequent calls that …","Associates <code>Rect</code> on <code>Canvas</code> when an annotation; a key-value …","Draws arc using clip, <code>Matrix</code>, and <code>Paint</code> paint.","Draws circle at center with radius using clip, <code>Matrix</code>, and …","Fills clip with color <code>color</code>. <code>mode</code> determines how ARGB is …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, offset by …","Draws <code>RRect</code> outer and inner using clip, <code>Matrix</code>, and <code>Paint</code> …","Draws <code>count</code> glyphs, at positions relative to <code>origin</code> styled …","Draws glyphs at positions relative to <code>origin</code> styled with …","","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","","","","Draws <code>IRect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws line segment from <code>p1</code> to <code>p2</code> using clip, <code>Matrix</code>, and …","Draws oval oval using clip, <code>Matrix</code>, and <code>Paint</code>. In <code>paint</code>: …","Fills clip with <code>Paint</code> <code>paint</code>. <code>Paint</code> components, <code>Shader</code>, …","Draws a Coons patch: the interpolation of four cubics with …","Draws <code>Path</code> path using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. <code>Path</code> …","Draws <code>Picture</code> picture, using clip and <code>Matrix</code>; transforming …","Draws point <code>p</code> using clip, <code>Matrix</code> and <code>Paint</code> paint.","Draws <code>pts</code> using clip, <code>Matrix</code> and <code>Paint</code> <code>pain</code>. if the number …","Draws <code>Rect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws <code>Region</code> region using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. …","Draws <code>RRect</code> bounded by <code>Rect</code> rect, with corner radii …","Draws <code>RRect</code> rrect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","","Draws <code>String</code>, with origin at <code>(origin.x, origin.y)</code>, using …","","Draws <code>TextBlob</code> blob at <code>(origin.x, origin.y)</code>, using clip, …","Draws <code>Vertices</code> vertices, a triangle mesh, using clip and …","Draws saved layers, if any. Frees up resources used by …","Restores <code>Canvas</code> to saved state. Drop is called when …","Returns an empty set of flags.","","","","","Preserves LCD text, creates with prior layer contents","Triggers the immediate execution of all pending draw …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a canvas that draws into bitmap. Use props to …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Allocates raster <code>Canvas</code> that will draw directly into …","Allocates raster <code>Canvas</code> specified by inline image …","Preserves <code>Canvas::save()</code> count. Optionally saves <code>Canvas</code> …","","","","Returns <code>ImageInfo</code> for <code>Canvas</code>. If <code>Canvas</code> is not associated …","Writable pixels’ <code>ImageInfo</code>","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if clip is empty; that is, nothing will draw.","Returns <code>true</code> if clip is <code>Rect</code> and not empty. Returns <code>false</code> …","Returns <code>true</code> if no flags are currently stored.","","Returns bounds of clip, transformed by inverse of <code>Matrix</code>. …","Returns the current transform from local coordinates to …","Throws away the 3rd row and column in the matrix, so be …","Creates <code>Canvas</code> of the specified dimensions without a …","","Creates <code>Surface</code> matching info and props, and associates it …","Returns the complement of this set of flags.","<code>Canvas</code> top layer origin, its top-left corner","Modifies overlay","","Returns <code>true</code> if <code>Canvas</code> has direct access to its pixels.","Address of pixels","Copies <code>SurfaceProps</code>, if <code>Canvas</code> is associated with raster …","Returns <code>true</code> if <code>path</code>, transformed by <code>Matrix</code>, can be …","Returns <code>true</code> if <code>Rect</code> <code>rect</code>, transformed by <code>Matrix</code>, can be …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>. <code>Matrix</code> …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into bitmap. <code>Matrix</code> and …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into pixmap. <code>Matrix</code> and …","Returns GPU context of the GPU surface associated with …","array of fill types","Removes the specified flags in-place.","Sets <code>Matrix</code> to the identity matrix. Any prior matrix state …","Removes changes to <code>Matrix</code> and clip since <code>Canvas</code> state was …","Restores <code>Canvas</code> to saved state immediately. Subsequent …","Restores state to <code>Matrix</code> and clip values when <code>Self::save()</code>…","Rotates <code>Matrix</code> by degrees about a point at <code>(p.x, p.y)</code>. …","Writable pixels’ row bytes","Saves <code>Matrix</code> and clip. Calling <code>Self::restore()</code> discards …","Returns the number of saved states, each containing: <code>Matrix</code>…","Saves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …","Helper that accepts an int between 0 and 255, and divides …","Saves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …","Scales <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis.","Inserts or removes the specified flags depending on the …","DEPRECATED – use <code>M44</code> version","DEPRECATED – use <code>M44</code> version","Replaces <code>Matrix</code> with <code>matrix</code>. Unlike <code>Self::concat()</code>, any …","Skews <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis. A …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Sometimes a canvas is owned by a surface. If it is, …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Returns the <code>SurfaceProps</code> associated with the canvas that …","DEPRECATED Legacy version of <code>Self::local_to_device()</code>, …","Translates <code>Matrix</code> by <code>d</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","x-axis values dividing bitmap","y-axis values dividing bitmap","","","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","Optional setting per rectangular grid entry to make it …","","","","","","source bounds to draw from","","","array of colors","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","array of fill types","","","","","","","","x-axis values dividing bitmap","y-axis values dividing bitmap","Reflected across x-axis","Rotated 180","","","","","These values match the orientation …","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Return <code>true</code> if the encoded origin includes a 90 degree …","Given an width and height of the source data, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blends between the constant color (src) and input color …","","See <code>hsla_matrix_of_color_matrix()</code>","","","Create a color filter that multiplies the RGB channels by …","","","","","Create a table color filter, copying the table into the …","Create a table color filter, with a different table for …","","Blends between the constant color (src) and input color …","","See <code>hsla_matrix_of_color_matrix()</code>","","","Create a color filter that multiplies the RGB channels by …","","","","","Create a table color filter, copying the table into the …","Create a table color filter, with a different table for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Borrows the canvas for the current page on the document.","Close the document and return the encoded representation. …","Ends the page. This function consumes the document and …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The current page we are currently drawing on.","The number of pages in this document.","","","","","Document is currently on a page and can be drawn onto.","Document is currently open. May contain several pages.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type of a font weight.","Wrapper type for the width of a font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A description of a set BackendTextures that hold the …","A set of BackendTextures that hold the planar data for an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Initializes a YUVABackendTextureInfo to describe a set of …","","","","","","","","","","","","","","","","","","","","","","The number of crate::Pixmap planes.","","","","","Format of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>","All plane formats.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Safety","Safetyeturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Safety","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","Safety","Safety","","Safety","","Safety","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Type that represents either a slice of <code>Color</code>, or a slice …","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","On Windows, and if the default feature “embed-icudtl” …","","","","","","CachingHint selects whether Skia may internally cache …","Experimental: Skia                | GL_COMPRESSED_*     | …","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","<code>Image</code> describes a two dimensional array of pixels to draw. …","","","","Returns <code>AlphaType</code>.","","Retrieves the back-end texture. If <code>Image</code> has no back-end …","","","","","","","","","Returns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.","","","","","","","","","","","Returns a smart pointer to <code>ColorSpace</code>, the range of …","Returns <code>ColorType</code> if known; otherwise, returns …","","Returns <code>ISize</code> <code>{ width(), height() }</code>.","See <code>Self::encode_to_data_with_quality</code>","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","Returns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …","","","","","See <code>Self::flush_with_info()</code>","Version of <code>flush()</code> that uses a default <code>gpu::FlushInfo</code>. …","Flushes any pending uses of texture-backed images in the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Image</code> from <code>backend_texture</code> associated with …","Creates <code>Image</code> from bitmap, sharing or copying bitmap …","","See <code>Self::from_encoded_with_alpha_type()</code>","Return an image backed by the encoded data, but attempt to …","Creates <code>Image</code> from data returned by <code>image_generator</code>. …","","See <code>Self::from_picture_with_props()</code>","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","","Creates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.","Creates <code>Image</code> from GPU texture associated with context. …","Creates <code>Image</code> from <code>crate::YUVAPixmaps</code>.","Creates an <code>Image</code> from <code>YUV[A]</code> planar textures. This …","Returns <code>true</code> if the image has mipmap levels.","","","","Returns pixel row count.","Returns a <code>ImageInfo</code> describing the width, height, color …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>Image</code> pixels represent transparency only. …","Returns <code>true</code> if <code>Image</code> is backed by an image-generator or …","Returns <code>true</code> if pixels ignore their alpha value and are …","Returns <code>true</code> if the contents of <code>Image</code> was created on or …","Returns <code>true</code> if <code>Image</code> can be drawn on either raster …","","See <code>Self::new_color_space_with_context</code>","Creates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …","Creates <code>Image</code> from pixmap. <code>Image</code> is uploaded to GPU …","","Creates a CPU-backed <code>Image</code> from compressed data.","","","See <code>Self::new_subset_with_context</code>","Returns subset of this image.","Creates a GPU-backed <code>Image</code> from compressed data.","See <code>Self::new_texture_image_budgeted</code>","Returns <code>Image</code> backed by GPU texture associated with …","Creates filtered <code>Image</code>. filter processes original <code>Image</code>, …","Copies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …","See <code>Self::read_pixels_with_context()</code>","See <code>Self::read_pixels_to_pixmap_with_context()</code>","Copies a <code>crate::Rect</code> of pixels from <code>Image</code> to dst. Copy …","Copies <code>crate::Rect</code> of pixels from <code>Image</code> to <code>dst_pixels</code>. …","Creates a new <code>Image</code> identical to this one, but with a …","Copies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …","Returns an approximation of the amount of texture memory …","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","","","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …","Make a shader with the specified tiling and mipmap …","","","","","","","","","","","","","Returns value unique to image. <code>Image</code> contents cannot …","","Returns pixel count in each row.","Returns an image with the same “base” pixels as the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AddPathMode chooses how <code>add_path()</code> appends. Adding one <code>Path</code>…","","Four oval parts with radii (rx, ry) start at last <code>Path</code> …","","","","","","","","","","","","","","","Iterates through verb array, and associated <code>Point</code> array …","","","","The maximum number of points an iterator will return for …","","","","","","SegmentMask constants correspond to each drawing Verb type …","","Verb instructs <code>Path</code> how to interpret one or more <code>Point</code> and …","","Appends arc to <code>Path</code>, as the start of new contour. Arc …","Adds circle centered at (x, y) of size radius to <code>Path</code>, …","Adds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …","Appends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.","Appends src to <code>Path</code>, transformed by matrix. Transformed …","Adds contour created from line array, adding <code>pts.len() - 1</code> …","Adds a new contour to the path, defined by the rect, and …","Appends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…","Adds rrect to <code>Path</code>, creating a new closed contour. If dir …","Returns the set containing all flags.","Returns the approximate byte size of the <code>Path</code> in memory.","Appends arc to <code>Path</code>. Arc added is part of ellipse bounded …","Appends arc to <code>Path</code>. Arc is implemented by one or more …","Appends arc to <code>Path</code>, after appending line if needed. Arc …","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns minimum and maximum axes values of <code>Point</code> array. …","","","","","","","","","","Appends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …","","Returns the complement of this set of flags.","Returns minimum and maximum axes values of the lines and …","Adds conic from last point towards (x1, y1), to (x2, y2), …","Returns conic weight if <code>next()</code> returned <code>Verb::Conic</code>.","","Returns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…","Returns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Approximates conic with quad array. Conic is constructed …","","","Returns the number of points in <code>Path</code>. <code>Point</code> count is …","Returns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …","Adds cubic from last point towards (x1, y1), then towards …","Initializes <code>Iter</code> with an empty <code>Path</code>. <code>next()</code> on <code>Iter</code> returns","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","See <code>Path::dump_as_data()</code>","","","Writes text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…","See <code>Path::dump_as_data()</code>","Returns an empty set of flags.","","","","","","Returns <code>PathFillType</code>, the rule used to fill <code>Path</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","(See Skia bug 1762.) Returns a non-zero, globally unique …","Returns <code>Point</code> at index in <code>Point</code> array. Valid range for …","Returns number of points in <code>Path</code>. Up to max points are …","Returns the number of verbs in the path. Up to max verbs …","","","","","Grows <code>Path</code> verb array and <code>Point</code> array to contain …","Inserts the specified flags in-place.","Interpolates between <code>Path</code> with <code>Point</code> array of equal size. …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if last <code>Verb::Line</code> returned by <code>next()</code> was …","Returns <code>true</code> if subsequent calls to <code>next()</code> return …","Returns <code>true</code> if the path is convex. If necessary, it will …","Tests if cubic is degenerate. Cubic with no length or that …","Returns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> for finite <code>Point</code> array values between …","Returns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.","Returns if FillType describes area outside <code>Path</code> geometry. …","Returns if contour is closed. Contour is closed if <code>Path</code> …","Returns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …","Tests if line between <code>Point</code> pair is degenerate. Line with …","Returns <code>true</code> if this path is recognized as an oval or …","Tests if quad is degenerate. Quad with no length or that …","Returns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …","Returns <code>true</code> if path is representable as <code>RRect</code>. Returns …","Returns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …","Returns <code>true</code> if the path is volatile; it will not be …","Returns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …","","Adds line from last point to (x, y). If <code>Path</code> is empty, or …","","","Adds beginning of contour at <code>Point</code> (x, y).","Sets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …","","Constructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …","Create a new path with the specified segments.","Returns next <code>Verb</code> in verb array, and advances <code>Iter</code>. When …","","Returns the complement of this set of flags.","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …","","","","","","The number of points an iterator will return for the verb.","","Adds quad from last point towards (x1, y1), to (x2, y2). …","Appends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …","Adds conic from last point towards vector (dx1, dy1), to …","Adds cubic from last point towards vector (dx1, dy1), then …","Adds line from last point to vector (dx, dy). If <code>Path</code> is …","Adds beginning of contour relative to last point. If <code>Path</code> …","Adds quad from last point towards vector (dx1, dy1), to …","","Removes the specified flags in-place.","Sets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …","Appends src to <code>Path</code>, from back to front. Reversed src …","Sets <code>Path</code> to its initial state, preserving internal …","","","Returns a mask, where each set bit corresponds to a …","Writes <code>Path</code> to buffer, returning the buffer written to, …","Inserts or removes the specified flags depending on the …","Sets FillType, the rule used to fill <code>Path</code>. While there is …","Specifies whether <code>Path</code> is volatile; whether it will be …","Sets the last point on the path. If <code>Point</code> array is empty, …","Sets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Exchanges the verb array, <code>Point</code> array, weights, and …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","Replaces FillType with its inverse. The inverse of …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Updates internal bounds so that subsequent calls to …","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>.","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","Returns the filled equivalent of the stroked path.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for accessing the native run handler instance used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On Windows, and if the default feature “embed-icudtl” …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Ends the Canvas drawing and returns the resulting SVG. …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a new SVG canvas.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Efficient reference type to a C++ vector of font family …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Returns indices and references to style metrics in the …","Returns the number of style metrics in the given index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","A trait that supports the conversion from a C/C++ value …","This trait supports the conversion of a wrapper into it’…","A trait that supports the conversion from a C/C++ …","A trait that supports the conversion from a C/C++ value …","Access the wrapped pointer.","","","","Access the wrapped pointer.","","","","Unwraps the wrapper type into the native pointer.","","","Wraps a native pointer into a wrapper type. Returns <code>None</code> …","","","","","","","Specifies how YUV (and optionally A) are divided among …","","","","","","","Describes how subsampled chroma values are sited relative …","UV subsampling is also specified in the enum value names …","","","","","","","Specifies the structure of planes for a YUV image with …","","","","","","","","","","","","","","","","","Given a per-plane row bytes, determine size to allocate …","","Dimensions of the full resolution image (after planes have …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Does the PlaneConfig have alpha values?","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>dimensions</code> should specify the size of the full resolution …","Number of Y, U, V, A channels in the ith plane for a given …","","Number of planes for a given PlaneConfig.","","","","","Given image dimensions, a planer configuration, …","Returns the dimensions for each plane. Dimensions are as …","<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to a …","","","","Ratio of Y/A values to U/V values in x and y.","","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Returns a YUVAInfo that is identical to this one but with …","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the default ColorType to use with <code>num_channels</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the ColorType is supported for YUVA pixmaps this will …","","","","","","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","Determine size to allocate for all planes. Optionally …","The per-YUV<code>[A]</code> channel data type.","","","","Use storage in Data as backing store for pixmaps’ …","Like above but uses …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Takes an allocation that is assumed to be at least […","Is this valid and does it use color types allowed by the …","Initializes the YUVAPixmapInfo from a YUVAInfo with …","The number of Pixmap planes.","Number of pixmap planes.","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","Access the Pixmap planes.","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","Row bytes for all planes.","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Defaults to nothing supported.","Gets the default ColorType to use with <code>num_channels</code> …","Update to add support for pixmaps with <code>num_channels</code> …","","Init based on texture formats supported by the context.","If the ColorType is supported for YUVA pixmaps this will …","Checks whether there is a supported combination of color …"],"i":[146,131,131,50,131,153,153,131,0,0,146,0,0,131,131,131,150,150,1,1,50,153,145,145,145,145,145,145,145,159,0,0,0,0,0,0,294,294,0,135,32,131,32,1,0,123,94,0,161,0,0,155,0,94,0,0,94,0,0,94,0,0,0,0,0,0,0,0,161,0,0,0,154,0,161,0,0,155,1,5,155,153,51,94,0,0,0,123,135,159,0,0,94,156,162,12,0,0,94,94,94,94,94,0,0,0,154,160,94,158,0,0,0,0,0,0,0,0,0,0,0,157,146,153,1,50,50,1,50,0,143,131,467,153,0,0,94,0,94,153,155,155,0,0,155,155,0,0,145,0,0,0,0,154,122,154,156,162,12,154,154,154,154,160,160,0,153,145,153,145,153,1,147,148,135,159,162,94,65,145,146,122,94,94,123,294,294,94,161,147,148,94,0,1,7,5,5,5,5,161,0,0,0,156,0,123,159,94,161,94,131,467,0,147,148,148,157,122,157,467,155,0,65,122,94,0,153,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,65,161,0,146,131,131,131,131,131,0,1,50,50,0,50,131,131,131,50,131,131,131,131,131,150,150,0,0,145,145,145,145,145,0,0,0,123,162,12,294,294,135,159,0,0,155,155,131,0,0,94,0,0,94,0,0,0,0,157,94,122,135,94,94,94,94,94,158,158,0,154,0,0,0,0,1,0,0,0,0,0,0,294,294,0,51,143,143,143,0,154,162,12,131,65,150,65,0,0,0,0,0,0,153,153,1,160,12,0,94,162,1,0,0,0,0,467,155,1,3,93,140,5,7,7,10,5,5,17,18,19,20,20,22,22,25,26,5,5,17,18,19,20,20,22,22,25,26,5,5,5,26,5,5,26,5,5,5,40,5,26,5,26,5,5,5,26,5,5,5,40,44,5,44,5,47,7,5,50,51,52,5,52,5,52,5,52,5,55,5,55,5,55,5,55,5,55,5,55,5,55,5,55,5,5,7,7,7,5,5,7,52,66,54,44,5,5,5,5,7,40,0,7,5,5,5,7,7,40,5,5,5,81,5,7,7,84,7,81,7,81,7,7,26,5,5,26,5,5,26,5,5,468,21,89,7,7,7,93,17,18,19,93,5,95,7,94,7,5,5,52,5,81,7,5,17,18,19,5,5,7,93,47,27,27,5,5,5,0,5,233,107,7,40,107,7,107,7,107,7,233,1,3,137,93,140,413,5,5,5,5,40,7,116,5,5,40,7,5,5,5,1,1,50,51,50,51,1,1,50,51,50,51,50,51,50,51,50,51,5,5,5,0,84,7,7,5,7,5,7,227,5,40,7,190,341,1,137,138,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,227,5,40,7,190,341,1,137,138,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,47,27,233,47,27,52,54,44,125,5,5,5,5,5,40,7,7,7,7,7,40,44,5,52,66,54,5,5,5,131,3,140,413,116,5,7,340,7,0,132,5,7,5,233,27,27,27,5,7,7,7,5,7,26,5,7,1,137,138,50,93,139,140,141,131,142,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,5,5,40,7,1,137,138,50,93,139,140,141,131,142,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,5,7,151,26,5,5,50,51,0,144,144,5,5,5,0,5,7,7,0,54,5,0,0,52,66,54,44,116,5,5,5,5,5,7,52,66,54,44,116,5,5,5,5,5,7,7,7,0,5,7,144,84,5,5,5,7,50,51,84,7,7,7,7,7,7,26,5,52,54,44,5,5,5,7,142,52,44,5,5,54,5,54,5,5,5,5,5,142,144,26,5,5,5,40,469,5,50,47,47,47,47,47,27,27,27,51,47,5,5,5,0,267,5,5,5,95,7,7,7,0,107,175,5,5,7,7,72,7,7,7,5,5,7,5,5,17,18,22,25,22,25,201,26,5,5,81,7,40,40,40,40,3,140,7,0,5,5,152,152,7,7,5,5,52,175,72,66,44,116,5,5,5,5,5,5,1,143,17,18,19,144,145,20,22,25,47,27,21,23,150,51,151,3,94,122,156,135,159,32,123,7,7,7,95,190,3,190,233,470,167,5,7,7,7,132,26,5,5,5,5,5,5,40,50,51,7,52,54,197,44,116,5,5,5,5,5,5,40,40,7,7,7,7,0,7,22,22,7,7,28,17,22,23,17,22,23,0,17,18,19,22,25,22,25,40,40,7,7,7,7,7,0,52,5,5,40,7,5,144,27,5,5,5,5,27,140,5,40,40,40,50,47,51,5,7,0,52,44,5,5,7,7,7,205,40,7,40,40,95,5,40,7,1,137,138,50,93,139,140,141,131,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,7,5,20,22,21,23,5,52,44,5,5,52,44,5,5,52,5,52,5,52,5,44,5,7,50,51,7,7,52,5,52,44,5,5,140,7,72,7,7,7,72,7,26,5,5,201,7,7,7,7,7,7,7,7,7,7,7,5,5,93,5,151,7,7,7,7,7,7,7,7,7,7,7,7,52,89,167,95,107,192,132,175,72,205,66,54,84,26,81,197,44,116,125,55,227,10,5,5,5,1,137,138,50,50,50,50,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,51,51,51,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,0,0,5,7,5,5,5,7,0,5,0,5,5,0,5,5,7,5,5,7,7,89,72,72,227,5,40,7,7,190,341,1,1,1,137,137,138,138,50,93,93,93,93,139,140,141,131,142,228,143,17,18,19,144,144,144,65,145,146,20,20,22,22,22,22,25,25,147,47,47,148,27,27,27,27,149,21,21,23,23,23,23,150,51,151,152,3,3,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,7,7,1,7,7,7,50,51,50,51,50,51,27,81,5,7,93,7,7,3,54,5,7,5,81,5,40,7,7,5,205,40,7,205,40,7,5,5,7,27,27,23,50,51,27,47,7,7,7,5,5,5,205,40,7,7,205,40,7,7,27,125,7,125,7,47,149,7,5,1,125,7,84,7,47,27,107,7,107,7,125,5,5,7,5,7,125,7,7,5,5,5,47,27,47,27,7,7,1,137,93,140,52,197,5,5,7,7,7,52,5,52,44,5,5,7,7,5,5,144,52,44,5,5,52,44,5,5,40,40,40,7,125,5,7,7,40,7,5,205,40,40,40,40,5,5,5,40,40,40,5,144,40,40,52,5,7,7,5,5,5,5,40,5,40,5,40,40,227,0,0,0,267,138,5,5,5,5,7,7,5,7,7,40,40,7,7,5,50,131,143,65,145,146,147,148,51,152,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,52,54,197,44,116,5,5,5,5,5,5,5,5,40,40,40,7,7,7,47,27,21,23,47,5,5,7,0,0,5,40,152,0,7,40,0,7,0,5,0,116,5,7,7,7,7,26,5,5,40,107,5,5,93,19,7,93,5,7,5,5,5,52,205,44,5,5,40,40,5,5,5,40,7,1,93,139,131,142,143,17,18,19,144,20,22,25,47,27,149,21,23,150,151,152,3,161,5,5,40,7,1,93,139,131,142,143,17,18,19,144,20,22,25,47,27,149,21,23,150,151,152,3,161,7,7,7,7,50,51,47,27,52,5,5,47,27,27,47,50,51,50,47,27,51,27,5,5,227,5,40,7,190,341,1,137,138,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,81,7,5,40,190,228,144,267,7,50,51,7,7,131,5,5,5,150,7,5,7,5,5,7,5,5,5,5,5,5,52,95,107,54,5,5,5,5,5,7,7,50,47,27,21,23,51,47,160,5,5,144,22,25,27,7,5,5,66,54,5,5,150,5,52,197,5,7,5,5,160,5,7,5,7,5,5,142,5,116,5,52,5,52,66,54,44,5,5,5,5,7,7,93,65,5,5,116,5,5,40,5,52,5,5,5,150,5,40,27,5,167,7,5,5,7,116,5,151,150,205,116,5,5,5,5,5,40,40,7,5,5,7,20,22,21,23,22,107,7,5,47,27,27,27,27,40,5,40,5,233,47,27,47,27,5,5,7,17,18,19,22,25,17,18,19,22,25,5,5,7,0,40,26,5,5,7,7,5,40,144,7,0,7,26,55,5,5,7,7,7,7,7,7,5,7,5,144,40,5,72,7,72,7,72,7,72,7,5,175,7,471,1,93,0,5,40,7,7,0,7,201,233,40,40,7,7,7,40,5,5,7,7,0,5,40,5,40,54,5,152,434,201,5,40,5,89,7,7,152,26,5,5,28,28,28,28,93,93,93,17,17,18,18,19,19,144,144,144,22,23,17,17,18,18,19,19,22,23,131,5,5,5,94,0,144,472,472,0,467,28,467,28,5,7,17,18,19,20,22,25,22,52,132,72,66,54,26,44,125,55,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,40,40,40,40,7,7,7,7,7,7,7,190,1,93,142,17,18,19,144,20,22,25,47,27,149,21,23,151,3,54,5,40,95,7,7,7,95,7,7,40,7,95,7,95,107,175,7,7,7,47,27,21,23,7,5,40,5,72,7,5,5,40,7,40,5,40,40,144,7,7,7,5,5,40,7,40,54,5,54,5,7,7,7,26,5,81,7,40,7,7,7,7,7,7,7,7,54,5,40,40,40,167,7,167,7,40,95,7,72,7,72,7,95,7,7,7,7,7,7,7,7,40,40,40,40,175,7,95,7,54,5,5,5,5,5,40,7,40,5,7,95,7,190,228,5,40,17,18,19,22,25,144,22,25,50,51,5,197,7,7,7,52,197,5,7,5,5,5,5,5,5,26,5,5,5,7,22,47,27,22,47,27,7,0,5,5,5,5,5,116,5,5,40,5,40,47,27,5,5,7,0,0,40,7,7,50,51,0,7,0,7,0,0,5,0,0,0,0,52,5,7,7,40,7,0,144,0,151,52,5,52,5,52,197,44,5,5,7,52,5,5,5,5,5,5,5,5,5,5,5,81,7,7,7,161,5,26,5,40,5,7,5,7,5,144,7,5,144,5,144,144,0,0,144,144,144,7,5,0,7,40,40,7,40,26,5,5,40,5,5,473,5,5,1,137,93,5,26,5,5,26,5,5,26,5,5,5,26,5,5,7,7,0,144,5,52,44,5,5,7,7,7,44,5,7,7,7,7,5,5,7,5,149,144,0,7,7,190,7,5,50,51,7,7,40,0,0,5,52,54,26,44,5,5,5,5,5,5,5,5,5,40,7,5,7,5,116,5,10,5,7,7,7,7,7,40,5,5,5,47,27,47,27,144,40,40,40,27,27,474,27,27,144,52,197,44,5,5,5,7,52,44,5,5,5,144,144,0,5,5,0,138,116,5,5,434,0,40,0,144,22,25,44,5,7,5,22,25,40,149,152,5,7,5,470,167,81,5,7,7,7,7,5,50,20,22,25,149,21,23,51,144,22,5,5,52,5,5,5,7,7,7,7,7,5,5,5,5,5,27,27,27,27,144,144,5,5,5,5,44,5,5,144,144,7,7,5,7,5,40,5,5,5,47,27,21,23,5,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,40,5,5,5,5,144,149,5,52,197,5,7,52,5,27,26,5,5,27,5,5,22,22,5,5,5,47,27,5,40,5,5,40,22,5,5,5,52,5,5,144,5,5,5,40,5,7,7,144,144,144,144,5,144,5,5,144,5,5,5,47,5,5,5,5,5,5,5,5,5,40,5,5,7,40,5,40,40,40,144,5,5,5,40,47,27,5,47,27,0,5,0,0,5,40,40,40,40,0,52,66,54,44,5,5,5,5,5,0,5,5,95,5,7,47,27,5,5,40,7,26,5,47,27,47,27,7,5,7,7,149,40,40,5,7,5,7,5,7,0,5,5,5,0,0,5,5,40,175,5,5,7,50,17,18,19,20,20,22,22,25,51,50,17,18,19,20,20,22,22,25,51,7,5,7,5,7,0,5,0,52,5,5,5,0,0,7,7,50,51,0,7,5,7,40,5,40,40,40,5,7,5,0,5,5,5,5,7,5,205,40,0,5,7,152,7,7,7,93,23,138,93,23,7,1,137,144,160,7,93,5,40,7,1,137,138,50,93,139,140,141,131,142,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,5,27,149,7,7,1,23,52,81,5,7,7,5,5,5,5,149,167,7,50,51,26,5,5,47,27,233,47,27,5,5,5,40,144,5,144,7,0,52,5,52,5,52,5,52,5,227,5,40,7,190,341,1,137,138,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,227,5,40,7,190,341,1,137,138,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,7,40,5,7,7,149,5,5,149,227,5,40,7,190,341,1,137,138,50,93,139,140,141,131,142,228,143,17,18,19,144,65,145,146,20,22,25,147,47,148,27,149,21,23,150,51,151,152,3,153,154,94,155,122,156,157,158,135,159,160,32,161,162,123,12,470,7,0,227,5,5,5,5,7,5,7,7,7,50,51,205,81,125,40,7,7,7,7,7,7,40,40,0,5,40,7,341,1,93,139,131,142,143,17,18,19,144,20,22,25,47,27,149,21,23,150,151,152,3,161,5,201,116,5,0,138,54,5,40,7,131,5,0,7,7,7,0,5,116,5,5,40,116,5,19,52,54,197,44,116,5,5,5,5,5,5,5,40,7,7,7,47,27,21,23,47,1,47,66,54,5,5,116,5,7,66,54,116,5,5,5,167,7,66,54,5,5,7,54,5,5,116,5,47,27,167,7,7,7,84,7,5,47,27,47,27,47,27,5,167,7,5,5,5,5,5,40,7,1,93,139,131,142,143,17,18,19,144,20,22,25,47,27,149,21,23,150,151,152,3,161,5,5,340,7,0,44,5,44,5,5,7,7,5,47,27,17,18,19,20,20,22,25,233,233,233,47,27,17,18,19,20,20,22,25,152,5,5,5,5,0,5,5,5,5,0,0,18,19,25,0,0,0,0,0,0,0,345,350,0,345,0,349,0,345,0,348,349,349,348,0,0,0,0,350,0,78,345,78,78,78,78,346,347,78,78,345,345,345,345,345,345,345,347,78,346,475,345,344,348,351,349,350,347,78,346,475,345,344,348,351,349,350,347,352,78,78,347,347,78,78,78,78,78,345,348,349,350,345,348,349,350,345,352,345,78,78,345,347,346,346,351,346,351,78,345,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,346,351,345,345,349,350,345,347,78,347,78,346,345,345,345,345,345,344,348,351,349,350,347,78,346,475,345,344,348,348,348,351,349,350,78,345,345,345,345,78,78,475,345,349,350,78,344,347,347,345,345,345,347,78,346,475,345,344,348,351,349,350,345,78,78,345,0,78,78,78,78,78,78,345,344,347,345,78,344,78,78,78,78,78,78,78,352,345,78,78,351,78,78,344,78,78,78,78,78,78,345,476,78,78,78,345,345,78,345,345,348,349,350,345,78,78,78,347,78,346,475,345,344,348,351,349,350,347,78,346,475,345,344,348,351,349,350,347,78,346,475,345,344,348,351,349,350,345,347,347,78,78,352,352,355,355,0,0,355,352,355,352,355,352,355,355,352,355,355,352,355,352,355,355,352,355,352,355,352,355,352,355,352,355,352,352,294,294,324,0,154,294,0,154,154,154,154,154,154,154,294,294,294,357,0,356,356,0,294,294,0,0,154,324,294,294,154,357,0,255,294,356,357,324,255,294,356,357,324,243,255,294,356,357,324,255,294,356,357,324,294,243,243,255,294,356,357,324,243,255,294,356,357,324,255,255,294,356,357,324,243,243,243,243,243,243,243,243,243,243,294,356,357,324,243,243,294,294,255,294,356,357,324,243,243,243,255,243,0,243,243,243,243,255,294,294,255,294,356,357,324,255,294,356,357,324,255,294,356,357,324,255,294,356,357,324,294,243,294,255,0,0,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,258,258,0,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,358,359,258,258,258,258,258,258,258,258,258,258,359,358,258,258,258,258,258,258,358,258,358,359,359,258,258,358,258,359,358,258,258,258,258,258,258,258,258,258,258,0,0,0,0,360,360,360,360,360,360,360,360,360,360,360,360,0,360,360,360,0,0,362,361,362,361,362,361,362,361,362,361,362,361,362,361,362,361,0,0,219,219,219,219,219,219,0,219,219,0,332,332,0,0,202,202,0,0,202,202,202,202,202,56,56,56,56,202,56,202,202,56,56,56,56,56,56,56,56,56,202,56,202,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,202,202,202,202,56,56,56,56,56,0,0,0,164,364,365,164,364,365,364,365,364,365,164,364,164,164,164,364,365,164,364,365,365,164,164,164,364,365,164,365,0,164,164,164,164,364,365,164,364,365,164,364,365,164,364,365,164,164,0,164,0,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,0,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,367,0,0,367,367,367,367,367,233,233,367,367,367,367,367,367,367,367,233,367,233,233,233,367,233,367,233,367,367,367,367,233,233,367,367,367,233,367,367,367,367,367,367,233,367,233,367,367,367,367,233,367,233,233,367,367,367,367,233,367,367,233,233,367,367,367,367,233,233,367,367,367,367,233,367,233,367,233,367,233,367,233,233,233,367,233,233,233,233,233,0,342,342,342,342,0,0,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,368,368,369,369,368,368,369,369,368,0,368,370,368,368,368,369,370,368,369,369,0,368,369,369,370,0,0,189,189,368,369,189,370,368,369,189,370,368,369,189,370,368,369,189,370,368,369,189,368,369,368,369,189,370,368,369,189,370,368,368,369,369,189,370,370,368,369,189,368,369,189,368,369,189,370,189,189,189,368,369,189,368,369,189,370,368,369,189,370,368,369,189,370,368,369,189,370,368,369,189,189,189,368,369,189,0,0,0,0,0,0,0,239,0,0,0,113,111,111,0,0,0,0,373,113,111,0,0,113,111,0,308,251,251,187,270,222,308,111,111,0,0,0,0,0,0,0,239,113,111,308,0,0,251,251,187,270,222,308,97,237,371,371,237,117,117,117,117,200,117,238,240,224,237,238,240,268,322,323,308,221,113,111,251,187,270,239,222,371,268,322,323,308,221,113,111,251,187,270,239,222,371,117,97,238,268,322,323,308,113,111,251,187,270,239,222,268,322,323,308,113,111,251,187,270,239,222,237,237,97,237,0,372,224,221,237,97,97,371,238,240,371,371,371,371,371,371,268,322,323,308,113,111,251,187,270,239,222,97,97,371,97,97,200,117,238,240,372,97,224,237,373,252,268,322,323,308,221,113,111,251,187,270,239,222,371,371,97,237,268,322,323,308,221,113,111,251,187,270,239,222,371,200,200,0,371,240,238,238,238,238,113,111,251,187,270,239,222,238,240,97,268,308,221,268,308,221,268,322,323,308,221,113,111,251,187,270,239,222,371,240,238,240,238,200,117,238,240,238,371,371,237,322,322,237,237,238,240,238,373,0,200,117,373,252,371,371,117,238,240,97,238,117,238,240,97,238,372,224,117,238,240,97,238,117,373,252,97,371,97,373,373,97,97,224,97,371,97,97,323,97,97,97,97,323,371,240,97,97,97,97,238,240,97,97,238,240,240,97,97,97,252,373,252,252,268,322,323,308,113,111,251,187,270,239,222,117,268,322,323,308,221,113,111,251,187,270,239,222,371,268,322,323,308,221,113,111,251,187,270,239,222,371,268,322,323,308,221,113,111,251,187,270,239,222,371,371,371,268,308,221,0,224,238,240,238,240,268,308,221,373,373,252,375,375,0,374,0,374,0,375,374,303,303,303,303,303,303,374,375,303,374,375,303,374,375,374,375,303,303,303,303,303,303,303,303,374,375,303,374,375,303,374,375,303,303,374,375,303,303,303,303,374,375,303,303,303,303,303,303,303,303,303,303,303,303,374,375,303,374,375,303,374,375,303,374,375,303,303,303,99,99,376,0,99,99,99,99,99,0,0,376,0,0,378,378,0,99,99,99,99,99,376,376,378,376,376,99,99,99,376,99,99,99,99,99,99,99,99,99,99,99,99,376,99,99,0,0,376,0,0,99,376,376,378,210,376,376,376,376,376,376,376,376,266,265,377,376,378,99,266,265,377,376,378,99,266,265,377,376,378,99,266,265,377,376,378,99,376,376,376,266,265,377,376,376,266,265,377,376,378,99,376,302,302,265,210,302,266,265,377,376,376,376,376,376,378,99,266,265,377,266,265,377,376,378,99,99,376,376,376,265,376,266,210,302,376,378,99,266,266,265,377,266,265,377,376,376,376,266,265,377,376,378,99,376,376,210,377,302,302,302,376,376,377,210,376,210,377,376,376,376,376,266,377,266,265,377,376,378,99,376,266,265,377,376,378,99,266,265,377,376,378,99,266,265,377,376,378,99,376,266,265,377,302,266,265,377,0,0,0,0,0,0,0,380,380,380,380,280,380,380,305,280,380,380,380,380,380,380,380,305,280,380,380,380,280,380,380,380,380,380,380,380,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,310,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,310,389,396,396,390,390,0,0,106,106,106,106,106,310,310,310,310,310,310,310,310,310,310,388,382,0,385,0,0,0,106,106,106,106,106,106,106,106,106,106,106,389,381,0,0,310,310,0,0,0,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,310,382,0,0,0,0,395,395,395,395,0,0,0,0,0,0,385,381,381,381,381,381,383,388,390,383,310,106,388,389,390,394,395,396,396,396,390,383,0,381,0,388,0,310,310,106,106,106,106,106,106,106,106,0,0,0,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,310,394,394,0,0,106,382,310,310,310,310,310,310,310,0,0,0,0,310,310,310,106,0,106,394,394,394,394,394,394,394,394,0,477,397,381,382,383,312,384,381,382,383,381,382,383,381,382,383,381,382,383,381,382,383,381,382,383,381,382,383,477,313,381,382,384,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,477,313,381,382,384,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,314,381,382,384,383,314,312,385,249,386,387,310,106,388,389,390,391,392,393,394,395,396,397,381,382,384,383,314,312,385,249,386,387,310,106,388,389,390,391,392,393,394,395,396,397,381,382,383,387,249,249,381,382,383,381,382,383,312,384,314,312,249,386,387,381,382,383,249,313,381,382,383,381,382,384,383,314,386,387,310,106,388,389,390,394,395,396,381,382,383,393,314,384,313,381,381,381,381,381,382,382,382,382,382,384,383,383,383,383,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,314,314,312,249,386,314,399,400,401,402,403,404,405,406,407,477,313,381,382,384,383,314,312,385,249,386,398,387,387,387,310,106,388,389,390,391,392,393,394,395,396,397,381,382,383,381,382,383,381,382,383,384,312,312,381,382,383,381,382,383,310,106,388,389,390,394,395,396,391,312,386,312,386,381,382,384,314,312,249,386,381,382,384,314,312,249,386,381,382,383,381,382,383,381,382,383,477,313,381,382,384,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,381,382,383,381,382,383,314,312,312,386,387,384,387,385,313,314,312,387,313,314,381,382,383,384,393,381,382,383,387,387,312,386,381,382,383,312,386,249,381,382,383,313,313,312,386,384,381,382,383,381,382,383,381,382,383,312,381,382,384,383,314,312,385,249,386,387,310,106,388,389,390,391,392,393,394,395,396,397,381,382,383,477,313,381,382,384,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,477,313,381,382,384,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,477,313,381,382,384,383,314,312,385,249,386,398,387,310,106,388,389,390,391,392,393,394,395,396,397,381,382,383,381,382,384,314,312,249,386,391,381,382,384,314,312,249,386,392,314,392,314,312,386,314,314,272,272,0,0,273,0,273,273,273,273,273,273,273,273,274,273,272,274,273,272,274,273,274,273,273,274,273,273,273,273,273,274,273,273,274,273,273,273,273,273,272,274,274,273,272,272,272,272,273,273,273,273,274,273,274,274,274,274,273,0,273,273,274,273,272,273,273,272,272,0,0,273,273,0,0,273,273,273,273,0,0,273,274,273,273,274,273,272,274,273,272,0,0,274,273,272,273,274,274,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,267,267,267,267,267,267,267,267,267,267,0,267,267,267,267,267,0,267,267,267,267,267,267,267,412,412,0,412,0,307,171,171,0,171,0,0,0,307,171,171,247,0,171,171,247,101,413,101,413,171,247,307,413,171,247,307,101,413,413,413,171,247,307,413,171,247,307,101,101,101,101,101,101,101,413,171,247,307,101,101,101,101,413,171,247,307,413,171,247,307,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,171,247,307,101,101,413,413,413,171,247,307,101,101,101,101,101,413,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,413,171,247,307,101,101,101,413,171,247,307,413,171,247,307,413,171,247,307,101,413,101,101,413,213,0,0,213,102,102,102,213,213,102,213,213,102,102,102,102,102,102,102,102,102,213,102,102,102,213,213,102,102,213,102,102,213,102,102,102,102,102,102,102,102,102,102,213,213,213,213,102,0,0,0,414,415,415,0,0,0,0,414,90,415,414,90,415,414,90,415,414,90,415,0,0,414,0,0,0,0,0,0,90,414,90,415,0,414,90,415,414,414,414,414,414,414,414,90,90,415,415,0,414,414,414,90,415,90,0,0,0,0,90,0,0,0,0,414,0,0,0,0,0,414,90,415,414,90,415,414,90,415,414,90,415,414,414,0,0,416,0,0,418,418,418,0,416,0,0,277,416,417,417,417,416,0,417,419,417,419,417,419,417,419,418,416,417,419,417,419,0,277,416,416,416,416,416,416,416,416,416,38,277,417,418,419,416,38,277,417,418,419,38,416,38,277,417,418,419,416,38,277,417,418,419,416,416,38,416,38,38,416,38,38,416,416,38,277,417,418,419,416,38,416,416,416,416,416,38,277,417,418,419,416,38,277,417,418,419,38,416,416,416,416,38,38,38,38,38,416,277,418,38,38,38,38,38,38,38,38,38,416,416,416,416,38,277,417,418,419,38,38,416,416,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,416,416,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,416,38,38,38,38,38,38,38,416,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,416,416,416,38,416,38,277,417,418,419,416,38,38,38,416,38,277,417,418,419,416,38,277,417,418,419,416,38,277,417,418,419,416,38,38,0,0,0,0,0,0,0,0,0,0,0,159,135,0,158,0,159,0,135,159,135,158,158,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,37,0,32,325,325,32,420,420,420,0,420,160,37,0,160,160,0,325,87,420,420,420,0,325,420,0,0,87,0,160,11,11,11,11,11,11,11,11,11,325,11,11,11,11,11,325,325,325,325,325,325,325,421,422,325,87,37,420,421,422,325,87,37,420,11,11,325,87,37,420,325,87,37,420,11,325,325,11,11,421,422,11,11,325,11,11,11,11,11,11,421,422,11,325,421,422,11,11,11,11,11,325,325,87,37,420,325,11,421,11,325,325,325,325,325,87,37,420,421,422,325,87,37,420,420,325,325,325,325,11,11,11,11,11,11,325,87,37,420,11,325,11,325,325,421,422,325,87,37,420,421,422,325,421,421,11,11,11,325,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,421,422,11,11,421,422,325,11,11,11,11,325,422,420,11,11,11,11,11,11,11,11,11,325,11,11,11,11,11,11,11,325,11,11,11,421,422,11,11,325,325,11,325,11,325,87,37,420,11,11,325,11,11,11,421,422,325,87,37,420,421,422,325,87,37,420,421,422,325,87,37,420,325,11,11,11,11,316,316,316,0,316,316,316,316,316,316,316,316,316,316,0,316,316,316,316,0,0,0,169,92,92,92,92,169,169,169,169,92,169,169,169,169,92,92,92,92,169,169,169,169,169,169,169,92,169,169,92,169,92,92,92,279,279,279,0,0,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,423,279,279,279,279,279,423,279,279,279,279,279,279,279,279,279,279,423,279,279,279,279,279,279,423,279,423,423,423,423,279,279,423,279,423,279,423,279,279,279,279,279,279,279,279,279,32,32,161,161,161,160,160,160,161,161,0,0,0,0,161,160,0,0,0,0,424,424,425,425,425,424,424,426,424,426,424,426,424,426,426,425,424,426,424,426,425,424,426,424,426,424,426,426,424,426,424,0,424,426,426,426,424,424,424,424,424,426,426,424,426,424,426,424,426,424,0,0,0,427,427,427,427,427,427,0,0,168,168,0,0,168,0,0,168,168,0,168,168,428,429,430,168,428,429,430,168,64,428,429,430,168,428,429,430,168,478,64,64,64,64,64,64,64,478,478,429,430,168,64,428,429,430,168,428,429,430,168,64,64,168,428,429,430,428,429,430,478,478,479,64,64,64,64,428,429,430,168,428,429,430,64,428,429,64,64,64,428,429,430,428,428,428,429,429,430,64,64,64,64,64,64,64,64,64,64,428,429,478,478,428,478,478,428,428,64,64,64,64,64,64,64,428,429,430,168,64,64,428,429,430,168,428,429,430,168,428,429,430,168,478,478,428,429,430,428,429,430,64,478,478,431,0,431,431,432,432,431,431,0,431,42,431,0,432,432,42,42,431,432,42,431,432,42,42,431,432,42,431,432,42,42,42,42,42,42,431,432,42,431,432,42,431,432,42,431,432,42,42,42,42,42,431,432,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,431,432,42,42,431,432,42,431,432,42,431,432,42,42,42,42,42,42,42,433,336,0,0,0,433,336,0,0,433,336,0,0,0,276,276,276,275,433,336,275,433,336,276,275,433,336,275,433,336,216,275,275,336,276,276,276,216,216,215,276,275,433,336,275,275,433,433,433,433,336,336,215,275,275,276,276,275,433,336,216,216,276,276,276,276,276,276,276,216,215,216,216,276,275,433,336,275,433,336,275,433,336,216,215,433,275,433,336,0,276,276,275,275,220,220,220,0,337,337,337,337,337,337,337,220,337,337,337,337,0,220,220,220,220,220,220,220,220,220,220,337,220,337,220,337,220,337,220,220,220,220,220,220,337,220,220,220,220,220,220,337,220,337,220,220,220,220,220,337,220,220,220,220,337,220,220,220,220,220,220,220,220,220,220,337,220,220,337,220,337,220,337,220,0,0,0,147,148,0,147,148,148,0,0,413,434,201,434,201,413,434,201,434,201,201,201,434,201,201,434,201,434,201,201,201,201,201,434,201,201,434,201,201,201,434,201,201,434,434,201,434,201,434,201,434,201,201,201,201,0,0,435,435,435,435,435,435,435,248,435,248,435,248,435,435,248,435,248,248,248,248,248,248,0,248,248,435,435,435,435,248,248,248,435,248,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,480,0,0,0,0,481,437,480,437,482,483,437,438,437,438,438,438,483,483,483,482,301,309,300,304,440,438,482,437,440,301,300,304,309,437,438,437,438,0,437,438,437,440,437,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,483,0,483,440,440,440,440,438,438,438,437,438,437,438,437,438,438,0,0,0,0,439,483,439,439,441,439,441,441,483,483,483,439,441,439,439,441,439,441,439,441,441,441,441,441,483,483,439,441,439,441,439,441,439,0,0,287,333,287,333,0,333,333,0,0,214,214,214,287,333,287,333,214,287,333,287,333,287,333,214,287,333,287,333,214,214,287,333,214,214,214,287,333,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,287,333,287,333,287,333,287,333,214,0,0,0,315,253,253,253,223,223,315,0,315,253,223,315,253,223,306,306,315,253,223,315,253,223,306,306,306,315,253,223,306,306,306,306,306,306,315,253,223,315,253,223,306,306,306,306,306,306,306,306,315,253,223,306,306,306,306,315,253,223,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,315,253,223,315,253,223,315,253,223,315,253,223,306,306,306,0,0,442,0,0,442,442,442,442,442,442,442,442,442,442,443,442,443,442,442,442,442,442,442,442,443,443,442,443,442,443,442,442,443,442,442,442,442,442,443,442,442,442,442,442,442,442,442,442,443,442,442,442,443,442,442,442,442,442,442,442,442,442,443,442,443,442,443,442,442,0,0,448,0,454,0,331,278,329,278,454,454,0,0,0,454,204,452,0,278,331,331,331,452,452,451,0,0,0,0,0,204,278,0,0,0,0,278,453,329,262,262,262,204,448,330,204,278,0,0,262,263,454,448,278,448,0,0,0,0,0,0,0,0,330,0,0,0,204,278,452,204,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,453,262,263,454,0,0,448,451,452,278,285,444,207,446,207,446,254,447,41,448,130,447,256,207,256,41,41,207,448,448,448,448,448,448,448,450,43,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,446,297,296,260,449,256,43,448,185,41,444,450,451,262,263,204,330,254,329,331,452,453,278,454,207,260,449,256,43,448,185,41,444,450,451,262,263,204,330,254,329,331,452,453,278,454,218,448,207,43,185,448,484,448,285,207,207,328,296,207,236,43,448,185,41,444,450,451,262,263,204,254,329,452,453,278,454,297,297,447,236,447,236,256,130,448,260,297,296,296,296,484,448,297,256,256,256,455,260,43,448,185,41,444,450,451,262,263,204,330,329,331,452,453,278,454,207,207,448,297,447,297,297,218,297,130,446,285,328,296,455,207,447,236,260,449,256,43,448,448,448,448,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,207,297,328,207,207,297,207,449,328,207,328,207,328,207,218,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,448,448,448,448,130,130,130,130,256,256,130,328,207,256,43,448,451,262,263,204,330,329,331,452,453,278,454,130,328,296,207,256,41,328,207,296,130,232,260,449,43,185,41,444,450,260,449,43,185,41,444,450,448,484,448,484,448,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,448,448,207,232,130,328,256,207,130,256,207,130,130,207,130,296,130,130,185,455,297,446,285,328,296,207,447,236,449,43,41,444,450,448,43,130,297,297,448,446,446,254,285,446,444,450,260,236,448,296,446,285,207,207,448,297,207,207,207,297,297,297,296,207,328,207,328,207,328,207,328,207,328,207,328,296,207,328,207,328,207,207,296,207,296,328,296,297,296,207,296,296,296,207,207,207,484,256,328,296,185,444,450,448,448,448,296,207,450,296,296,296,449,450,185,260,449,256,43,448,185,41,444,450,451,262,263,204,330,254,329,331,452,453,278,454,207,448,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,296,285,185,260,449,256,43,448,185,41,444,450,232,451,262,263,204,330,254,329,331,452,453,278,454,207,448,296,130,256,260,449,43,185,41,444,450,455,484,256,41,207,260,449,43,185,41,444,450,335,0,335,335,335,335,335,335,335,335,335,335,0,335,335,335,335,326,326,0,0,326,0,0,0,0,0,459,326,459,326,74,459,326,459,326,74,74,74,74,74,74,459,326,74,74,74,460,459,326,74,459,326,74,74,74,74,74,326,459,326,74,74,74,459,74,74,460,74,74,74,459,74,74,74,459,326,459,326,459,326,459,326,74,74,74,74,74,74,0,0,327,0,0,327,0,0,235,462,461,462,327,461,462,327,461,462,461,462,463,235,461,462,235,235,464,461,461,462,463,464,235,461,462,327,461,462,327,327,327,461,462,461,462,461,462,327,462,464,235,0,462,461,0,462,461,462,464,464,464,0,0,461,462,461,461,462,327,461,462,327,461,462,327,461,461,462,462,461,461,462,462,334,0,334,334,334,334,334,334,334,334,334,0,334,334,334,0,0,334,334,334,353,353,0,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,0,353,353,0,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,0,353,353,353,353,353,353,353,353,353,353,353,353,353,0,354,354,354,354,354,354,354,0,354,354,354,0,354,354,354,354,354,354,0,0,0,0,0,290,290,282,194,282,282,282,0,0,290,194,194,290,290,290,290,290,290,290,194,291,194,291,465,290,282,465,290,282,194,465,290,282,465,290,282,290,194,291,290,290,194,291,290,290,194,465,290,282,290,194,291,465,290,290,290,290,290,282,465,290,282,290,290,290,290,194,194,194,194,290,282,194,194,291,290,290,290,465,290,282,290,290,194,291,194,291,194,290,290,194,291,290,290,290,290,290,194,291,465,290,282,290,465,290,282,465,290,282,465,290,282,290,194,194,0,0,0,0,485,486,487,488,485,486,487,488,485,486,487,485,486,487,488,488,466,244,0,293,293,293,293,293,293,0,0,292,292,292,293,292,292,0,292,292,292,292,292,292,292,292,466,293,466,293,466,293,466,293,244,244,244,466,293,244,466,293,466,293,0,244,466,293,244,293,293,466,293,244,0,244,0,244,244,244,244,0,244,0,244,244,244,0,466,293,466,293,466,293,466,293,293,244,244,244,293,244,0,184,292,184,0,293,293,293,293,293,293,0,0,292,292,292,293,184,184,184,292,292,292,292,292,292,292,292,292,292,292,184,292,184,292,184,292,184,0,292,184,292,184,292,184,292,184,292,184,0,292,184,292,184,292,184,292,184,58,0,184,58,250,184,184,184,0,0,250,58,58,250,58,250,250,58,250,250,58,58,58,58,250,250,250,58,58,250,250,58,58,58,58,250,0,0,184,0,293,293,293,293,293,293,0,0,292,292,292,293,184,184,184,292,292,292,292,292,292,292,292,292,292,271,271,0,271,271,271,0,271],"fp":[[3,"Color"],[15,"u8"],[3,"FourByteTag"],[3,"skia_textlayout_ParagraphCache"],[3,"Handle"],[3,"GrDirectContext"],[3,"RCHandle"],[3,"GrRecordingContext"],[15,"bool"],[6,"OpBuilder"],[6,"Path"],[4,"PathOp"],[3,"SkOpBuilder"],[3,"GrGLExtensions"],[15,"str"],[8,"AsRef"],[3,"V2"],[3,"V3"],[3,"V4"],[3,"IVector"],[3,"ISize"],[3,"Point"],[3,"Size"],[6,"Vector"],[3,"Point3"],[6,"PathBuilder"],[3,"Rect"],[6,"scalar"],[3,"SkPath"],[3,"SkPathBuilder"],[8,"Into"],[4,"PathDirection"],[4,"Option"],[3,"skia_textlayout_TextStyle"],[15,"i32"],[15,"usize"],[4,"AddPathMode"],[3,"Matrix"],[3,"skia_textlayout_ParagraphBuilder"],[3,"RefHandle"],[3,"PlaceholderStyle"],[3,"RRect"],[3,"TextShadow"],[6,"Pixmap"],[4,"c_void"],[3,"SkPixmap"],[3,"IRect"],[3,"skia_textlayout_TypefaceFontStyleSet"],[3,"SkYUVAPixmapInfo_SupportedDataTypes"],[3,"ColorChannelFlag"],[3,"SurfacePropsFlags"],[6,"Bitmap"],[3,"SkBitmap"],[6,"ImageInfo"],[6,"TextBlobBuilder"],[6,"Font"],[3,"SkTextBlobBuilder"],[6,"YUVAPixmapInfo"],[3,"SkYUVAPixmaps"],[3,"SkRuntimeEffect"],[3,"SkPaint"],[15,"f32"],[3,"SkImageFilter"],[6,"Region"],[4,"AlphaType"],[6,"ColorInfo"],[3,"SkColorInfo"],[3,"SkImageInfo"],[3,"SkImage"],[3,"skia_textlayout_Paragraph"],[3,"SkOrderedFontMgr"],[6,"FontMgr"],[3,"SkPDF_AttributeList"],[6,"Typeface"],[3,"SkVertices"],[15,"never"],[3,"Sk3DView"],[3,"Canvas"],[3,"SkStrokeRec"],[6,"Paint"],[6,"Picture"],[3,"SkDrawable"],[3,"SkPicture"],[6,"MaskFilter"],[3,"SkMaskFilter"],[4,"SkPathBuilder_ArcSize"],[4,"ArcSize"],[15,"i64"],[6,"Blender"],[3,"ArithmeticFPInputs"],[3,"SkPathEffect"],[3,"DashInfo"],[3,"Color4f"],[4,"BlendMode"],[6,"Data"],[3,"SkData"],[6,"DirectContext"],[3,"GrBackendFormat"],[4,"Format"],[6,"Enum"],[6,"Image"],[6,"ImageFilter"],[6,"PixelFormat"],[3,"SkString"],[3,"SkStrings"],[4,"Format"],[6,"DataTable"],[3,"SkDataTable"],[3,"CStr"],[3,"GrBackendDrawableInfo"],[4,"BackendAPI"],[3,"skgpu_MutableTextureState"],[4,"BackendApi"],[3,"GrBackendRenderTarget"],[3,"GrBackendTexture"],[6,"SurfaceCharacterization"],[6,"BackendFormat"],[3,"SkSurfaceCharacterization"],[3,"SkPictureRecorder"],[6,"BBHFactory"],[15,"u32"],[4,"BlurStyle"],[4,"TileMode"],[3,"SkVertices_Builder"],[6,"TextBlob"],[3,"SkRegion"],[3,"SkCodec"],[3,"SkTextBlob"],[3,"SkTypeface"],[6,"Paragraph"],[4,"ColorType"],[6,"DeferredDisplayListRecorder"],[3,"SkDeferredDisplayListRecorder"],[3,"SkSurface"],[4,"PaintCap"],[3,"skia_textlayout_FontCollection"],[3,"RGB"],[3,"HSV"],[3,"ColorSpacePrimaries"],[3,"ColorSpaceTransferFn"],[3,"XYZD50Hash"],[3,"CubicMap"],[4,"TextEncoding"],[3,"M44"],[4,"YUVColorSpace"],[4,"ColorChannel"],[4,"FilterMode"],[4,"MipmapMode"],[3,"RSXform"],[4,"PixelGeometry"],[3,"SurfaceProps"],[3,"DateTime"],[4,"EncodedImageFormat"],[4,"CodecResult"],[4,"BlendModeCoeff"],[4,"ClipOp"],[4,"FontHinting"],[4,"PaintStyle"],[4,"PaintJoin"],[4,"PathFillType"],[4,"PathVerb"],[4,"CoverageMode"],[3,"skia_textlayout_FontArguments"],[3,"FontArguments"],[4,"Ordering"],[6,"ColorFilter"],[6,"ColorSpace"],[4,"RegionOp"],[6,"PathEffect"],[3,"SkColorFilter"],[4,"CompressionType"],[3,"SkYUVAInfo"],[3,"SkYUVAPixmapInfo"],[6,"FontTableTag"],[6,"FontStyleSet"],[3,"SkRuntimeEffect_Uniform"],[3,"SkFontStyleSet"],[3,"SkFontMgr"],[3,"SkFont"],[3,"SkShaper_FontRunIterator"],[3,"SkShaper_LanguageRunIterator"],[3,"SkShaper_BiDiRunIterator"],[3,"SkShaper_ScriptRunIterator"],[4,"DataType"],[3,"Decoration"],[3,"SkPDF_Metadata"],[4,"Renderable"],[6,"Unichar"],[3,"FontStyle"],[3,"Borrows"],[3,"SkColorSpace"],[6,"DeferredDisplayList"],[3,"SkCustomTypefaceBuilder"],[6,"Vertices"],[3,"SkDynamicMemoryWStream"],[3,"SkStreamAsset"],[6,"PixelRef"],[3,"SkPixelRef"],[3,"SkDrawable_GpuDrawHandler"],[6,"BackendDrawableInfo"],[3,"SamplingOptions"],[4,"Edging"],[3,"skia_textlayout_ParagraphStyle"],[4,"TextAlign"],[6,"ImageGenerator"],[3,"SkImageGenerator"],[6,"TextStyle"],[8,"IntoIterator"],[3,"GrGLInterface"],[6,"Extensions"],[3,"String"],[8,"Iterator"],[4,"MapDirection"],[6,"StrokeRec"],[6,"Child"],[6,"Uniform"],[3,"Vec"],[6,"FontArguments"],[6,"Drawable"],[3,"Flags"],[3,"FlushInfo"],[4,"SemaphoresSubmitted"],[4,"BackendSurfaceAccess"],[6,"MutableTextureState"],[3,"Formatter"],[6,"Result"],[3,"TextBlobRun"],[3,"Iter"],[3,"Error"],[4,"Result"],[3,"skia_textlayout_StrutStyle"],[3,"FontFamilies"],[3,"FontMetrics"],[3,"SkShader"],[6,"OrderedFontMgr"],[6,"TypefaceFontProvider"],[6,"RecordingContext"],[6,"BackendTexture"],[4,"SurfaceOrigin"],[6,"BackendRenderTarget"],[6,"Handle"],[15,"char"],[6,"Codec"],[6,"YUVAInfo"],[3,"SkPathMeasure"],[3,"SkContourMeasureIter"],[4,"BitDepth"],[6,"Shader"],[3,"DrawableInfo"],[6,"YUVAPixmaps"],[4,"MipMapped"],[6,"YUVABackendTextures"],[4,"BackendHandleAccess"],[3,"PositionWithAffinity"],[3,"Options"],[3,"LineMetrics"],[3,"SkContourMeasure"],[3,"MatrixFlags"],[6,"GlyphId"],[3,"TextBox"],[3,"Range"],[4,"RectHeightStyle"],[4,"RectWidthStyle"],[3,"SkColorMatrix"],[3,"FramebufferInfo"],[3,"TextureInfo"],[3,"HighContrastConfig"],[3,"DirectContextId"],[3,"SkRuntimeEffect_Child"],[4,"Protected"],[6,"SupportedDataTypes"],[4,"GradientShaderColors"],[3,"Flags"],[3,"Interpolation"],[3,"Options"],[6,"RuntimeEffect"],[4,"ApplyPerspectiveClip"],[4,"StyleType"],[3,"MatrixFlags"],[6,"TextureInfo"],[3,"GrYUVABackendTextureInfo"],[4,"VertexMode"],[3,"skia_textlayout_FontFeature"],[3,"SkFlattenable"],[6,"ParagraphCache"],[3,"GrYUVABackendTextures"],[4,"InitStyle"],[3,"GrMtlBackendContext"],[3,"GrMtlTextureInfo"],[3,"BuilderFlags"],[6,"Builder"],[4,"PlaneConfig"],[4,"Subsampling"],[4,"EncodedOrigin"],[3,"SkShaper"],[6,"ParagraphStyle"],[6,"FontCollection"],[3,"skia_textlayout_TypefaceFontProvider"],[3,"SkTextBlob_Iter"],[6,"BiDiRunIterator"],[6,"FontRunIterator"],[6,"Interface"],[3,"ContextOptions"],[6,"ScriptRunIterator"],[6,"BackendContext"],[6,"Surface"],[4,"CachingHint"],[3,"Budgeted"],[6,"LanguageRunIterator"],[4,"ImageLayout"],[3,"GrBackendSurfaceMutableState"],[3,"ImageInfo"],[3,"BackendContext"],[3,"YcbcrConversionInfo"],[4,"ContentChangeMode"],[4,"Style"],[3,"Duration"],[6,"c_void"],[6,"ColorMatrix"],[6,"U8CPU"],[6,"PMColor"],[3,"ResourceCacheLimits"],[3,"ResourceCacheUsage"],[4,"ScanlineOrder"],[3,"SegmentMask"],[4,"SerializeBehavior"],[4,"TypefaceGlyph"],[6,"StrutStyle"],[4,"TextBaseline"],[4,"TextDirection"],[4,"TextHeightBehavior"],[6,"GPUDrawHandler"],[4,"Style"],[4,"PathEncoding"],[4,"Mode"],[4,"ChildType"],[4,"Type"],[3,"TypeId"],[6,"TypefaceId"],[8,"ConditionallySend"],[3,"Sendable"],[3,"Axis"],[3,"Coordinate"],[3,"TopLayerPixels"],[3,"SaveLayerFlags"],[3,"OwnedCanvas"],[3,"SaveLayerRec"],[4,"GlyphPositions"],[4,"PointMode"],[4,"SrcRectConstraint"],[3,"AutoRestoredCanvas"],[3,"Lattice"],[3,"ShadowFlags"],[4,"Align"],[4,"RectType"],[4,"SelectionPolicy"],[4,"ZeroInitialized"],[6,"ContourMeasure"],[6,"ContourMeasureIter"],[3,"Document"],[3,"Open"],[3,"OnPage"],[8,"Debug"],[3,"VariationPosition"],[3,"Palette"],[3,"Override"],[3,"Flags"],[3,"Weight"],[3,"Width"],[4,"Slant"],[3,"DriverBugWorkarounds"],[6,"BackendSurfaceMutableState"],[6,"YUVABackendTextureInfo"],[4,"Enable"],[4,"ShaderCacheStrategy"],[3,"BackendState"],[3,"SurfaceInfo"],[4,"Standard"],[6,"UInt"],[3,"SurfaceInfo"],[3,"ExtensionFlags"],[3,"FeatureFlags"],[3,"AllocFlag"],[3,"Alloc"],[4,"GetProcOf"],[3,"SurfaceInfo"],[3,"Version"],[4,"ImageTiling"],[4,"SharingMode"],[4,"Filter"],[3,"Extent2D"],[3,"Offset2D"],[3,"Rect2D"],[4,"SamplerYcbcrModelConversion"],[4,"SamplerYcbcrRange"],[4,"ChromaLocation"],[3,"PhysicalDeviceFeatures2"],[3,"NullHandle"],[6,"Buffer"],[6,"Image"],[6,"Instance"],[6,"PhysicalDevice"],[6,"Device"],[6,"Queue"],[6,"CommandBuffer"],[6,"DeviceMemory"],[6,"RenderPass"],[6,"DeviceSize"],[6,"Bool32"],[15,"u64"],[6,"FormatFeatureFlags"],[4,"InvertStyle"],[3,"CubicResampler"],[3,"CropRect"],[4,"Dither"],[3,"TypeMask"],[4,"Member"],[4,"ScaleToFit"],[4,"AffineMember"],[4,"Verb"],[3,"Iter"],[3,"RawIter"],[6,"PathMeasure"],[3,"StructureElementNode"],[6,"AttributeList"],[3,"Metadata"],[6,"PictureRecorder"],[3,"Iterator"],[3,"Cliperator"],[3,"Spanerator"],[4,"Type"],[4,"Corner"],[4,"ChildPtr"],[3,"FilterOptions"],[3,"GradientInfo"],[3,"SkShaper_RunHandler"],[3,"TextBlobBuilderRunHandler"],[3,"Feature"],[3,"RunInfo"],[6,"Shaper"],[3,"Buffer"],[3,"Flags"],[3,"Canvas"],[3,"Block"],[6,"TextRange"],[6,"ParagraphBuilder"],[6,"TypefaceFontStyleSet"],[3,"TextDecoration"],[3,"StyleMetrics"],[3,"Placeholder"],[4,"Affinity"],[4,"TextDecorationStyle"],[4,"TextDecorationMode"],[4,"PlaceholderAlignment"],[6,"FontFeature"],[15,"f64"],[6,"BlockRange"],[15,"isize"],[3,"LocalizedString"],[6,"LocalizedStringsIter"],[3,"Patch3D"],[3,"Camera3D"],[6,"View3D"],[6,"CustomTypefaceBuilder"],[3,"Bone"],[4,"Siting"],[8,"Scalar"],[8,"Scalars"],[8,"Contains"],[8,"Flattenable"],[8,"Pixel"],[8,"NativeFlattenable"],[8,"QuickReject"],[8,"RoundOut"],[4,"AutoCanvasRestore"],[8,"SetMatrix"],[3,"PhysicalDeviceFeatures"],[8,"Combine"],[8,"Intersects"],[8,"AsRunHandler"],[8,"AsNativeRunHandler"],[8,"RunIterator"],[8,"RunHandler"],[8,"RangeExtensions"],[8,"PointerWrapper"],[8,"ValueWrapper"],[8,"NativeTransmutableWrapper"],[8,"RefWrapper"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
